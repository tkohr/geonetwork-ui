{"version":3,"sources":["/home/runner/work/geonetwork-ui/geonetwork-ui/libs/auth/src/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/auth/src/lib/auth.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/auth/src/lib/auth.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/catalog/src/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/catalog/src/lib/catalog.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/catalog/src/lib/site-title/site-title.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/catalog/src/lib/site-title/site-title.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/common.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/i18n/gn4.translate.loader.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/i18n/i18n.constants.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/i18n/i18n.interceptor.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/i18n/i18n.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/i18n/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/models/facets.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/models/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/models/infinite-scroll.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/models/search.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/services/bootstrap.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/services/color.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/services/constant.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/services/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/services/log.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/services/metadata-url.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/utils/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/common/src/lib/utils/parse.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/fixtures/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/fixtures/site.fixtures.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/fixtures/ui.fixtures.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/gn-api.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/api.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/customstyle.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/groups.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/harvesters.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/identifiers.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/languages.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/links.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/logos.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/mapservers.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/me.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/operations.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/pages.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/processes.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/records.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/regions.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/registries.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/related.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/search.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/selections.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/site.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/sources.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/standards.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/status.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/tags.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/tools.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/ui.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/userfeedback.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/users.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/usersearches.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/api/userselections.api.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/configuration.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/encoder.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/address.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/batchEditParameter.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/category.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/categoryResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/crs.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/entry.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/extentDto.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/externalResourceManagementProperties.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/featureResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/field.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/grantedAuthority.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/groupOperations.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/groupPrivilege.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/iProcessingReport.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/iSODate.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/infoReport.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/inlineObject.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/inlineObject1.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/inlineObject2.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/inlineObject3.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/isoLanguage.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/keywordBean.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/link.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/localizedString.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/logFileResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/mapServer.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/meResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/metadataCategory.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/metadataIdentifierTemplate.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/metadataLink.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/metadataResource.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/models.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/operation.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/ownerResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/pageJSONWrapper.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/passwordUpdateParameter.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/ratingAverage.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/ratingCriteria.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/regionResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/replaceEntryChange.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/report.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/savedQuery.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/selection.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/setting.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/siteInformation.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/sort.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/status.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/statusValue.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/suggestionType.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/systemInfo.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/transferRequest.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/uiSetting.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/user.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/userFeedbackDTO.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/userGroup.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/userGroupId.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/userGroupsResponse.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/userSearchDto.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/userSecurity.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/model/values.api.model.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/gn-api/src/lib/gn4/openapi/variables.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/constant.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/elasticsearch.mapper.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/elasticsearch.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/fixtures/aggregations-request.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/fixtures/aggregations-response.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/fixtures/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/fixtures/search-requests.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/fixtures/search-responses.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/elasticsearch/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/facets/facets-container/facets-container.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/facets/facets-container/facets-container.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/facets/facets.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/facets/facets.service.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/fuzzy-search/fuzzy-search.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/fuzzy-search/fuzzy-search.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/records-metrics/records-metrics.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/records-metrics/records-metrics.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/results-hits-number/results-hits.container.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/results-hits-number/results-hits.container.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/results-layout/results-layout.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/results-layout/results-layout.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/results-list/results-list.container.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/results-list/results-list.container.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/search.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/sort-by/sort-by.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/sort-by/sort-by.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/state/actions.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/state/container/search-state.container.directive.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/state/effects.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/state/reducer.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/state/search.facade.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/search/src/lib/state/selectors.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/autocomplete/autocomplete.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/autocomplete/autocomplete.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/button/button.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/button/button.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/catalog-title/catalog-title.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/catalog-title/catalog-title.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/chips-input/chips-input.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/chips-input/chips-input.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/color-scale/color-scale.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/color-scale/color-scale.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/datepicker/datepicker.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/datepicker/datepicker.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/drag-and-drop-file-input/drag-and-drop-file-input.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/drag-and-drop-file-input/drag-and-drop-file-input.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/dropdown-selector/dropdown-selector.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/dropdown-selector/dropdown-selector.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facet-block/facet-block.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facet-block/facet-block.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facet-item/facet-item.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facet-item/facet-item.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facet-list/facet-list.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facet-list/facet-list.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/facets.module.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/fixtures/aggregations-model-response.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/facets/fixtures/index.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/progress-bar/progress-bar.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/progress-bar/progress-bar.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-metric/record-metric.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-metric/record-metric.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-card/record-preview-card.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-card/record-preview-card.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-list/record-preview-list.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-list/record-preview-list.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-text/record-preview-text.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-text/record-preview-text.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-title/record-preview-title.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview-title/record-preview-title.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-preview/record-preview.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-thumbnail/record-thumbnail.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/record-thumbnail/record-thumbnail.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/results-hits-number/results-hits-number.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/results-hits-number/results-hits-number.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/results-list/results-list.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/results-list/results-list.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/step-bar/step-bar.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/step-bar/step-bar.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/text-area/text-area.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/text-area/text-area.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/text-input/text-input.component.ts","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/text-input/text-input.component.html","/home/runner/work/geonetwork-ui/geonetwork-ui/libs/ui/src/lib/ui.module.ts","./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/main-search/main-search.component.ts","./src/app/main-search/main-search.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2019.js","sourcesContent":["/*\n * Public API Surface of lib-auth\n */\n\nexport * from './lib/auth.service'\nexport * from './lib/auth.module'\n","import { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n})\nexport class AuthModule {}\n","import { Injectable } from '@angular/core'\nimport { MeApiService, MeResponseApiModel } from '@lib/gn-api'\nimport { Observable } from 'rxjs'\nimport { map, shareReplay } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  authReady$: Observable<MeResponseApiModel>\n\n  constructor(private meApi: MeApiService) {}\n\n  authReady() {\n    if (!this.authReady$) {\n      this.authReady$ = this.meApi\n        .getMe()\n        .pipe(shareReplay({ bufferSize: 1, refCount: true }))\n    }\n    return this.authReady$\n  }\n}\n","/*\n * Public API Surface of catalog\n */\nexport * from './lib/catalog.module'\n","import { NgModule } from '@angular/core'\nimport { SiteTitleComponent } from './site-title/site-title.component'\nimport { UiModule } from '@lib/ui'\nimport { GnApiModule } from '@lib/gn-api'\nimport { CommonModule } from '@angular/common'\n\n@NgModule({\n  declarations: [SiteTitleComponent],\n  imports: [UiModule, GnApiModule, CommonModule],\n  exports: [SiteTitleComponent],\n})\nexport class LibCatalogModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core'\nimport { BootstrapService } from '@lib/common'\nimport { SettingsListResponseApiModel } from '@lib/gn-api'\nimport { Observable } from 'rxjs'\n\n@Component({\n  selector: 'catalog-site-title',\n  templateUrl: './site-title.component.html',\n  styleUrls: ['./site-title.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteTitleComponent implements OnInit {\n  info$: Observable<SettingsListResponseApiModel>\n\n  constructor(private commonService: BootstrapService) {\n    this.info$ = commonService.siteInfoReady()\n  }\n\n  ngOnInit(): void {}\n}\n","<ui-catalog-title\n  *ngIf=\"info$ | async as info\"\n  [name]=\"info['system/site/name']\"\n  [tooltip]=\"info['system/site/organization']\"\n></ui-catalog-title>\n","/*\n * Public API Surface of lib-common\n */\n\nexport * from './lib/services'\nexport * from './lib/common.module'\nexport * from './lib/i18n'\nexport * from './lib/models/'\nexport * from './lib/utils/'\n","import { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n})\nexport class CommonModule {}\n","import { Injectable } from '@angular/core'\nimport { ToolsApiService } from '@lib/gn-api'\nimport { TranslateLoader } from '@ngx-translate/core'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Gn4TranslateLoader implements TranslateLoader {\n  constructor(private toolsApiService: ToolsApiService) {}\n\n  getTranslation(lang: string): Observable<any> {\n    // FIXME: need to filter translation with {{}} pattern\n    // legacy from AngularJs, the api should handle it\n    return this.toolsApiService.getTranslationsPackage1('gnui').pipe(\n      map((json) =>\n        Object.keys(json).reduce((translations, key) => {\n          const value = json[key]\n          if (!value.includes(' {{')) {\n            translations[key] = value\n          }\n          return translations\n        }, {})\n      )\n    )\n  }\n}\n","import { HttpClient } from '@angular/common/http'\nimport { ToolsApiService } from '@lib/gn-api'\nimport { TranslateCompiler, TranslateLoader } from '@ngx-translate/core'\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\nimport { TranslateMessageFormatCompiler } from 'ngx-translate-messageformat-compiler'\nimport { Gn4TranslateLoader } from './gn4.translate.loader'\n\nexport const DEFAULT_LANG = 'en'\n\nexport const LANG_3_TO_2_MAPPER = {\n  eng: 'en',\n  dut: 'nl',\n  fre: 'fr',\n  ger: 'de',\n  kor: 'ko',\n  spa: 'es',\n  cze: 'cs',\n  cat: 'ca',\n  fin: 'fi',\n  ice: 'is',\n  ita: 'it',\n  por: 'pt',\n  rus: 'ru',\n  chi: 'zh',\n  slo: 'sk',\n}\n\nexport const LANG_2_TO_3_MAPPER = Object.entries(LANG_3_TO_2_MAPPER).reduce(\n  (mapperObject, langEntry) => {\n    return { ...mapperObject, [langEntry[1]]: langEntry[0] }\n  },\n  {}\n)\n\nexport function HttpLoaderFactory(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/')\n}\n\nexport const TRANSLATE_DEFAULT_CONFIG = {\n  loader: {\n    provide: TranslateLoader,\n    useFactory: HttpLoaderFactory,\n    defaultLanguage: DEFAULT_LANG,\n    deps: [HttpClient],\n  },\n}\n\nexport const TRANSLATE_GEONETWORK_CONFIG = {\n  compiler: {\n    provide: TranslateCompiler,\n    useClass: TranslateMessageFormatCompiler,\n  },\n  loader: {\n    provide: TranslateLoader,\n    useClass: Gn4TranslateLoader,\n    defaultLanguage: DEFAULT_LANG,\n    deps: [ToolsApiService],\n  },\n}\n","import { Injectable } from '@angular/core'\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http'\nimport { TranslateService } from '@ngx-translate/core'\nimport { Observable } from 'rxjs'\nimport { DEFAULT_LANG } from './i18n.constants'\n\n@Injectable()\nexport class I18nInterceptor implements HttpInterceptor {\n  constructor(private translate: TranslateService) {}\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    request = request.clone({\n      setHeaders: {\n        'Accept-Language': this.translate.currentLang || DEFAULT_LANG,\n      },\n    })\n    return next.handle(request)\n  }\n}\n","import { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http'\nimport { NgModule } from '@angular/core'\nimport { GnApiModule } from '@lib/gn-api'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\nimport { DEFAULT_LANG } from './i18n.constants'\nimport { I18nInterceptor } from './i18n.interceptor'\n\n@NgModule({\n  imports: [HttpClientModule, GnApiModule],\n  exports: [TranslateModule],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: I18nInterceptor, multi: true },\n  ],\n})\nexport class I18nModule {\n  constructor(translate: TranslateService) {\n    translate.setDefaultLang(DEFAULT_LANG)\n    translate.use(DEFAULT_LANG)\n  }\n}\n","export * from './i18n.module'\nexport * from './i18n.constants'\nexport * from './i18n.interceptor'\n","export enum AggregationsTypesEnum {\n  TERMS = 'terms',\n  HISTOGRAM = 'histogram',\n  FILTERS = 'filters',\n  DATE_HISTOGRAM = 'date_histogram',\n}\n","export * from './facets.model'\nexport * from './search.model'\nexport * from './elasticsearch.model'\nexport * from './infinite-scroll.model'\n","export interface InfiniteScrollModel {\n  distance?: number\n  upDistance?: number\n  throttle?: number\n  disabled?: boolean\n}\n\nexport const InfiniteScrollOptionsDefault = {\n  distance: 1,\n  upDistance: 2,\n  throttle: 300,\n  disabled: false,\n}\n","export interface SearchFilters {\n  any?: string\n  [x: string]: any\n}\n\nexport interface StateConfigFilters {\n  custom?: SearchFilters\n  elastic?: any\n}\n\nexport interface RecordResponseLink {\n  protocol?: string\n  function?: string\n  name?: string\n  applicationProfile?: string\n  description?: string\n  url?: string\n  group?: number\n}\n\nexport interface RecordSummary {\n  id: string\n  uuid: string\n  title: string\n  abstract: string\n  metadataUrl: string\n  thumbnailUrl: string\n  logoUrl?: string\n  downloadable?: boolean\n  viewable?: boolean\n  updateFrequency?: string\n  link?: RecordResponseLink[]\n}\n\nexport interface RecordBrief extends RecordSummary {\n  organization: string\n  type: string\n}\n\nexport interface RecordMetric {\n  value: string\n  recordCount: number\n}\n\nexport enum ResultsListLayout {\n  CARD = 'CARD',\n  LIST = 'LIST',\n  TEXT = 'TEXT',\n  TITLE = 'TITLE',\n}\n\nexport const RESULTS_PAGE_SIZE = 20\n","import { Injectable } from '@angular/core'\nimport {\n  SettingsListResponseApiModel,\n  SiteApiService,\n  UiApiService,\n  UiSettingApiModel,\n} from '@lib/gn-api'\nimport { Observable, of } from 'rxjs'\nimport { catchError, map, pluck, shareReplay } from 'rxjs/operators'\nimport { LogService } from './log.service'\nimport { DEFAULT_UI_CONFIG } from './constant'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BootstrapService {\n  private uiConfigurations: Record<string, Observable<UiSettingApiModel>>\n\n  constructor(\n    private siteApiService: SiteApiService,\n    private logService: LogService,\n    private uiService: UiApiService\n  ) {\n    this.uiConfigurations = {}\n  }\n\n  siteInfoReady(): Observable<SettingsListResponseApiModel> {\n    return this.siteApiService.getSiteOrPortalDescription().pipe(shareReplay())\n  }\n\n  settingsReady(): Observable<SettingsListResponseApiModel> {\n    return this.siteApiService.getSettingsSet().pipe(shareReplay())\n  }\n\n  /**\n   * Adapt GeoNetwork current UI config to Angular app UI config.\n   * At some point this should be removed and converge to the same.\n   *\n   * TODO Changes are:\n   * * Aggregation / Move GN specific config properties to the meta tag\n   * (the meta tag is returned by Elasticsearch)\n   */\n  buildConfig(configString) {\n    const config =\n      typeof configString === 'string' ? JSON.parse(configString) : configString\n\n    const aggs = config.mods.search.facetConfig\n    const aggsPropertyToMoveToMeta = ['userHasRole', 'collapsed']\n    Object.keys(aggs).map((key) => {\n      aggsPropertyToMoveToMeta.map((property) => {\n        if (aggs[key].hasOwnProperty(property)) {\n          const o = { ...aggs[key].meta }\n          o[property] = aggs[key][property]\n          aggs[key].meta = o\n          delete aggs[key][property]\n        }\n      })\n    })\n\n    return config\n  }\n\n  uiConfReady(uiIdentifier: string): Observable<any> {\n    if (!this.uiConfigurations[uiIdentifier]) {\n      this.uiConfigurations = {\n        ...this.uiConfigurations,\n        [uiIdentifier]: this.uiService.getUiConfiguration(uiIdentifier).pipe(\n          pluck('configuration'),\n          map((configString) => this.buildConfig(configString)),\n          catchError((error) => {\n            this.logService.warn(\n              `Error during UI configuration loading: ${uiIdentifier}. Using default.`\n            )\n            return of(this.buildConfig(DEFAULT_UI_CONFIG))\n          }),\n          shareReplay()\n        ),\n      }\n    }\n    return this.uiConfigurations[uiIdentifier]\n  }\n}\n","import { Injectable } from '@angular/core'\nimport chroma from 'chroma-js'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ColorService {\n  constructor() {}\n\n  static getColor(name: string) {\n    return document.documentElement.style.getPropertyValue(`--color-${name}`)\n  }\n\n  static applyCssVariables(\n    primary: string,\n    secondary: string,\n    main: string,\n    background: string\n  ) {\n    const applyColor = (name: string, color) => {\n      document.documentElement.style.setProperty(`--color-${name}`, color.css())\n    }\n\n    const black = chroma('black')\n    const white = chroma('white')\n    applyColor('primary', chroma(primary))\n    applyColor(\n      'primary-lighter',\n      chroma.scale([primary, white]).mode('lab')(0.3)\n    )\n    applyColor(\n      'primary-lightest',\n      chroma.scale([primary, white]).mode('lab')(0.6)\n    )\n    applyColor(\n      'primary-darker',\n      chroma.scale([primary, black]).mode('lab')(0.3)\n    )\n    applyColor(\n      'primary-darkest',\n      chroma.scale([primary, black]).mode('lab')(0.6)\n    )\n    applyColor('secondary', chroma(secondary))\n    applyColor(\n      'secondary-lighter',\n      chroma.scale([secondary, white]).mode('lab')(0.3)\n    )\n    applyColor(\n      'secondary-lightest',\n      chroma.scale([secondary, white]).mode('lab')(0.6)\n    )\n    applyColor(\n      'secondary-darker',\n      chroma.scale([secondary, black]).mode('lab')(0.3)\n    )\n    applyColor(\n      'secondary-darkest',\n      chroma.scale([secondary, black]).mode('lab')(0.6)\n    )\n    applyColor('main', chroma(main))\n    applyColor('background', chroma(background))\n\n    const scale = chroma.scale([background, main]).mode('lrgb')\n    applyColor('gray-100', scale(0.1))\n    applyColor('gray-200', scale(0.2))\n    applyColor('gray-300', scale(0.3))\n    applyColor('gray-400', scale(0.4))\n    applyColor('gray-500', scale(0.5))\n    applyColor('gray-600', scale(0.6))\n    applyColor('gray-700', scale(0.7))\n    applyColor('gray-800', scale(0.8))\n    applyColor('gray-900', scale(0.9))\n  }\n\n  static generateLabelColor(\n    label: string,\n    saturation: number,\n    lightness: number\n  ): string {\n    let hue = 0\n    for (let i = 0; i < label.length; i++) {\n      hue += label.charCodeAt(i)\n    }\n    return chroma.hsl(hue % 360, saturation, lightness)\n  }\n}\n","export const DEFAULT_UI_CONFIG = {\n  langDetector: {\n    fromHtmlTag: false,\n    regexp: '^(?:/.+)?/.+/([a-z]{2,3})/.+',\n    default: 'eng',\n  },\n  nodeDetector: {\n    regexp: '^(?:/.+)?/(.+)/[a-z]{2,3}/.+',\n    default: 'srv',\n  },\n  serviceDetector: {\n    regexp: '^(?:/.+)?/.+/[a-z]{2,3}/(.+)',\n    default: 'catalog.search',\n  },\n  baseURLDetector: {\n    regexp: '^((?:/.+)?)+/.+/[a-z]{2,3}/.+',\n    default: '/geonetwork',\n  },\n  mods: {\n    global: {\n      humanizeDates: true,\n      dateFormat: 'YYYY-MM-DD',\n    },\n    footer: {\n      enabled: true,\n      showSocialBarInFooter: true,\n    },\n    header: {\n      enabled: true,\n      languages: {\n        eng: 'en',\n        dut: 'nl',\n        fre: 'fr',\n        ger: 'de',\n        kor: 'ko',\n        spa: 'es',\n        cze: 'cs',\n        cat: 'ca',\n        fin: 'fi',\n        ice: 'is',\n        ita: 'it',\n        por: 'pt',\n        rus: 'ru',\n        chi: 'zh',\n        slo: 'sk',\n      },\n      isLogoInHeader: false,\n      logoInHeaderPosition: 'left',\n      fluidHeaderLayout: true,\n      showGNName: true,\n      isHeaderFixed: false,\n    },\n    cookieWarning: {\n      enabled: true,\n      cookieWarningMoreInfoLink: '',\n      cookieWarningRejectLink: '',\n    },\n    home: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/catalog.search#/home',\n      showSocialBarInFooter: true,\n      fluidLayout: true,\n      facetConfig: {\n        inspireThemeUri: {\n          terms: {\n            field: 'inspireThemeUri',\n            size: 34,\n          },\n        },\n        'cl_topic.key': {\n          terms: {\n            field: 'cl_topic.key',\n            size: 20,\n          },\n        },\n        'cl_hierarchyLevel.key': {\n          terms: {\n            field: 'cl_hierarchyLevel.key',\n            size: 10,\n          },\n        },\n      },\n    },\n    search: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/catalog.search#/search',\n      hitsperpageValues: [30, 60, 120],\n      paginationInfo: {\n        hitsPerPage: 30,\n      },\n      queryBase: 'any:(${any}) resourceTitleObject.default:(${any})^2',\n      exactMatchToggle: true,\n      scoreConfig: {\n        boost: '5',\n        functions: [\n          {\n            filter: {\n              exists: {\n                field: 'parentUuid',\n              },\n            },\n            weight: 0.3,\n          },\n          {\n            filter: {\n              match: {\n                'cl_status.key': 'obsolete',\n              },\n            },\n            weight: 0.3,\n          },\n          {\n            gauss: {\n              dateStamp: {\n                scale: '365d',\n                offset: '90d',\n                decay: 0.5,\n              },\n            },\n          },\n        ],\n        score_mode: 'multiply',\n      },\n      autocompleteConfig: {\n        query: {\n          bool: {\n            must: [\n              {\n                multi_match: {\n                  query: '',\n                  type: 'bool_prefix',\n                  fields: [\n                    'resourceTitleObject.*',\n                    'resourceAbstractObject.*',\n                    'tag',\n                    'resourceIdentifier',\n                  ],\n                },\n              },\n            ],\n          },\n        },\n        _source: ['resourceTitleObject'],\n        from: 0,\n        size: 20,\n      },\n      moreLikeThisConfig: {\n        more_like_this: {\n          fields: [\n            'resourceTitleObject.default',\n            'resourceAbstractObject.default',\n            'tag.raw',\n          ],\n          like: null,\n          min_term_freq: 1,\n          max_query_terms: 12,\n        },\n      },\n      facetTabField: '',\n      facetConfig: {\n        'cl_hierarchyLevel.key': {\n          terms: {\n            field: 'cl_hierarchyLevel.key',\n          },\n          aggs: {\n            format: {\n              terms: {\n                field: 'format',\n              },\n            },\n          },\n        },\n        'cl_spatialRepresentationType.key': {\n          terms: {\n            field: 'cl_spatialRepresentationType.key',\n            size: 10,\n          },\n        },\n        availableInServices: {\n          filters: {\n            filters: {\n              availableInViewService: {\n                query_string: {\n                  query: '+linkProtocol:/OGC:WMS.*/',\n                },\n              },\n              availableInDownloadService: {\n                query_string: {\n                  query: '+linkProtocol:/OGC:WFS.*/',\n                },\n              },\n            },\n          },\n        },\n        'th_gemet_tree.default': {\n          terms: {\n            field: 'th_gemet_tree.default',\n            size: 100,\n            order: {\n              _key: 'asc',\n            },\n            include: '[^^]+^?[^^]+',\n          },\n        },\n        'th_httpinspireeceuropaeumetadatacodelistPriorityDatasetPriorityDataset_tree.default': {\n          terms: {\n            field:\n              'th_httpinspireeceuropaeumetadatacodelistPriorityDatasetPriorityDataset_tree.default',\n            size: 100,\n            order: {\n              _key: 'asc',\n            },\n          },\n        },\n        'tag.default': {\n          terms: {\n            field: 'tag.default',\n            include: '.*',\n            size: 10,\n          },\n        },\n        'th_regions_tree.default': {\n          terms: {\n            field: 'th_regions_tree.default',\n            size: 100,\n            order: {\n              _key: 'asc',\n            },\n          },\n        },\n        resolutionScaleDenominator: {\n          collapsed: true,\n          histogram: {\n            field: 'resolutionScaleDenominator',\n            interval: 10000,\n            keyed: true,\n            min_doc_count: 1,\n          },\n        },\n        creationYearForResource: {\n          collapsed: true,\n          histogram: {\n            field: 'creationYearForResource',\n            interval: 5,\n            keyed: true,\n            min_doc_count: 1,\n          },\n        },\n        OrgForResource: {\n          terms: {\n            field: 'OrgForResource',\n            size: 15,\n          },\n        },\n        'cl_maintenanceAndUpdateFrequency.key': {\n          collapsed: true,\n          terms: {\n            field: 'cl_maintenanceAndUpdateFrequency.key',\n            size: 10,\n          },\n        },\n        'cl_status.key': {\n          terms: {\n            field: 'cl_status.key',\n            size: 10,\n          },\n        },\n        dateStamp: {\n          userHasRole: 'isReviewerOrMore',\n          auto_date_histogram: {\n            field: 'dateStamp',\n            buckets: 50,\n          },\n        },\n      },\n      filters: null,\n      sortbyValues: [\n        {\n          sortBy: 'relevance',\n          sortOrder: '',\n        },\n        {\n          sortBy: 'dateStamp',\n          sortOrder: 'desc',\n        },\n        {\n          sortBy: 'createDate',\n          sortOrder: 'desc',\n        },\n        {\n          sortBy: 'resourceTitleObject.default.keyword',\n          sortOrder: '',\n        },\n        {\n          sortBy: 'rating',\n          sortOrder: 'desc',\n        },\n        {\n          sortBy: 'popularity',\n          sortOrder: 'desc',\n        },\n      ],\n      sortBy: 'relevance',\n      resultViewTpls: [\n        {\n          tplUrl:\n            '../../catalog/components/search/resultsview/partials/viewtemplates/grid.html',\n          tooltip: 'Grid',\n          icon: 'fa-th',\n        },\n        {\n          tplUrl:\n            '../../catalog/components/search/resultsview/partials/viewtemplates/list.html',\n          tooltip: 'List',\n          icon: 'fa-bars',\n        },\n      ],\n      resultTemplate:\n        '../../catalog/components/search/resultsview/partials/viewtemplates/grid.html',\n      formatter: {\n        list: [\n          {\n            label: 'defaultView',\n            url: '',\n          },\n          {\n            label: 'full',\n            url: '/formatters/xsl-view?root=div&view=advanced',\n          },\n        ],\n        defaultUrl: '',\n      },\n      downloadFormatter: [\n        {\n          label: 'exportMEF',\n          url: '/formatters/zip?withRelated=false',\n          class: 'fa-file-zip-o',\n        },\n        {\n          label: 'exportPDF',\n          url: '/formatters/xsl-view?output=pdf&language=${lang}',\n          class: 'fa-file-pdf-o',\n        },\n        {\n          label: 'exportXML',\n          url: '/formatters/xml',\n          class: 'fa-file-code-o',\n        },\n      ],\n      grid: {\n        related: ['parent', 'children', 'services', 'datasets'],\n      },\n      linkTypes: {\n        links: ['LINK', 'kml'],\n        downloads: ['DOWNLOAD'],\n        layers: ['OGC', 'ESRI:REST'],\n        maps: ['ows'],\n      },\n      isFilterTagsDisplayedInSearch: true,\n      usersearches: {\n        enabled: false,\n        includePortals: true,\n        displayFeaturedSearchesPanel: false,\n      },\n      savedSelection: {\n        enabled: false,\n      },\n    },\n    map: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/catalog.search#/map',\n      externalViewer: {\n        enabled: false,\n        enabledViewAction: false,\n        baseUrl: 'http://www.example.com/viewer',\n        urlTemplate:\n          'http://www.example.com/viewer?url=${service.url}&type=${service.type}&layer=${service.title}&lang=${iso2lang}&title=${md.defaultTitle}',\n        openNewWindow: false,\n        valuesSeparator: ',',\n      },\n      is3DModeAllowed: false,\n      isSaveMapInCatalogAllowed: true,\n      isExportMapAsImageEnabled: false,\n      storage: 'sessionStorage',\n      bingKey: '',\n      listOfServices: {\n        wms: [],\n        wmts: [],\n      },\n      projection: 'EPSG:3857',\n      projectionList: [\n        {\n          code: 'urn:ogc:def:crs:EPSG:6.6:4326',\n          label: 'WGS84 (EPSG:4326)',\n        },\n        {\n          code: 'EPSG:3857',\n          label: 'Google mercator (EPSG:3857)',\n        },\n      ],\n      switcherProjectionList: [\n        {\n          code: 'EPSG:3857',\n          label: 'Google mercator (EPSG:3857)',\n        },\n      ],\n      disabledTools: {\n        processes: false,\n        addLayers: false,\n        projectionSwitcher: false,\n        layers: false,\n        legend: false,\n        filter: false,\n        contexts: false,\n        print: false,\n        mInteraction: false,\n        graticule: false,\n        mousePosition: true,\n        syncAllLayers: false,\n        drawVector: false,\n      },\n      graticuleOgcService: {},\n      'map-viewer': {\n        context: '../../map/config-viewer.xml',\n        extent: [0, 0, 0, 0],\n        layers: [],\n      },\n      'map-search': {\n        context: '../../map/config-viewer.xml',\n        extent: [0, 0, 0, 0],\n        layers: [],\n      },\n      'map-editor': {\n        context: '',\n        extent: [0, 0, 0, 0],\n        layers: [\n          {\n            type: 'osm',\n          },\n        ],\n      },\n      autoFitOnLayer: false,\n    },\n    geocoder: {\n      enabled: true,\n      appUrl: 'https://secure.geonames.org/searchJSON',\n    },\n    recordview: {\n      enabled: true,\n      isSocialbarEnabled: true,\n    },\n    editor: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/catalog.edit',\n      isUserRecordsOnly: false,\n      minUserProfileToCreateTemplate: '',\n      isFilterTagsDisplayed: false,\n      fluidEditorLayout: true,\n      createPageTpl:\n        '../../catalog/templates/editor/new-metadata-horizontal.html',\n      editorIndentType: '',\n      allowRemoteRecordLink: true,\n      facetConfig: {\n        resourceType: {\n          terms: {\n            field: 'resourceType',\n            size: 20,\n          },\n        },\n        'cl_status.key': {\n          terms: {\n            field: 'cl_status.key',\n            size: 15,\n          },\n        },\n        sourceCatalogue: {\n          terms: {\n            field: 'sourceCatalogue',\n            size: 15,\n          },\n        },\n        isValid: {\n          terms: {\n            field: 'isValid',\n            size: 10,\n          },\n        },\n        isValidInspire: {\n          terms: {\n            field: 'isValidInspire',\n            size: 10,\n          },\n        },\n        groupOwner: {\n          terms: {\n            field: 'groupOwner',\n            size: 10,\n          },\n        },\n        recordOwner: {\n          terms: {\n            field: 'recordOwner',\n            size: 10,\n          },\n        },\n        groupPublished: {\n          terms: {\n            field: 'groupPublished',\n            size: 10,\n          },\n        },\n        documentStandard: {\n          terms: {\n            field: 'documentStandard',\n            size: 10,\n          },\n        },\n        isHarvested: {\n          terms: {\n            field: 'isHarvested',\n            size: 2,\n          },\n        },\n        isTemplate: {\n          terms: {\n            field: 'isTemplate',\n            size: 5,\n          },\n        },\n        isPublishedToAll: {\n          terms: {\n            field: 'isPublishedToAll',\n            size: 2,\n          },\n        },\n      },\n    },\n    admin: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/admin.console',\n    },\n    signin: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/catalog.signin',\n    },\n    signout: {\n      appUrl: '../../signout',\n    },\n    page: {\n      enabled: true,\n      appUrl: '../../{{node}}/{{lang}}/catalog.search#/page',\n    },\n  },\n}\n","export * from './bootstrap.service'\nexport * from './color.service'\nexport * from './log.service'\nexport * from './metadata-url.service'\n","import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogService {\n  constructor() {}\n  log(message: string, ...objects: any[]): void {\n    console.log.apply(this, [message, ...objects])\n  }\n  warn(message: string, ...objects: any[]): void {\n    console.warn.apply(this, [message, ...objects])\n  }\n  error(message: string, ...objects: any[]): void {\n    console.error.apply(this, [message, ...objects])\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { TranslateService } from '@ngx-translate/core'\nimport { LANG_2_TO_3_MAPPER } from '../i18n/i18n.constants'\n\nconst DEFAULT_API_PATH = '/geonetwork/srv/api'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetadataUrlService {\n  constructor(private translate: TranslateService) {}\n\n  getUrl(uuid: string, apiPath: string = DEFAULT_API_PATH) {\n    const prefix = `${apiPath}/../`\n    return `${prefix}${\n      LANG_2_TO_3_MAPPER[this.translate.currentLang]\n    }/catalog.search#/metadata/${uuid}`\n  }\n}\n","export * from './parse'\n","/*\n * Implement AngularJS $parse\n * delimiter is `^^^^` cause object properties can contain `.`\n */\nexport const PARSE_DELIMITER = '^^^'\n\nexport const parse = (path) => {\n  const fn = (obj) => {\n    const paths = path.split(PARSE_DELIMITER)\n    let current = obj\n\n    for (const token of paths) {\n      if (current[token] === undefined) {\n        return undefined\n      } else {\n        current = current[token]\n      }\n    }\n    return current\n  }\n  fn.assign = (obj, value) => {\n    const paths = path.split(PARSE_DELIMITER)\n    let current = obj\n\n    for (let i = 0; i < paths.length - 1; ++i) {\n      if (current[paths[i]] === undefined) {\n        current[paths[i]] = {}\n      }\n      current = current[paths[i]]\n    }\n    current[paths[paths.length - 1]] = value\n  }\n  return fn\n}\n","export * from './site.fixtures'\nexport * from './ui.fixtures'\n","export const SITE_FIXTURES = {\n  'system/platform/subVersion': 'alpha.2',\n  'system/platform/version': '4.0.0',\n  'system/site/name': 'GeoNetwork 4',\n  'system/site/organization': 'titellus',\n  'system/site/siteId': '04fe602b-fc46-4e6b-ac5a-138c6153eceb',\n}\n\nexport const SETTINGS_FIXTURES = {\n  'system/site/name': 'GeoNetwork 4',\n  'system/site/siteId': '04fe602b-fc46-4e6b-ac5a-138c6153eceb',\n  'system/site/organization': 'titellus',\n  'system/platform/version': '4.0.0',\n  'system/platform/subVersion': 'alpha.2',\n  'system/server/host': 'apps.titellus.net',\n  'system/server/protocol': 'https',\n  'system/server/port': 443,\n  'system/server/securePort': 443,\n  'system/server/timeZone': null,\n  'system/userSelfRegistration/enable': false,\n  'system/userFeedback/enable': false,\n  'system/localrating/enable': 'advanced',\n  'system/xlinkResolver/enable': false,\n  'system/xlinkResolver/localXlinkEnable': true,\n  'system/xlinkResolver/ignore':\n    'operatesOn,featureCatalogueCitation,Anchor,source',\n  'system/xlinkResolver/referencedDeletionAllowed': true,\n  'system/searchStats/enable': false,\n  'system/inspire/enable': true,\n  'system/harvester/enableEditing': false,\n  'system/harvester/disabledHarvesterTypes': null,\n  'system/metadata/allThesaurus': false,\n  'metadata/vcs/enable': false,\n  'system/metadata/validation/removeSchemaLocation': false,\n  'system/metadata/history/enabled': false,\n  'system/metadatacreate/generateUuid': true,\n  'system/metadataprivs/usergrouponly': false,\n  'system/inspire/remotevalidation/url':\n    'https://inspire.ec.europa.eu/validator/',\n  'region/getmap/background': 'osm',\n  'region/getmap/width': '500',\n  'region/getmap/summaryWidth': '500',\n  'region/getmap/mapproj': 'EPSG:3857',\n  'metadata/resourceIdentifierPrefix':\n    'http://localhost:8080/geonetwork/srv/resources',\n  'metadata/workflow/enable': false,\n  'metadata/workflow/draftWhenInGroup': null,\n  'metadata/workflow/allowSumitApproveInvalidMd': true,\n  'metadata/workflow/allowPublishNonApprovedMd': true,\n  'metadata/workflow/allowPublishInvalidMd': true,\n  'metadata/workflow/automaticUnpublishInvalidMd': false,\n  'metadata/workflow/forceValidationOnMdSave': false,\n  'metadata/backuparchive/enable': false,\n  'metadata/pdfReport/pdfName': 'metadata_{datetime}.pdf',\n  'system/ui/defaultView': 'default',\n  'system/userSelfRegistration/recaptcha/enable': false,\n  'system/userSelfRegistration/recaptcha/publickey': null,\n  'system/publication/doi/doienabled': false,\n  'system/publication/doi/doiurl': null,\n  'system/publication/doi/doiusername': null,\n  'system/publication/doi/doikey': null,\n  'system/publication/doi/doilandingpagetemplate':\n    'http://localhost:8080/geonetwork/srv/resources/records/{{uuid}}',\n  'system/feedback/mailServer/hostIsDefined': false,\n}\n","export const UI_FIXTURES = {\n  id: 'srv',\n  configuration:\n    '{\"langDetector\":{\"fromHtmlTag\":false,\"regexp\":\"^(?:/.+)?/.+/([a-z]{2,3})/.+\",\"default\":\"eng\"},\"nodeDetector\":{\"regexp\":\"^(?:/.+)?/(.+)/[a-z]{2,3}/.+\",\"default\":\"srv\"},\"serviceDetector\":{\"regexp\":\"^(?:/.+)?/.+/[a-z]{2,3}/(.+)\",\"default\":\"catalog.search\"},\"baseURLDetector\":{\"regexp\":\"^((?:/.+)?)+/.+/[a-z]{2,3}/.+\",\"default\":\"/geonetwork\"},\"mods\":{\"global\":{\"humanizeDates\":true},\"footer\":{\"enabled\":true,\"showSocialBarInFooter\":true},\"header\":{\"enabled\":true,\"languages\":{\"eng\":\"en\",\"dut\":\"nl\",\"fre\":\"fr\",\"ger\":\"de\",\"kor\":\"ko\",\"spa\":\"es\",\"cze\":\"cs\",\"cat\":\"ca\",\"fin\":\"fi\",\"ice\":\"is\",\"ita\":\"it\",\"por\":\"pt\",\"rus\":\"ru\",\"chi\":\"zh\",\"slo\":\"sk\"},\"isLogoInHeader\":false,\"logoInHeaderPosition\":\"left\",\"fluidHeaderLayout\":true,\"showGNName\":true,\"isHeaderFixed\":false},\"cookieWarning\":{\"enabled\":true,\"cookieWarningMoreInfoLink\":\"\",\"cookieWarningRejectLink\":\"\"},\"home\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/catalog.search#/home\",\"showSocialBarInFooter\":true,\"fluidLayout\":true,\"facetConfig\":{\"inspireThemeUri\":{\"terms\":{\"field\":\"inspireThemeUri\",\"size\":34}},\"topic_text\":{\"terms\":{\"field\":\"topic_text\",\"size\":20}},\"codelist_hierarchyLevel_text\":{\"terms\":{\"field\":\"codelist_hierarchyLevel_text\",\"size\":10}}}},\"search\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/catalog.search#/search\",\"hitsperpageValues\":[30,60,120],\"paginationInfo\":{\"hitsPerPage\":30},\"queryBase\":\"${any} resourceTitleObject.default:(${any})^2\",\"scoreConfig\":{\"boost\":\"5\",\"functions\":[{\"filter\":{\"exists\":{\"field\":\"parentUuid\"}},\"weight\":0.3},{\"filter\":{\"match\":{\"codelist_status\":\"obsolete\"}},\"weight\":0.3},{\"gauss\":{\"dateStamp\":{\"scale\":\"365d\",\"offset\":\"90d\",\"decay\":0.5}}}],\"score_mode\":\"multiply\"},\"autocompleteConfig\":{\"query\":{\"bool\":{\"must\":[{\"multi_match\":{\"query\":\"\",\"type\":\"bool_prefix\",\"fields\":[\"resourceTitleObject.*\",\"resourceAbstractObject.*\",\"tag\",\"resourceIdentifier\"]}}]}},\"_source\":[\"resourceTitleObject\"],\"from\":0,\"size\":20},\"moreLikeThisConfig\":{\"more_like_this\":{\"fields\":[\"resourceTitleObject.default\",\"resourceAbstractObject.default\",\"tag.raw\"],\"like\":null,\"min_term_freq\":1,\"max_query_terms\":12}},\"facetTabField\":\"\",\"facetConfig\":{\"codelist_hierarchyLevel_text\":{\"terms\":{\"field\":\"codelist_hierarchyLevel_text\"},\"aggs\":{\"format\":{\"terms\":{\"field\":\"format\"}}}},\"codelist_spatialRepresentationType\":{\"terms\":{\"field\":\"codelist_spatialRepresentationType\",\"size\":10}},\"availableInServices\":{\"filters\":{\"filters\":{\"availableInViewService\":{\"query_string\":{\"query\":\"+linkProtocol:/OGC:WMS.*/\"}},\"availableInDownloadService\":{\"query_string\":{\"query\":\"+linkProtocol:/OGC:WFS.*/\"}}}}},\"thesaurus_geonetworkthesaurusexternalthemegemet_tree\":{\"terms\":{\"field\":\"thesaurus_geonetworkthesaurusexternalthemegemet_tree\",\"size\":100,\"order\":{\"_key\":\"asc\"},\"include\":\"[^/]+/?[^/]+\"}},\"tag\":{\"terms\":{\"field\":\"tag\",\"include\":\".*\",\"size\":10}},\"thesaurus_geonetworkthesaurusexternalplaceregions_tree\":{\"terms\":{\"field\":\"thesaurus_geonetworkthesaurusexternalplaceregions_tree\",\"size\":100,\"order\":{\"_key\":\"asc\"}}},\"resolutionScaleDenominator\":{\"collapsed\":true,\"terms\":{\"field\":\"resolutionScaleDenominator\",\"size\":10,\"order\":{\"_key\":\"asc\"}}},\"creationYearForResource\":{\"collapsed\":true,\"terms\":{\"field\":\"creationYearForResource\",\"size\":10,\"order\":{\"_key\":\"desc\"}}},\"OrgForResource\":{\"terms\":{\"field\":\"OrgForResource\",\"size\":15}},\"codelist_maintenanceAndUpdateFrequency_text\":{\"collapsed\":true,\"terms\":{\"field\":\"codelist_maintenanceAndUpdateFrequency_text\",\"size\":10}},\"codelist_status_text\":{\"terms\":{\"field\":\"codelist_status_text\",\"size\":10}},\"dateStamp\":{\"userHasRole\":\"isReviewerOrMore\",\"auto_date_histogram\":{\"field\":\"dateStamp\",\"buckets\":50}}},\"filters\":null,\"sortbyValues\":[{\"sortBy\":\"relevance\",\"sortOrder\":\"\"},{\"sortBy\":\"dateStamp\",\"sortOrder\":\"desc\"},{\"sortBy\":\"createDate\",\"sortOrder\":\"desc\"},{\"sortBy\":\"resourceTitleObject.default.keyword\",\"sortOrder\":\"\"},{\"sortBy\":\"rating\",\"sortOrder\":\"desc\"},{\"sortBy\":\"popularity\",\"sortOrder\":\"desc\"}],\"sortBy\":\"relevance\",\"resultViewTpls\":[{\"tplUrl\":\"../../catalog/components/search/resultsview/partials/viewtemplates/grid.html\",\"tooltip\":\"Grid\",\"icon\":\"fa-th\"},{\"tplUrl\":\"../../catalog/components/search/resultsview/partials/viewtemplates/list.html\",\"tooltip\":\"List\",\"icon\":\"fa-bars\"}],\"resultTemplate\":\"../../catalog/components/search/resultsview/partials/viewtemplates/grid.html\",\"formatter\":{\"list\":[{\"label\":\"defaultView\",\"url\":\"\"},{\"label\":\"full\",\"url\":\"/formatters/xsl-view?root=div&view=advanced\"}],\"defaultUrl\":\"\"},\"downloadFormatter\":[{\"label\":\"exportMEF\",\"url\":\"/formatters/zip?withRelated=false\",\"class\":\"fa-file-zip-o\"},{\"label\":\"exportPDF\",\"url\":\"/formatters/xsl-view?output=pdf&language=${lang}\",\"class\":\"fa-file-pdf-o\"},{\"label\":\"exportXML\",\"url\":\"/formatters/xml\",\"class\":\"fa-file-code-o\"}],\"grid\":{\"related\":[\"parent\",\"children\",\"services\",\"datasets\"]},\"linkTypes\":{\"links\":[\"LINK\",\"kml\"],\"downloads\":[\"DOWNLOAD\"],\"layers\":[\"OGC\",\"ESRI:REST\"],\"maps\":[\"ows\"]},\"isFilterTagsDisplayedInSearch\":true,\"usersearches\":{\"enabled\":false,\"displayFeaturedSearchesPanel\":false},\"savedSelection\":{\"enabled\":false}},\"map\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/catalog.search#/map\",\"externalViewer\":{\"enabled\":false,\"enabledViewAction\":false,\"baseUrl\":\"http://www.example.com/viewer\",\"urlTemplate\":\"http://www.example.com/viewer?url=${service.url}&type=${service.type}&layer=${service.title}&lang=${iso2lang}&title=${md.defaultTitle}\",\"openNewWindow\":false,\"valuesSeparator\":\",\"},\"is3DModeAllowed\":false,\"isSaveMapInCatalogAllowed\":true,\"isExportMapAsImageEnabled\":false,\"storage\":\"sessionStorage\",\"bingKey\":\"\",\"listOfServices\":{\"wms\":[],\"wmts\":[]},\"projection\":\"EPSG:3857\",\"projectionList\":[{\"code\":\"urn:ogc:def:crs:EPSG:6.6:4326\",\"label\":\"WGS84 (EPSG:4326)\"},{\"code\":\"EPSG:3857\",\"label\":\"Google mercator (EPSG:3857)\"}],\"switcherProjectionList\":[{\"code\":\"EPSG:3857\",\"label\":\"Google mercator (EPSG:3857)\"}],\"disabledTools\":{\"processes\":false,\"addLayers\":false,\"projectionSwitcher\":false,\"layers\":false,\"legend\":false,\"filter\":false,\"contexts\":false,\"print\":false,\"mInteraction\":false,\"graticule\":false,\"mousePosition\":true,\"syncAllLayers\":false,\"drawVector\":false},\"graticuleOgcService\":{},\"map-viewer\":{\"context\":\"../../map/config-viewer.xml\",\"extent\":[0,0,0,0],\"layers\":[]},\"map-search\":{\"context\":\"../../map/config-viewer.xml\",\"extent\":[0,0,0,0],\"layers\":[]},\"map-editor\":{\"context\":\"\",\"extent\":[0,0,0,0],\"layers\":[{\"type\":\"osm\"}]},\"autoFitOnLayer\":false},\"geocoder\":{\"enabled\":true,\"appUrl\":\"https://secure.geonames.org/searchJSON\"},\"recordview\":{\"enabled\":true,\"isSocialbarEnabled\":true},\"editor\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/catalog.edit\",\"isUserRecordsOnly\":false,\"minUserProfileToCreateTemplate\":\"\",\"isFilterTagsDisplayed\":false,\"fluidEditorLayout\":true,\"createPageTpl\":\"../../catalog/templates/editor/new-metadata-horizontal.html\",\"editorIndentType\":\"\",\"allowRemoteRecordLink\":true,\"facetConfig\":{\"resourceType\":{\"terms\":{\"field\":\"resourceType\",\"size\":20}},\"codelist_status_text\":{\"terms\":{\"field\":\"codelist_status_text\",\"size\":15}},\"sourceCatalogue\":{\"terms\":{\"field\":\"sourceCatalogue\",\"size\":15}},\"isValid\":{\"terms\":{\"field\":\"isValid\",\"size\":10}},\"isValidInspire\":{\"terms\":{\"field\":\"isValidInspire\",\"size\":10}},\"groupOwner\":{\"terms\":{\"field\":\"groupOwner\",\"size\":10}},\"recordOwner\":{\"terms\":{\"field\":\"recordOwner\",\"size\":10}},\"groupPublished\":{\"terms\":{\"field\":\"groupPublished\",\"size\":10}},\"documentStandard\":{\"terms\":{\"field\":\"documentStandard\",\"size\":10}},\"isHarvested\":{\"terms\":{\"field\":\"isHarvested\",\"size\":2}},\"isTemplate\":{\"terms\":{\"field\":\"isTemplate\",\"size\":5}},\"isPublishedToAll\":{\"terms\":{\"field\":\"isPublishedToAll\",\"size\":2}}}},\"admin\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/admin.console\"},\"signin\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/catalog.signin\"},\"signout\":{\"appUrl\":\"../../signout\"},\"page\":{\"enabled\":true,\"appUrl\":\"../../{{node}}/{{lang}}/catalog.search#/page\"}}}',\n}\n","import { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: [],\n})\nexport class GnApiModule {}\n","/*\n * Public API Surface of gn-api\n */\n\nexport * from './gn-api.module'\nexport * from './openapi/'\nexport * from './fixtures/'\n","import {\n  NgModule,\n  ModuleWithProviders,\n  SkipSelf,\n  Optional,\n} from '@angular/core'\nimport { Configuration } from './configuration'\nimport { HttpClient } from '@angular/common/http'\n\nimport { CustomstyleApiService } from './api/customstyle.api.service'\nimport { GroupsApiService } from './api/groups.api.service'\nimport { HarvestersApiService } from './api/harvesters.api.service'\nimport { IdentifiersApiService } from './api/identifiers.api.service'\nimport { LanguagesApiService } from './api/languages.api.service'\nimport { LinksApiService } from './api/links.api.service'\nimport { LogosApiService } from './api/logos.api.service'\nimport { MapserversApiService } from './api/mapservers.api.service'\nimport { MeApiService } from './api/me.api.service'\nimport { OperationsApiService } from './api/operations.api.service'\nimport { PagesApiService } from './api/pages.api.service'\nimport { ProcessesApiService } from './api/processes.api.service'\nimport { RecordsApiService } from './api/records.api.service'\nimport { RegionsApiService } from './api/regions.api.service'\nimport { RegistriesApiService } from './api/registries.api.service'\nimport { RelatedApiService } from './api/related.api.service'\nimport { SearchApiService } from './api/search.api.service'\nimport { SelectionsApiService } from './api/selections.api.service'\nimport { SiteApiService } from './api/site.api.service'\nimport { SourcesApiService } from './api/sources.api.service'\nimport { StandardsApiService } from './api/standards.api.service'\nimport { StatusApiService } from './api/status.api.service'\nimport { TagsApiService } from './api/tags.api.service'\nimport { ToolsApiService } from './api/tools.api.service'\nimport { UiApiService } from './api/ui.api.service'\nimport { UserfeedbackApiService } from './api/userfeedback.api.service'\nimport { UsersApiService } from './api/users.api.service'\nimport { UsersearchesApiService } from './api/usersearches.api.service'\nimport { UserselectionsApiService } from './api/userselections.api.service'\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: [],\n  providers: [],\n})\nexport class ApiModule {\n  public static forRoot(\n    configurationFactory: () => Configuration\n  ): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [{ provide: Configuration, useFactory: configurationFactory }],\n    }\n  }\n\n  constructor(\n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'ApiModule is already loaded. Import in your base AppModule only.'\n      )\n    }\n    if (!http) {\n      throw new Error(\n        'You need to import the HttpClientModule in your AppModule! \\n' +\n          'See also https://github.com/angular/angular/issues/20575'\n      )\n    }\n  }\n}\n","export * from './customstyle.api.service'\nimport { CustomstyleApiService } from './customstyle.api.service'\nexport * from './groups.api.service'\nimport { GroupsApiService } from './groups.api.service'\nexport * from './harvesters.api.service'\nimport { HarvestersApiService } from './harvesters.api.service'\nexport * from './identifiers.api.service'\nimport { IdentifiersApiService } from './identifiers.api.service'\nexport * from './languages.api.service'\nimport { LanguagesApiService } from './languages.api.service'\nexport * from './links.api.service'\nimport { LinksApiService } from './links.api.service'\nexport * from './logos.api.service'\nimport { LogosApiService } from './logos.api.service'\nexport * from './mapservers.api.service'\nimport { MapserversApiService } from './mapservers.api.service'\nexport * from './me.api.service'\nimport { MeApiService } from './me.api.service'\nexport * from './operations.api.service'\nimport { OperationsApiService } from './operations.api.service'\nexport * from './pages.api.service'\nimport { PagesApiService } from './pages.api.service'\nexport * from './processes.api.service'\nimport { ProcessesApiService } from './processes.api.service'\nexport * from './records.api.service'\nimport { RecordsApiService } from './records.api.service'\nexport * from './regions.api.service'\nimport { RegionsApiService } from './regions.api.service'\nexport * from './registries.api.service'\nimport { RegistriesApiService } from './registries.api.service'\nexport * from './related.api.service'\nimport { RelatedApiService } from './related.api.service'\nexport * from './search.api.service'\nimport { SearchApiService } from './search.api.service'\nexport * from './selections.api.service'\nimport { SelectionsApiService } from './selections.api.service'\nexport * from './site.api.service'\nimport { SiteApiService } from './site.api.service'\nexport * from './sources.api.service'\nimport { SourcesApiService } from './sources.api.service'\nexport * from './standards.api.service'\nimport { StandardsApiService } from './standards.api.service'\nexport * from './status.api.service'\nimport { StatusApiService } from './status.api.service'\nexport * from './tags.api.service'\nimport { TagsApiService } from './tags.api.service'\nexport * from './tools.api.service'\nimport { ToolsApiService } from './tools.api.service'\nexport * from './ui.api.service'\nimport { UiApiService } from './ui.api.service'\nexport * from './userfeedback.api.service'\nimport { UserfeedbackApiService } from './userfeedback.api.service'\nexport * from './users.api.service'\nimport { UsersApiService } from './users.api.service'\nexport * from './usersearches.api.service'\nimport { UsersearchesApiService } from './usersearches.api.service'\nexport * from './userselections.api.service'\nimport { UserselectionsApiService } from './userselections.api.service'\nexport const APIS = [\n  CustomstyleApiService,\n  GroupsApiService,\n  HarvestersApiService,\n  IdentifiersApiService,\n  LanguagesApiService,\n  LinksApiService,\n  LogosApiService,\n  MapserversApiService,\n  MeApiService,\n  OperationsApiService,\n  PagesApiService,\n  ProcessesApiService,\n  RecordsApiService,\n  RegionsApiService,\n  RegistriesApiService,\n  RelatedApiService,\n  SearchApiService,\n  SelectionsApiService,\n  SiteApiService,\n  SourcesApiService,\n  StandardsApiService,\n  StatusApiService,\n  TagsApiService,\n  ToolsApiService,\n  UiApiService,\n  UserfeedbackApiService,\n  UsersApiService,\n  UsersearchesApiService,\n  UserselectionsApiService,\n]\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomstyleApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get CssStyleSettings\n   * This returns a map with all Less variables.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCssStyle(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public getCssStyle(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public getCssStyle(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public getCssStyle(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/customstyle`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Saves custom style variables.\n   * Saves custom style variables.\n   * @param body\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public saveCssStyle(\n    body: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public saveCssStyle(\n    body: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public saveCssStyle(\n    body: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public saveCssStyle(\n    body: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (body === null || body === undefined) {\n      throw new Error(\n        'Required parameter body was null or undefined when calling saveCssStyle.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/customstyle`,\n      body,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { GroupApiModel } from '../model/models'\nimport { UserApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Add a group\n   * Return the identifier of the group created.\n   * @param groupApiModel Group details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addGroup(\n    groupApiModel: GroupApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<number>\n  public addGroup(\n    groupApiModel: GroupApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<number>>\n  public addGroup(\n    groupApiModel: GroupApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<number>>\n  public addGroup(\n    groupApiModel: GroupApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (groupApiModel === null || groupApiModel === undefined) {\n      throw new Error(\n        'Required parameter groupApiModel was null or undefined when calling addGroup.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<number>(\n      `${this.configuration.basePath}/groups`,\n      groupApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove a group\n   * Remove a group by first removing sharing settings, link to users and finally reindex all affected records.\n   * @param groupIdentifier Group identifier.\n   * @param force Force removal even if records are assigned to that group.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteGroup(\n    groupIdentifier: number,\n    force?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteGroup(\n    groupIdentifier: number,\n    force?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteGroup(\n    groupIdentifier: number,\n    force?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteGroup(\n    groupIdentifier: number,\n    force?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (groupIdentifier === null || groupIdentifier === undefined) {\n      throw new Error(\n        'Required parameter groupIdentifier was null or undefined when calling deleteGroup.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (force !== undefined && force !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>force,\n        'force'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/groups/${encodeURIComponent(\n        String(groupIdentifier)\n      )}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get group\n   * Return the requested group details.\n   * @param groupIdentifier Group identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getGroup(\n    groupIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getGroup(\n    groupIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getGroup(\n    groupIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getGroup(\n    groupIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (groupIdentifier === null || groupIdentifier === undefined) {\n      throw new Error(\n        'Required parameter groupIdentifier was null or undefined when calling getGroup.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/groups/${encodeURIComponent(\n        String(groupIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get group users\n   * @param groupIdentifier Group identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getGroupUsers(\n    groupIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserApiModel>>\n  public getGroupUsers(\n    groupIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserApiModel>>>\n  public getGroupUsers(\n    groupIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserApiModel>>>\n  public getGroupUsers(\n    groupIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (groupIdentifier === null || groupIdentifier === undefined) {\n      throw new Error(\n        'Required parameter groupIdentifier was null or undefined when calling getGroupUsers.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserApiModel>>(\n      `${this.configuration.basePath}/groups/${encodeURIComponent(\n        String(groupIdentifier)\n      )}/users`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get groups\n   * The catalog contains one or more groups. By default, there is 3 reserved groups (Internet, Intranet, Guest) and a sample group.&lt;br/&gt;This service returns all catalog groups when not authenticated or when current is user is an administrator. The list can contains or not reserved groups depending on the parameters.&lt;br/&gt;When authenticated, return user groups optionally filtered on a specific user profile.\n   * @param withReservedGroup Including Internet, Intranet, Guest groups or not\n   * @param profile For a specific profile\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getGroups(\n    withReservedGroup?: boolean,\n    profile?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<GroupApiModel>>\n  public getGroups(\n    withReservedGroup?: boolean,\n    profile?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<GroupApiModel>>>\n  public getGroups(\n    withReservedGroup?: boolean,\n    profile?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<GroupApiModel>>>\n  public getGroups(\n    withReservedGroup?: boolean,\n    profile?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (withReservedGroup !== undefined && withReservedGroup !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withReservedGroup,\n        'withReservedGroup'\n      )\n    }\n    if (profile !== undefined && profile !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>profile,\n        'profile'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<GroupApiModel>>(\n      `${this.configuration.basePath}/groups`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update a group\n   * @param groupIdentifier Group identifier\n   * @param groupApiModel Group details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateGroup(\n    groupIdentifier: number,\n    groupApiModel: GroupApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public updateGroup(\n    groupIdentifier: number,\n    groupApiModel: GroupApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public updateGroup(\n    groupIdentifier: number,\n    groupApiModel: GroupApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public updateGroup(\n    groupIdentifier: number,\n    groupApiModel: GroupApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (groupIdentifier === null || groupIdentifier === undefined) {\n      throw new Error(\n        'Required parameter groupIdentifier was null or undefined when calling updateGroup.'\n      )\n    }\n    if (groupApiModel === null || groupApiModel === undefined) {\n      throw new Error(\n        'Required parameter groupApiModel was null or undefined when calling updateGroup.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/groups/${encodeURIComponent(\n        String(groupIdentifier)\n      )}`,\n      groupApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HarvestersApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Assign harvester records to a new source\n   * @param harvesterUuid The harvester UUID\n   * @param source The target source UUID\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public assignHarvestedRecordToSource(\n    harvesterUuid: string,\n    source: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public assignHarvestedRecordToSource(\n    harvesterUuid: string,\n    source: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public assignHarvestedRecordToSource(\n    harvesterUuid: string,\n    source: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public assignHarvestedRecordToSource(\n    harvesterUuid: string,\n    source: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (harvesterUuid === null || harvesterUuid === undefined) {\n      throw new Error(\n        'Required parameter harvesterUuid was null or undefined when calling assignHarvestedRecordToSource.'\n      )\n    }\n    if (source === null || source === undefined) {\n      throw new Error(\n        'Required parameter source was null or undefined when calling assignHarvestedRecordToSource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (source !== undefined && source !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>source,\n        'source'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/harvesters/${encodeURIComponent(\n        String(harvesterUuid)\n      )}/assign`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { MetadataIdentifierTemplateApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IdentifiersApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Add an identifier template\n   * @param metadataIdentifierTemplateApiModel Identifier template details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addIdentifier(\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<number>\n  public addIdentifier(\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<number>>\n  public addIdentifier(\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<number>>\n  public addIdentifier(\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (\n      metadataIdentifierTemplateApiModel === null ||\n      metadataIdentifierTemplateApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter metadataIdentifierTemplateApiModel was null or undefined when calling addIdentifier.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<number>(\n      `${this.configuration.basePath}/identifiers`,\n      metadataIdentifierTemplateApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get identifier templates\n   * Identifier templates are used to create record UUIDs havind a particular structure. The template will be used when user creates a new record. The template identifier to use is defined in the administration &gt; settings.\n   * @param userDefinedOnly Only user defined ones\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getIdentifiers(\n    userDefinedOnly?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataIdentifierTemplateApiModel>>\n  public getIdentifiers(\n    userDefinedOnly?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataIdentifierTemplateApiModel>>>\n  public getIdentifiers(\n    userDefinedOnly?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataIdentifierTemplateApiModel>>>\n  public getIdentifiers(\n    userDefinedOnly?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (userDefinedOnly !== undefined && userDefinedOnly !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>userDefinedOnly,\n        'userDefinedOnly'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataIdentifierTemplateApiModel>>(\n      `${this.configuration.basePath}/identifiers`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update an identifier template\n   * @param identifier Identifier template identifier\n   * @param metadataIdentifierTemplateApiModel Identifier template details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateIdentifier(\n    identifier: number,\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public updateIdentifier(\n    identifier: number,\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public updateIdentifier(\n    identifier: number,\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public updateIdentifier(\n    identifier: number,\n    metadataIdentifierTemplateApiModel: MetadataIdentifierTemplateApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (identifier === null || identifier === undefined) {\n      throw new Error(\n        'Required parameter identifier was null or undefined when calling updateIdentifier.'\n      )\n    }\n    if (\n      metadataIdentifierTemplateApiModel === null ||\n      metadataIdentifierTemplateApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter metadataIdentifierTemplateApiModel was null or undefined when calling updateIdentifier.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/identifiers/${encodeURIComponent(\n        String(identifier)\n      )}`,\n      metadataIdentifierTemplateApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { IsoLanguageApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LanguagesApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get ISO languages\n   * ISO languages provides a list of all languages (eg. used for autocompletion in metadata editor).\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getIsoLanguages(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<IsoLanguageApiModel>>\n  public getIsoLanguages(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<IsoLanguageApiModel>>>\n  public getIsoLanguages(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<IsoLanguageApiModel>>>\n  public getIsoLanguages(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<IsoLanguageApiModel>>(\n      `${this.configuration.basePath}/isolanguages`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { PageLinkApiModel } from '../model/models'\nimport { SimpleMetadataProcessingReportApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LinksApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Analyze records links\n   * One of uuids or bucket parameter is required if not an Administrator. Only records that you can edit will be validated.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param removeFirst Only allowed if Administrator.\n   * @param analyze\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public analyzeRecordLinks(\n    uuids?: Array<string>,\n    bucket?: string,\n    removeFirst?: boolean,\n    analyze?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public analyzeRecordLinks(\n    uuids?: Array<string>,\n    bucket?: string,\n    removeFirst?: boolean,\n    analyze?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public analyzeRecordLinks(\n    uuids?: Array<string>,\n    bucket?: string,\n    removeFirst?: boolean,\n    analyze?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public analyzeRecordLinks(\n    uuids?: Array<string>,\n    bucket?: string,\n    removeFirst?: boolean,\n    analyze?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (removeFirst !== undefined && removeFirst !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>removeFirst,\n        'removeFirst'\n      )\n    }\n    if (analyze !== undefined && analyze !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>analyze,\n        'analyze'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/links`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record links\n   * @param filter Filter, e.g. \\&quot;{url: \\&#39;png\\&#39;, lastState: \\&#39;ko\\&#39;, records: \\&#39;e421\\&#39;, groupId: 12}\\&quot;, lastState being \\&#39;ok\\&#39;/\\&#39;ko\\&#39;/\\&#39;unknown\\&#39;\n   * @param groupIdFilter Optional, filter links to records published in that group.\n   * @param groupOwnerIdFilter Optional, filter links to records created in that group.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordLinks(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<PageLinkApiModel>\n  public getRecordLinks(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<PageLinkApiModel>>\n  public getRecordLinks(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<PageLinkApiModel>>\n  public getRecordLinks(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (filter !== undefined && filter !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>filter,\n        'filter'\n      )\n    }\n    if (groupIdFilter) {\n      groupIdFilter.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groupIdFilter'\n        )\n      })\n    }\n    if (groupOwnerIdFilter) {\n      groupOwnerIdFilter.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groupOwnerIdFilter'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<PageLinkApiModel>(\n      `${this.configuration.basePath}/records/links`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record links as CSV\n   * @param filter Filter, e.g. \\&quot;{url: \\&#39;png\\&#39;, lastState: \\&#39;ko\\&#39;, records: \\&#39;e421\\&#39;, groupId: 12}\\&quot;, lastState being \\&#39;ok\\&#39;/\\&#39;ko\\&#39;/\\&#39;unknown\\&#39;\n   * @param groupIdFilter Optional, filter links to records published in that group.\n   * @param groupOwnerIdFilter Optional, filter links to records created in that group.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordLinksAsCsv(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getRecordLinksAsCsv(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getRecordLinksAsCsv(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getRecordLinksAsCsv(\n    filter?: object,\n    groupIdFilter?: Array<number>,\n    groupOwnerIdFilter?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (filter !== undefined && filter !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>filter,\n        'filter'\n      )\n    }\n    if (groupIdFilter) {\n      groupIdFilter.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groupIdFilter'\n        )\n      })\n    }\n    if (groupOwnerIdFilter) {\n      groupOwnerIdFilter.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groupOwnerIdFilter'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/links/csv`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove all links and status history\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public purgeAll(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public purgeAll(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public purgeAll(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public purgeAll(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<string>(\n      `${this.configuration.basePath}/records/links`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogosApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Add a logo\n   * @param file The logo image to upload\n   * @param overwrite Overwrite if exists\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addLogo(\n    file: Array<Blob>,\n    overwrite?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public addLogo(\n    file: Array<Blob>,\n    overwrite?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public addLogo(\n    file: Array<Blob>,\n    overwrite?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public addLogo(\n    file: Array<Blob>,\n    overwrite?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (file === null || file === undefined) {\n      throw new Error(\n        'Required parameter file was null or undefined when calling addLogo.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (file) {\n      file.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'file'\n        )\n      })\n    }\n    if (overwrite !== undefined && overwrite !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>overwrite,\n        'overwrite'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/logos`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove a logo\n   * @param file The logo filename to delete\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteLogo(\n    file: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteLogo(\n    file: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteLogo(\n    file: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteLogo(\n    file: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (file === null || file === undefined) {\n      throw new Error(\n        'Required parameter file was null or undefined when calling deleteLogo.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/logos/${encodeURIComponent(\n        String(file)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get all logos\n   * Logos are used for the catalog, the groups logos, and harvester icons. Logos are stored in the data directory in &lt;dataDirectory&gt;/resources/images/harvesting.&lt;br/&gt; Records are attached to a source. A source can be the local catalog or a harvester node. When a source is created, its logo is located in the images/logos folder with the source UUID as filename. For some sources the logo can be automatically retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo is usually manually defined when configuring the harvester.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getLogos(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Set<string>>\n  public getLogos(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Set<string>>>\n  public getLogos(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Set<string>>>\n  public getLogos(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Set<string>>(\n      `${this.configuration.basePath}/logos`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { AnonymousMapserverApiModel } from '../model/models'\nimport { MapServerApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MapserversApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Add a mapserver\n   * Return the id of the newly created mapserver.\n   * @param mapServerApiModel Mapserver details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addMapserver(\n    mapServerApiModel: MapServerApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<number>\n  public addMapserver(\n    mapServerApiModel: MapServerApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<number>>\n  public addMapserver(\n    mapServerApiModel: MapServerApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<number>>\n  public addMapserver(\n    mapServerApiModel: MapServerApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (mapServerApiModel === null || mapServerApiModel === undefined) {\n      throw new Error(\n        'Required parameter mapServerApiModel was null or undefined when calling addMapserver.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<number>(\n      `${this.configuration.basePath}/mapservers`,\n      mapServerApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove a metadata mapserver resource\n   * @param mapserverId Mapserver identifier\n   * @param metadataUuid Record UUID.\n   * @param resource Resource name (could be a file or a db connection)\n   * @param metadataTitle Metadata title\n   * @param metadataAbstract Metadata abstract\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any>\n  public deleteMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<any>>\n  public deleteMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<any>>\n  public deleteMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (mapserverId === null || mapserverId === undefined) {\n      throw new Error(\n        'Required parameter mapserverId was null or undefined when calling deleteMapserverResource.'\n      )\n    }\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling deleteMapserverResource.'\n      )\n    }\n    if (resource === null || resource === undefined) {\n      throw new Error(\n        'Required parameter resource was null or undefined when calling deleteMapserverResource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (resource !== undefined && resource !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>resource,\n        'resource'\n      )\n    }\n    if (metadataTitle !== undefined && metadataTitle !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataTitle,\n        'metadataTitle'\n      )\n    }\n    if (metadataAbstract !== undefined && metadataAbstract !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataAbstract,\n        'metadataAbstract'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/mapservers/${encodeURIComponent(\n        String(mapserverId)\n      )}/records/${encodeURIComponent(String(metadataUuid))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a mapserver\n   * @param mapserverId Mapserver identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getMapserver(\n    mapserverId: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getMapserver(\n    mapserverId: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getMapserver(\n    mapserverId: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getMapserver(\n    mapserverId: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (mapserverId === null || mapserverId === undefined) {\n      throw new Error(\n        'Required parameter mapserverId was null or undefined when calling getMapserver.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/mapservers/${encodeURIComponent(\n        String(mapserverId)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Check metadata mapserver resource is published\n   * @param mapserverId Mapserver identifier\n   * @param metadataUuid Record UUID.\n   * @param resource Resource name (could be a file or a db connection)\n   * @param metadataTitle Metadata title\n   * @param metadataAbstract Metadata abstract\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any>\n  public getMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<any>>\n  public getMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<any>>\n  public getMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (mapserverId === null || mapserverId === undefined) {\n      throw new Error(\n        'Required parameter mapserverId was null or undefined when calling getMapserverResource.'\n      )\n    }\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getMapserverResource.'\n      )\n    }\n    if (resource === null || resource === undefined) {\n      throw new Error(\n        'Required parameter resource was null or undefined when calling getMapserverResource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (resource !== undefined && resource !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>resource,\n        'resource'\n      )\n    }\n    if (metadataTitle !== undefined && metadataTitle !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataTitle,\n        'metadataTitle'\n      )\n    }\n    if (metadataAbstract !== undefined && metadataAbstract !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataAbstract,\n        'metadataAbstract'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/mapservers/${encodeURIComponent(\n        String(mapserverId)\n      )}/records/${encodeURIComponent(String(metadataUuid))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get mapservers\n   * Mapservers are used by the catalog to publish record attachments (eg. ZIP file with shape) or record associated resources (eg. database table, file on the local network) in a remote mapserver like GeoServer or MapServer. The catalog communicate with the mapserver using GeoServer REST API.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getMapservers(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getMapservers(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getMapservers(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getMapservers(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/mapservers`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Publish a metadata resource in a mapserver\n   * @param mapserverId Mapserver identifier\n   * @param metadataUuid Record UUID.\n   * @param resource Resource name (could be a file or a db connection)\n   * @param metadataTitle Metadata title\n   * @param metadataAbstract Metadata abstract\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public publishMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any>\n  public publishMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<any>>\n  public publishMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<any>>\n  public publishMapserverResource(\n    mapserverId: string,\n    metadataUuid: string,\n    resource: string,\n    metadataTitle?: string,\n    metadataAbstract?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (mapserverId === null || mapserverId === undefined) {\n      throw new Error(\n        'Required parameter mapserverId was null or undefined when calling publishMapserverResource.'\n      )\n    }\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling publishMapserverResource.'\n      )\n    }\n    if (resource === null || resource === undefined) {\n      throw new Error(\n        'Required parameter resource was null or undefined when calling publishMapserverResource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (resource !== undefined && resource !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>resource,\n        'resource'\n      )\n    }\n    if (metadataTitle !== undefined && metadataTitle !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataTitle,\n        'metadataTitle'\n      )\n    }\n    if (metadataAbstract !== undefined && metadataAbstract !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataAbstract,\n        'metadataAbstract'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/mapservers/${encodeURIComponent(\n        String(mapserverId)\n      )}/records/${encodeURIComponent(String(metadataUuid))}`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update a mapserver\n   * @param mapserverId Mapserver identifier\n   * @param mapServerApiModel Mapserver details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateMapserver(\n    mapserverId: number,\n    mapServerApiModel: MapServerApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public updateMapserver(\n    mapserverId: number,\n    mapServerApiModel: MapServerApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public updateMapserver(\n    mapserverId: number,\n    mapServerApiModel: MapServerApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public updateMapserver(\n    mapserverId: number,\n    mapServerApiModel: MapServerApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (mapserverId === null || mapserverId === undefined) {\n      throw new Error(\n        'Required parameter mapserverId was null or undefined when calling updateMapserver.'\n      )\n    }\n    if (mapServerApiModel === null || mapServerApiModel === undefined) {\n      throw new Error(\n        'Required parameter mapServerApiModel was null or undefined when calling updateMapserver.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/mapservers/${encodeURIComponent(\n        String(mapserverId)\n      )}`,\n      mapServerApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { MeResponseApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MeApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get information about me\n   * If not authenticated, return status 204 (NO_CONTENT), else return basic user information. This operation is usually used to know if current user is authenticated or not.It returns also info about groups and profiles.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getMe(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MeResponseApiModel>\n  public getMe(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MeResponseApiModel>>\n  public getMe(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MeResponseApiModel>>\n  public getMe(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<MeResponseApiModel>(\n      `${this.configuration.basePath}/me`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { OperationApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OperationsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get operations\n   * Return the list of operations. Operations are used to define authorization per group. Extending the list of default operations (ie. view, dynamic, download, editing, notify, featured) might be feasible but is experimental.&lt;br/&gt; Featured is not really used anymore (was used in past version for home page highlights).\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getOperations(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<OperationApiModel>>\n  public getOperations(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<OperationApiModel>>>\n  public getOperations(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<OperationApiModel>>>\n  public getOperations(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<OperationApiModel>>(\n      `${this.configuration.basePath}/operations`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { PageJSONWrapperApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PagesApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Return the page object details except the content\n   * &lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param language\n   * @param pageId\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getPage(\n    language: string,\n    pageId: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<PageJSONWrapperApiModel>\n  public getPage(\n    language: string,\n    pageId: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<PageJSONWrapperApiModel>>\n  public getPage(\n    language: string,\n    pageId: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<PageJSONWrapperApiModel>>\n  public getPage(\n    language: string,\n    pageId: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (language === null || language === undefined) {\n      throw new Error(\n        'Required parameter language was null or undefined when calling getPage.'\n      )\n    }\n    if (pageId === null || pageId === undefined) {\n      throw new Error(\n        'Required parameter pageId was null or undefined when calling getPage.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<PageJSONWrapperApiModel>(\n      `${this.configuration.basePath}/pages/${encodeURIComponent(\n        String(language)\n      )}/${encodeURIComponent(String(pageId))}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Return the static html content identified by pageId\n   * &lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param language\n   * @param pageId\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getPageContent(\n    language: string,\n    pageId: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'application/json' | 'text/plain;charset&#x3D;UTF-8'\n    }\n  ): Observable<string>\n  public getPageContent(\n    language: string,\n    pageId: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'application/json' | 'text/plain;charset&#x3D;UTF-8'\n    }\n  ): Observable<HttpResponse<string>>\n  public getPageContent(\n    language: string,\n    pageId: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'application/json' | 'text/plain;charset&#x3D;UTF-8'\n    }\n  ): Observable<HttpEvent<string>>\n  public getPageContent(\n    language: string,\n    pageId: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'application/json' | 'text/plain;charset&#x3D;UTF-8'\n    }\n  ): Observable<any> {\n    if (language === null || language === undefined) {\n      throw new Error(\n        'Required parameter language was null or undefined when calling getPageContent.'\n      )\n    }\n    if (pageId === null || pageId === undefined) {\n      throw new Error(\n        'Required parameter pageId was null or undefined when calling getPageContent.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'text/plain;charset=UTF-8',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/pages/${encodeURIComponent(\n        String(language)\n      )}/${encodeURIComponent(String(pageId))}/content`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * List all pages according to the filters\n   * &lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param language\n   * @param section\n   * @param format\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public listPages(\n    language?: string,\n    section?:\n      | 'ALL'\n      | 'TOP'\n      | 'FOOTER'\n      | 'MENU'\n      | 'SUBMENU'\n      | 'CUSTOM_MENU1'\n      | 'CUSTOM_MENU2'\n      | 'CUSTOM_MENU3'\n      | 'DRAFT',\n    format?: 'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public listPages(\n    language?: string,\n    section?:\n      | 'ALL'\n      | 'TOP'\n      | 'FOOTER'\n      | 'MENU'\n      | 'SUBMENU'\n      | 'CUSTOM_MENU1'\n      | 'CUSTOM_MENU2'\n      | 'CUSTOM_MENU3'\n      | 'DRAFT',\n    format?: 'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public listPages(\n    language?: string,\n    section?:\n      | 'ALL'\n      | 'TOP'\n      | 'FOOTER'\n      | 'MENU'\n      | 'SUBMENU'\n      | 'CUSTOM_MENU1'\n      | 'CUSTOM_MENU2'\n      | 'CUSTOM_MENU3'\n      | 'DRAFT',\n    format?: 'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public listPages(\n    language?: string,\n    section?:\n      | 'ALL'\n      | 'TOP'\n      | 'FOOTER'\n      | 'MENU'\n      | 'SUBMENU'\n      | 'CUSTOM_MENU1'\n      | 'CUSTOM_MENU2'\n      | 'CUSTOM_MENU3'\n      | 'DRAFT',\n    format?: 'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (language !== undefined && language !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>language,\n        'language'\n      )\n    }\n    if (section !== undefined && section !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>section,\n        'section'\n      )\n    }\n    if (format !== undefined && format !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>format,\n        'format'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/pages/list`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { MetadataReplacementProcessingReportApiModel } from '../model/models'\nimport { ProcessingReportApiModel } from '../model/models'\nimport { XsltMetadataProcessingReportApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProcessesApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Clear process reports list\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public _delete(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public _delete(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public _delete(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public _delete(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/processes/reports`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get current process reports\n   * When processing, the report is stored in memory and allows to retrieve progress repport during processing. Usually, process reports are returned by the synchronous processing operation.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getProcessReport(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<ProcessingReportApiModel>>\n  public getProcessReport(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<ProcessingReportApiModel>>>\n  public getProcessReport(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<ProcessingReportApiModel>>>\n  public getProcessReport(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<ProcessingReportApiModel>>(\n      `${this.configuration.basePath}/processes/reports`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Preview process result applied to one or more records\n   * Preview result of a process applied to metadata records with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process. Append mode has 2 limitations. First, it only support a set of records in the same schema. Secondly, it does not propagate URL parameters. This mode is mainly used to create custom reports based on metadata records content.If process name ends with \\&#39;.csv\\&#39;, the XSL process output a text document which is returned. When errors occur during processing, the processing report is returned in JSON format.\n   * @param process Process identifier\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param appendFirst Append documents before processing\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public previewProcessRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    appendFirst?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<object>\n  public previewProcessRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    appendFirst?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<object>>\n  public previewProcessRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    appendFirst?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<object>>\n  public previewProcessRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    appendFirst?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (process === null || process === undefined) {\n      throw new Error(\n        'Required parameter process was null or undefined when calling previewProcessRecords.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (appendFirst !== undefined && appendFirst !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>appendFirst,\n        'appendFirst'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<object>(\n      `${this.configuration.basePath}/processes/${encodeURIComponent(\n        String(process)\n      )}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Apply a process to one or more records\n   * Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.\n   * @param process Process identifier\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param updateDateStamp If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp\n   * @param index Index after processing\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public processRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    index?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<XsltMetadataProcessingReportApiModel>\n  public processRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    index?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<XsltMetadataProcessingReportApiModel>>\n  public processRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    index?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<XsltMetadataProcessingReportApiModel>>\n  public processRecords(\n    process: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    index?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (process === null || process === undefined) {\n      throw new Error(\n        'Required parameter process was null or undefined when calling processRecords.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (updateDateStamp !== undefined && updateDateStamp !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>updateDateStamp,\n        'updateDateStamp'\n      )\n    }\n    if (index !== undefined && index !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>index,\n        'index'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<XsltMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/processes/${encodeURIComponent(\n        String(process)\n      )}`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Search and replace values in one or more records\n   * Service to apply replacements to one or more records.  To define a replacement, send the following parameters:  * mdsection-139815551372&#x3D;metadata  * mdfield-1398155513728&#x3D;id.contact.individualName  * replaceValue-1398155513728&#x3D;Juan  * searchValue-1398155513728&#x3D;Jose  TODO: Would be good to provide a simple object to define list of changes instead of group of parameters.&lt;br/&gt;Batch editing can also be used for similar works.\n   * @param process\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param isTesting Test only (ie. metadata are not saved). Return the report only.\n   * @param isCaseInsensitive Case insensitive search.\n   * @param vacuumMode \\&#39;record\\&#39; to apply vacuum.xsl, \\&#39;element\\&#39; to remove empty elements. Empty to not affect empty elements.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public searchAndReplace(\n    process?: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    isTesting?: boolean,\n    isCaseInsensitive?: boolean,\n    vacuumMode?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataReplacementProcessingReportApiModel>\n  public searchAndReplace(\n    process?: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    isTesting?: boolean,\n    isCaseInsensitive?: boolean,\n    vacuumMode?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataReplacementProcessingReportApiModel>>\n  public searchAndReplace(\n    process?: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    isTesting?: boolean,\n    isCaseInsensitive?: boolean,\n    vacuumMode?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataReplacementProcessingReportApiModel>>\n  public searchAndReplace(\n    process?: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    isTesting?: boolean,\n    isCaseInsensitive?: boolean,\n    vacuumMode?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (process !== undefined && process !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>process,\n        'process'\n      )\n    }\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (isTesting !== undefined && isTesting !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isTesting,\n        'isTesting'\n      )\n    }\n    if (isCaseInsensitive !== undefined && isCaseInsensitive !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isCaseInsensitive,\n        'isCaseInsensitive'\n      )\n    }\n    if (vacuumMode !== undefined && vacuumMode !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>vacuumMode,\n        'vacuumMode'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<MetadataReplacementProcessingReportApiModel>(\n      `${this.configuration.basePath}/processes/search-and-replace`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BatchEditParameterApiModel } from '../model/models'\nimport { ElementApiModel } from '../model/models'\nimport { ExtentDtoApiModel } from '../model/models'\nimport { FeatureResponseApiModel } from '../model/models'\nimport { IProcessingReportApiModel } from '../model/models'\nimport { InlineObject1ApiModel } from '../model/models'\nimport { MetadataCategoryApiModel } from '../model/models'\nimport { MetadataProcessingReportApiModel } from '../model/models'\nimport { MetadataResourceApiModel } from '../model/models'\nimport { MetadataStatusResponseApiModel } from '../model/models'\nimport { MetadataWorkflowStatusResponseApiModel } from '../model/models'\nimport { RelatedResponseApiModel } from '../model/models'\nimport { ReportsApiModel } from '../model/models'\nimport { SavedQueryApiModel } from '../model/models'\nimport { SharingParameterApiModel } from '../model/models'\nimport { SharingResponseApiModel } from '../model/models'\nimport { SimpleMetadataProcessingReportApiModel } from '../model/models'\nimport { SuggestionTypeApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RecordsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Reorder element\n   * @param metadataUuid Record UUID.\n   * @param ref Reference of the element to move.\n   * @param direction Direction\n   * @param displayAttributes Should attributes be shown on the editor snippet?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addElement(\n    metadataUuid: string,\n    ref: string,\n    direction: 'up' | 'down',\n    displayAttributes?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public addElement(\n    metadataUuid: string,\n    ref: string,\n    direction: 'up' | 'down',\n    displayAttributes?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public addElement(\n    metadataUuid: string,\n    ref: string,\n    direction: 'up' | 'down',\n    displayAttributes?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public addElement(\n    metadataUuid: string,\n    ref: string,\n    direction: 'up' | 'down',\n    displayAttributes?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling addElement.'\n      )\n    }\n    if (ref === null || ref === undefined) {\n      throw new Error(\n        'Required parameter ref was null or undefined when calling addElement.'\n      )\n    }\n    if (direction === null || direction === undefined) {\n      throw new Error(\n        'Required parameter direction was null or undefined when calling addElement.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (ref !== undefined && ref !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>ref, 'ref')\n    }\n    if (displayAttributes !== undefined && displayAttributes !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>displayAttributes,\n        'displayAttributes'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/editor/elements/${encodeURIComponent(String(direction))}`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add samples\n   * Add sample records for one or more schemas. Samples are defined for each standard in the samples folder as MEF files.\n   * @param schema Schema identifiers\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addSamples(\n    schema: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public addSamples(\n    schema: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public addSamples(\n    schema: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public addSamples(\n    schema: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling addSamples.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (schema) {\n      schema.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'schema'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/samples`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add templates\n   * Add template records for one or more schemas. Templates are defined for each standard in the template folder as XML files. Template may also contains subtemplates.\n   * @param schema Schema identifiers\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addTemplates(\n    schema: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public addTemplates(\n    schema: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public addTemplates(\n    schema: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public addTemplates(\n    schema: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling addTemplates.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (schema) {\n      schema.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'schema'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/templates`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Apply a saved query for this metadata\n   * All parameters will be substituted to the XPath query. eg. {{protocol}} in the XPath expression will be replaced by the protocol parameter provided in the request body.\n   * @param metadataUuid The metadata UUID\n   * @param savedQuery The saved query to apply\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public applyQuery(\n    metadataUuid: string,\n    savedQuery: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public applyQuery(\n    metadataUuid: string,\n    savedQuery: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public applyQuery(\n    metadataUuid: string,\n    savedQuery: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public applyQuery(\n    metadataUuid: string,\n    savedQuery: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling applyQuery.'\n      )\n    }\n    if (savedQuery === null || savedQuery === undefined) {\n      throw new Error(\n        'Required parameter savedQuery was null or undefined when calling applyQuery.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<{ [key: string]: string }>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/query/${encodeURIComponent(String(savedQuery))}`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Edit a set of records by XPath expressions. This operations applies the update-fixed-info.xsl transformation for the metadata schema and updates the change date if the parameter updateDateStamp is set to true.\n   * @param batchEditParameterApiModel\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param updateDateStamp If true updates the DateStamp (or equivalent in standards different to ISO 19139) field in the metadata with the current timestamp\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public batchEdit(\n    batchEditParameterApiModel: Array<BatchEditParameterApiModel>,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<IProcessingReportApiModel>\n  public batchEdit(\n    batchEditParameterApiModel: Array<BatchEditParameterApiModel>,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<IProcessingReportApiModel>>\n  public batchEdit(\n    batchEditParameterApiModel: Array<BatchEditParameterApiModel>,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<IProcessingReportApiModel>>\n  public batchEdit(\n    batchEditParameterApiModel: Array<BatchEditParameterApiModel>,\n    uuids?: Array<string>,\n    bucket?: string,\n    updateDateStamp?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (\n      batchEditParameterApiModel === null ||\n      batchEditParameterApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter batchEditParameterApiModel was null or undefined when calling batchEdit.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (updateDateStamp !== undefined && updateDateStamp !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>updateDateStamp,\n        'updateDateStamp'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<IProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/batchediting`,\n      batchEditParameterApiModel,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Cancel edits\n   * Cancel current editing session.\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public cancelEdits(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public cancelEdits(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public cancelEdits(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public cancelEdits(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling cancelEdits.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/editor`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Check that a record can be submitted to DataCite for DOI creation. DataCite requires some fields to be populated.\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public checkDoiStatus(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: boolean }>\n  public checkDoiStatus(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: boolean }>>\n  public checkDoiStatus(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: boolean }>>\n  public checkDoiStatus(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling checkDoiStatus.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: boolean }>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/doi/checkPreConditions`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Check the status of validation with the INSPIRE service.\n   * User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. If the process is complete an object with status is returned.\n   * @param testId Test identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public checkValidation(\n    testId: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public checkValidation(\n    testId: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public checkValidation(\n    testId: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public checkValidation(\n    testId: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (testId === null || testId === undefined) {\n      throw new Error(\n        'Required parameter testId was null or undefined when calling checkValidation.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(testId)\n      )}/validate/inspire`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Clear validation status of one or more records\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public cleanValidationStatus(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public cleanValidationStatus(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public cleanValidationStatus(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public cleanValidationStatus(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/validate`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Create a new record\n   * Create a record from a template or by copying an existing record.Return the UUID of the newly created record. Existing links in the source record are preserved, this means that the new record may contains link to the source attachments. They need to be manually updated after creation.\n   * @param sourceUuid UUID of the source record to copy.\n   * @param group The group the record is attached to.\n   * @param metadataType The type of record.\n   * @param targetUuid Assign a custom UUID. If this UUID already exist an error is returned. This is enabled only if metadata create / generate UUID settings is activated.\n   * @param isVisibleByAllGroupMembers Is published to all user group members? If not, only the author and administrator can edit the record.\n   * @param category Tags to assign to the record.\n   * @param hasCategoryOfSource Copy categories from source?\n   * @param isChildOfSource Is child of the record to copy?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public create(\n    sourceUuid: string,\n    group: string,\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    targetUuid?: string,\n    isVisibleByAllGroupMembers?: boolean,\n    category?: Array<string>,\n    hasCategoryOfSource?: boolean,\n    isChildOfSource?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public create(\n    sourceUuid: string,\n    group: string,\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    targetUuid?: string,\n    isVisibleByAllGroupMembers?: boolean,\n    category?: Array<string>,\n    hasCategoryOfSource?: boolean,\n    isChildOfSource?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public create(\n    sourceUuid: string,\n    group: string,\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    targetUuid?: string,\n    isVisibleByAllGroupMembers?: boolean,\n    category?: Array<string>,\n    hasCategoryOfSource?: boolean,\n    isChildOfSource?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public create(\n    sourceUuid: string,\n    group: string,\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    targetUuid?: string,\n    isVisibleByAllGroupMembers?: boolean,\n    category?: Array<string>,\n    hasCategoryOfSource?: boolean,\n    isChildOfSource?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (sourceUuid === null || sourceUuid === undefined) {\n      throw new Error(\n        'Required parameter sourceUuid was null or undefined when calling create.'\n      )\n    }\n    if (group === null || group === undefined) {\n      throw new Error(\n        'Required parameter group was null or undefined when calling create.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (metadataType !== undefined && metadataType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataType,\n        'metadataType'\n      )\n    }\n    if (sourceUuid !== undefined && sourceUuid !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>sourceUuid,\n        'sourceUuid'\n      )\n    }\n    if (targetUuid !== undefined && targetUuid !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>targetUuid,\n        'targetUuid'\n      )\n    }\n    if (group !== undefined && group !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>group,\n        'group'\n      )\n    }\n    if (\n      isVisibleByAllGroupMembers !== undefined &&\n      isVisibleByAllGroupMembers !== null\n    ) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isVisibleByAllGroupMembers,\n        'isVisibleByAllGroupMembers'\n      )\n    }\n    if (category) {\n      category.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'category'\n        )\n      })\n    }\n    if (hasCategoryOfSource !== undefined && hasCategoryOfSource !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>hasCategoryOfSource,\n        'hasCategoryOfSource'\n      )\n    }\n    if (isChildOfSource !== undefined && isChildOfSource !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isChildOfSource,\n        'isChildOfSource'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/records/duplicate`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Submit a record to the Datacite metadata store in order to create a DOI.\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public createDoi(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public createDoi(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public createDoi(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public createDoi(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling createDoi.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<{ [key: string]: string }>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/doi`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete attribute\n   * @param metadataUuid Record UUID.\n   * @param ref Reference of the attribute to remove.\n   * @param displayAttributes Should attributes be shown on the editor snippet?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteAttribute(\n    metadataUuid: string,\n    ref: string,\n    displayAttributes?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteAttribute(\n    metadataUuid: string,\n    ref: string,\n    displayAttributes?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteAttribute(\n    metadataUuid: string,\n    ref: string,\n    displayAttributes?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteAttribute(\n    metadataUuid: string,\n    ref: string,\n    displayAttributes?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling deleteAttribute.'\n      )\n    }\n    if (ref === null || ref === undefined) {\n      throw new Error(\n        'Required parameter ref was null or undefined when calling deleteAttribute.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (ref !== undefined && ref !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>ref, 'ref')\n    }\n    if (displayAttributes !== undefined && displayAttributes !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>displayAttributes,\n        'displayAttributes'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/editor/attributes`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete element\n   * @param metadataUuid Record UUID.\n   * @param ref Reference of the element to remove.\n   * @param parent Name of the parent.\n   * @param displayAttributes Should attributes be shown on the editor snippet?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteElement(\n    metadataUuid: string,\n    ref: Array<string>,\n    parent: string,\n    displayAttributes?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteElement(\n    metadataUuid: string,\n    ref: Array<string>,\n    parent: string,\n    displayAttributes?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteElement(\n    metadataUuid: string,\n    ref: Array<string>,\n    parent: string,\n    displayAttributes?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteElement(\n    metadataUuid: string,\n    ref: Array<string>,\n    parent: string,\n    displayAttributes?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling deleteElement.'\n      )\n    }\n    if (ref === null || ref === undefined) {\n      throw new Error(\n        'Required parameter ref was null or undefined when calling deleteElement.'\n      )\n    }\n    if (parent === null || parent === undefined) {\n      throw new Error(\n        'Required parameter parent was null or undefined when calling deleteElement.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (ref) {\n      ref.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'ref'\n        )\n      })\n    }\n    if (parent !== undefined && parent !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>parent,\n        'parent'\n      )\n    }\n    if (displayAttributes !== undefined && displayAttributes !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>displayAttributes,\n        'displayAttributes'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/editor/elements`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete one or more records\n   * User MUST be able to edit the record to delete it.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param withBackup Backup first the record as MEF in the metadata removed folder.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    withBackup?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public deleteRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    withBackup?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public deleteRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    withBackup?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public deleteRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    withBackup?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (withBackup !== undefined && withBackup !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withBackup,\n        'withBackup'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete tags to one or more records\n   * @param id Tag identifier\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteTagForRecords(\n    id: Array<number>,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public deleteTagForRecords(\n    id: Array<number>,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public deleteTagForRecords(\n    id: Array<number>,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public deleteTagForRecords(\n    id: Array<number>,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error(\n        'Required parameter id was null or undefined when calling deleteTagForRecords.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (id) {\n      id.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'id'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/tags`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete tags of a record\n   * @param metadataUuid Record UUID.\n   * @param id Tag identifier. If none, all tags are removed.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteTags(\n    metadataUuid: string,\n    id?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteTags(\n    metadataUuid: string,\n    id?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteTags(\n    metadataUuid: string,\n    id?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteTags(\n    metadataUuid: string,\n    id?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling deleteTags.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (id) {\n      id.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'id'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/tags`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Download MEF backup archive\n   * The backup contains all metadata not harvested including templates.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public downloadBackup(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/zip' }\n  ): Observable<any>\n  public downloadBackup(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/zip' }\n  ): Observable<HttpResponse<any>>\n  public downloadBackup(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/zip' }\n  ): Observable<HttpEvent<any>>\n  public downloadBackup(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/zip' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/zip',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/backups/latest`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * (Experimental) Enable version control\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public enableVersionControl(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<string>\n  public enableVersionControl(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<string>>\n  public enableVersionControl(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<string>>\n  public enableVersionControl(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling enableVersionControl.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/versions`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * (Experimental) Enable version control for one or more records\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public enableVersionControlForRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public enableVersionControlForRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public enableVersionControlForRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public enableVersionControlForRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/versions`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a set of metadata records as CSV\n   * The CSV is a short summary of each records.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public exportAsCsv(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public exportAsCsv(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public exportAsCsv(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public exportAsCsv(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/csv`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a set of metadata records as ZIP\n   * Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param format MEF file format.\n   * @param withRelated With related records (parent and service).\n   * @param withXLinksResolved Resolve XLinks in the records.\n   * @param withXLinkAttribute Preserve XLink URLs in the records.\n   * @param addSchemaLocation\n   * @param approved Download the approved version\n   * @param accept\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public exportAsMef(\n    uuids?: Array<string>,\n    bucket?: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public exportAsMef(\n    uuids?: Array<string>,\n    bucket?: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public exportAsMef(\n    uuids?: Array<string>,\n    bucket?: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public exportAsMef(\n    uuids?: Array<string>,\n    bucket?: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (format !== undefined && format !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>format,\n        'format'\n      )\n    }\n    if (withRelated !== undefined && withRelated !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withRelated,\n        'withRelated'\n      )\n    }\n    if (withXLinksResolved !== undefined && withXLinksResolved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withXLinksResolved,\n        'withXLinksResolved'\n      )\n    }\n    if (withXLinkAttribute !== undefined && withXLinkAttribute !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withXLinkAttribute,\n        'withXLinkAttribute'\n      )\n    }\n    if (addSchemaLocation !== undefined && addSchemaLocation !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>addSchemaLocation,\n        'addSchemaLocation'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n    if (accept !== undefined && accept !== null) {\n      headers = headers.set('Accept', String(accept))\n    }\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/zip`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a set of metadata records as PDF\n   * The PDF is a short summary of each records with links to the complete metadata record in different format (ie. landing page on the portal, XML)\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public exportAsPdf(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public exportAsPdf(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public exportAsPdf(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public exportAsPdf(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/pdf`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get the list of users \\&quot;active\\&quot; during a time period.\n   * @param dateFrom From date of users login date\n   * @param dateTo To date of users login date\n   * @param groups Group(s) for the users\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getActiveUsers(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getActiveUsers(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getActiveUsers(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getActiveUsers(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (dateFrom === null || dateFrom === undefined) {\n      throw new Error(\n        'Required parameter dateFrom was null or undefined when calling getActiveUsers.'\n      )\n    }\n    if (dateTo === null || dateTo === undefined) {\n      throw new Error(\n        'Required parameter dateTo was null or undefined when calling getActiveUsers.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (dateFrom !== undefined && dateFrom !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateFrom,\n        'dateFrom'\n      )\n    }\n    if (dateTo !== undefined && dateTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateTo,\n        'dateTo'\n      )\n    }\n    if (groups) {\n      groups.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groups'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/reports/users`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of record extents\n   * A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level. Proportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)  Named backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAllRecordExtentAsJson(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<ExtentDtoApiModel>>\n  public getAllRecordExtentAsJson(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<ExtentDtoApiModel>>>\n  public getAllRecordExtentAsJson(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<ExtentDtoApiModel>>>\n  public getAllRecordExtentAsJson(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getAllRecordExtentAsJson.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<ExtentDtoApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/extents.json`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * List all metadata attachments\n   * &lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/using-filestore.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param metadataUuid The metadata UUID\n   * @param sort Sort by\n   * @param approved Use approved version or not\n   * @param filter\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAllResources(\n    metadataUuid: string,\n    sort?: 'type' | 'name',\n    approved?: boolean,\n    filter?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataResourceApiModel>>\n  public getAllResources(\n    metadataUuid: string,\n    sort?: 'type' | 'name',\n    approved?: boolean,\n    filter?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataResourceApiModel>>>\n  public getAllResources(\n    metadataUuid: string,\n    sort?: 'type' | 'name',\n    approved?: boolean,\n    filter?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataResourceApiModel>>>\n  public getAllResources(\n    metadataUuid: string,\n    sort?: 'type' | 'name',\n    approved?: boolean,\n    filter?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getAllResources.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (sort !== undefined && sort !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>sort, 'sort')\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n    if (filter !== undefined && filter !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>filter,\n        'filter'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataResourceApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/attachments`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get catalog content as RDF. This endpoint supports the same Lucene query parameters as for the GUI search.\n   * .\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAsRdf(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getAsRdf(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getAsRdf(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getAsRdf(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(`${this.configuration.basePath}/records`, {\n      responseType: <any>responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress,\n    })\n  }\n\n  /**\n   * Get record related resources\n   * Retrieve related services, datasets, onlines, thumbnails, sources, ... to this records.&lt;br/&gt;&lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param metadataUuid Record UUID.\n   * @param type Type of related resource. If none, all resources are returned.\n   * @param start Start offset for paging. Default 1. Only applies to related metadata records (ie. not for thumbnails).\n   * @param rows Number of rows returned. Default 100.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAssociatedResources(\n    metadataUuid: string,\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    start?: number,\n    rows?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<RelatedResponseApiModel>\n  public getAssociatedResources(\n    metadataUuid: string,\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    start?: number,\n    rows?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<RelatedResponseApiModel>>\n  public getAssociatedResources(\n    metadataUuid: string,\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    start?: number,\n    rows?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<RelatedResponseApiModel>>\n  public getAssociatedResources(\n    metadataUuid: string,\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    start?: number,\n    rows?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getAssociatedResources.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type) {\n      type.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'type'\n        )\n      })\n    }\n    if (start !== undefined && start !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>start,\n        'start'\n      )\n    }\n    if (rows !== undefined && rows !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>rows, 'rows')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<RelatedResponseApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/related`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Returns a map to decode attributes in a dataset (from the associated feature catalog)\n   * Retrieve related services, datasets, onlines, thumbnails, sources, ... to this records.&lt;br/&gt;&lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getFeatureCatalog(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<FeatureResponseApiModel>\n  public getFeatureCatalog(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<FeatureResponseApiModel>>\n  public getFeatureCatalog(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<FeatureResponseApiModel>>\n  public getFeatureCatalog(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getFeatureCatalog.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<FeatureResponseApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/featureCatalog`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a metadata record as XML or JSON\n   * @param metadataUuid Record UUID.\n   * @param addSchemaLocation Add XSD schema location based on standard configuration (see schema-ident.xml).\n   * @param increasePopularity Increase record popularity\n   * @param withInfo Add geonet:info details\n   * @param attachment Download as a file\n   * @param approved Download the approved version\n   * @param accept\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordAs(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<object>\n  public getRecordAs(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<object>>\n  public getRecordAs(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<object>>\n  public getRecordAs(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordAs.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (addSchemaLocation !== undefined && addSchemaLocation !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>addSchemaLocation,\n        'addSchemaLocation'\n      )\n    }\n    if (increasePopularity !== undefined && increasePopularity !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>increasePopularity,\n        'increasePopularity'\n      )\n    }\n    if (withInfo !== undefined && withInfo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withInfo,\n        'withInfo'\n      )\n    }\n    if (attachment !== undefined && attachment !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>attachment,\n        'attachment'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n    if (accept !== undefined && accept !== null) {\n      headers = headers.set('Accept', String(accept))\n    }\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<object>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/formatters/xml`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a metadata record as XML or JSON\n   * @param metadataUuid Record UUID.\n   * @param addSchemaLocation Add XSD schema location based on standard configuration (see schema-ident.xml).\n   * @param increasePopularity Increase record popularity\n   * @param withInfo Add geonet:info details\n   * @param attachment Download as a file\n   * @param approved Download the approved version\n   * @param accept\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordAs1(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<object>\n  public getRecordAs1(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<object>>\n  public getRecordAs1(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<object>>\n  public getRecordAs1(\n    metadataUuid: string,\n    addSchemaLocation?: boolean,\n    increasePopularity?: boolean,\n    withInfo?: boolean,\n    attachment?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordAs1.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (addSchemaLocation !== undefined && addSchemaLocation !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>addSchemaLocation,\n        'addSchemaLocation'\n      )\n    }\n    if (increasePopularity !== undefined && increasePopularity !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>increasePopularity,\n        'increasePopularity'\n      )\n    }\n    if (withInfo !== undefined && withInfo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withInfo,\n        'withInfo'\n      )\n    }\n    if (attachment !== undefined && attachment !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>attachment,\n        'attachment'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n    if (accept !== undefined && accept !== null) {\n      headers = headers.set('Accept', String(accept))\n    }\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<object>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/formatters/json`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a metadata record as ZIP\n   * Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing the metadata as XML and some others files depending on the version requested. See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.\n   * @param metadataUuid Record UUID.\n   * @param format MEF file format.\n   * @param withRelated With related records (parent and service).\n   * @param withXLinksResolved Resolve XLinks in the records.\n   * @param withXLinkAttribute Preserve XLink URLs in the records.\n   * @param addSchemaLocation\n   * @param approved Download the approved version\n   * @param accept\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordAsZip(\n    metadataUuid: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getRecordAsZip(\n    metadataUuid: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getRecordAsZip(\n    metadataUuid: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getRecordAsZip(\n    metadataUuid: string,\n    format?: 'simple' | 'partial' | 'full',\n    withRelated?: boolean,\n    withXLinksResolved?: boolean,\n    withXLinkAttribute?: boolean,\n    addSchemaLocation?: boolean,\n    approved?: boolean,\n    accept?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordAsZip.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (format !== undefined && format !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>format,\n        'format'\n      )\n    }\n    if (withRelated !== undefined && withRelated !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withRelated,\n        'withRelated'\n      )\n    }\n    if (withXLinksResolved !== undefined && withXLinksResolved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withXLinksResolved,\n        'withXLinksResolved'\n      )\n    }\n    if (withXLinkAttribute !== undefined && withXLinkAttribute !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withXLinkAttribute,\n        'withXLinkAttribute'\n      )\n    }\n    if (addSchemaLocation !== undefined && addSchemaLocation !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>addSchemaLocation,\n        'addSchemaLocation'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n    if (accept !== undefined && accept !== null) {\n      headers = headers.set('Accept', String(accept))\n    }\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/formatters/zip`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a formatted metadata record\n   * @param formatterId\n   * @param metadataUuid Record UUID.\n   * @param accept Formatter type to use.\n   * @param width\n   * @param mdpath\n   * @param language Optional language ISO 3 letters code to override HTTP Accept-language header.\n   * @param output\n   * @param approved Download the approved version\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordFormattedBy(\n    formatterId: string,\n    metadataUuid: string,\n    accept?: string,\n    width?: '_25' | '_50' | '_75' | '_100',\n    mdpath?: string,\n    language?: string,\n    output?: 'txt' | 'html' | 'xml' | 'json' | 'jsonld' | 'pdf' | 'testpdf',\n    approved?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getRecordFormattedBy(\n    formatterId: string,\n    metadataUuid: string,\n    accept?: string,\n    width?: '_25' | '_50' | '_75' | '_100',\n    mdpath?: string,\n    language?: string,\n    output?: 'txt' | 'html' | 'xml' | 'json' | 'jsonld' | 'pdf' | 'testpdf',\n    approved?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getRecordFormattedBy(\n    formatterId: string,\n    metadataUuid: string,\n    accept?: string,\n    width?: '_25' | '_50' | '_75' | '_100',\n    mdpath?: string,\n    language?: string,\n    output?: 'txt' | 'html' | 'xml' | 'json' | 'jsonld' | 'pdf' | 'testpdf',\n    approved?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getRecordFormattedBy(\n    formatterId: string,\n    metadataUuid: string,\n    accept?: string,\n    width?: '_25' | '_50' | '_75' | '_100',\n    mdpath?: string,\n    language?: string,\n    output?: 'txt' | 'html' | 'xml' | 'json' | 'jsonld' | 'pdf' | 'testpdf',\n    approved?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (formatterId === null || formatterId === undefined) {\n      throw new Error(\n        'Required parameter formatterId was null or undefined when calling getRecordFormattedBy.'\n      )\n    }\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordFormattedBy.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (width !== undefined && width !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>width,\n        'width'\n      )\n    }\n    if (mdpath !== undefined && mdpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>mdpath,\n        'mdpath'\n      )\n    }\n    if (language !== undefined && language !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>language,\n        'language'\n      )\n    }\n    if (output !== undefined && output !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>output,\n        'output'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n    if (accept !== undefined && accept !== null) {\n      headers = headers.set('Accept', String(accept))\n    }\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/formatters/${encodeURIComponent(String(formatterId))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record sharing settings\n   * Return current sharing options for a record.\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordSharingSettings(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SharingResponseApiModel>\n  public getRecordSharingSettings(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SharingResponseApiModel>>\n  public getRecordSharingSettings(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SharingResponseApiModel>>\n  public getRecordSharingSettings(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordSharingSettings.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<SharingResponseApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/sharing`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record status history\n   * @param metadataUuid Record UUID.\n   * @param details\n   * @param sortOrder Sort direction\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordStatusHistory(\n    metadataUuid: string,\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataStatusResponseApiModel>>\n  public getRecordStatusHistory(\n    metadataUuid: string,\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataStatusResponseApiModel>>>\n  public getRecordStatusHistory(\n    metadataUuid: string,\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataStatusResponseApiModel>>>\n  public getRecordStatusHistory(\n    metadataUuid: string,\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordStatusHistory.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (details !== undefined && details !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>details,\n        'details'\n      )\n    }\n    if (sortOrder !== undefined && sortOrder !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>sortOrder,\n        'sortOrder'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataStatusResponseApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/status`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record status history by type\n   * @param metadataUuid Record UUID.\n   * @param type Type\n   * @param details\n   * @param sortOrder Sort direction\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordStatusHistoryByType(\n    metadataUuid: string,\n    type: 'workflow' | 'task' | 'event',\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataStatusResponseApiModel>>\n  public getRecordStatusHistoryByType(\n    metadataUuid: string,\n    type: 'workflow' | 'task' | 'event',\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataStatusResponseApiModel>>>\n  public getRecordStatusHistoryByType(\n    metadataUuid: string,\n    type: 'workflow' | 'task' | 'event',\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataStatusResponseApiModel>>>\n  public getRecordStatusHistoryByType(\n    metadataUuid: string,\n    type: 'workflow' | 'task' | 'event',\n    details?: boolean,\n    sortOrder?: 'ASC' | 'DESC',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordStatusHistoryByType.'\n      )\n    }\n    if (type === null || type === undefined) {\n      throw new Error(\n        'Required parameter type was null or undefined when calling getRecordStatusHistoryByType.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (details !== undefined && details !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>details,\n        'details'\n      )\n    }\n    if (sortOrder !== undefined && sortOrder !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>sortOrder,\n        'sortOrder'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataStatusResponseApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/status/${encodeURIComponent(String(type))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record tags\n   * Tags are used to classify information.&lt;br/&gt;&lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/tag-information/tagging-with-categories.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordTags(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Set<MetadataCategoryApiModel>>\n  public getRecordTags(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Set<MetadataCategoryApiModel>>>\n  public getRecordTags(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Set<MetadataCategoryApiModel>>>\n  public getRecordTags(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getRecordTags.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Set<MetadataCategoryApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/tags`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of metadata file downloads\n   * @param dateFrom From date of the metadata downloads\n   * @param dateTo To date of the metadata downloads\n   * @param groups Metadata group(s)\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getReportDataDownloads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getReportDataDownloads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getReportDataDownloads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getReportDataDownloads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (dateFrom === null || dateFrom === undefined) {\n      throw new Error(\n        'Required parameter dateFrom was null or undefined when calling getReportDataDownloads.'\n      )\n    }\n    if (dateTo === null || dateTo === undefined) {\n      throw new Error(\n        'Required parameter dateTo was null or undefined when calling getReportDataDownloads.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (dateFrom !== undefined && dateFrom !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateFrom,\n        'dateFrom'\n      )\n    }\n    if (dateTo !== undefined && dateTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateTo,\n        'dateTo'\n      )\n    }\n    if (groups) {\n      groups.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groups'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/reports/datadownloads`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get uploaded files to metadata records during a period.\n   * @param dateFrom From date of the metadata uploads\n   * @param dateTo To date of the metadata uploads\n   * @param groups Metadata group(s)\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getReportDataUploads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getReportDataUploads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getReportDataUploads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getReportDataUploads(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (dateFrom === null || dateFrom === undefined) {\n      throw new Error(\n        'Required parameter dateFrom was null or undefined when calling getReportDataUploads.'\n      )\n    }\n    if (dateTo === null || dateTo === undefined) {\n      throw new Error(\n        'Required parameter dateTo was null or undefined when calling getReportDataUploads.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (dateFrom !== undefined && dateFrom !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateFrom,\n        'dateFrom'\n      )\n    }\n    if (dateTo !== undefined && dateTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateTo,\n        'dateTo'\n      )\n    }\n    if (groups) {\n      groups.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groups'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/reports/datauploads`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get the metadata not published during a period.\n   * @param dateFrom From date of metadata change date\n   * @param dateTo To date of metadata change date\n   * @param groups Metadata group(s)\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getReportInternalMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getReportInternalMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getReportInternalMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getReportInternalMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (dateFrom === null || dateFrom === undefined) {\n      throw new Error(\n        'Required parameter dateFrom was null or undefined when calling getReportInternalMetadata.'\n      )\n    }\n    if (dateTo === null || dateTo === undefined) {\n      throw new Error(\n        'Required parameter dateTo was null or undefined when calling getReportInternalMetadata.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (dateFrom !== undefined && dateFrom !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateFrom,\n        'dateFrom'\n      )\n    }\n    if (dateTo !== undefined && dateTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateTo,\n        'dateTo'\n      )\n    }\n    if (groups) {\n      groups.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groups'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/reports/metadatainternal`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get the updated metadata during a period.\n   * @param dateFrom From date of metadata change date\n   * @param dateTo To date of metadata change date\n   * @param groups Metadata group(s)\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getReportUpdatedMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getReportUpdatedMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getReportUpdatedMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getReportUpdatedMetadata(\n    dateFrom: string,\n    dateTo: string,\n    groups?: Array<number>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (dateFrom === null || dateFrom === undefined) {\n      throw new Error(\n        'Required parameter dateFrom was null or undefined when calling getReportUpdatedMetadata.'\n      )\n    }\n    if (dateTo === null || dateTo === undefined) {\n      throw new Error(\n        'Required parameter dateTo was null or undefined when calling getReportUpdatedMetadata.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (dateFrom !== undefined && dateFrom !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateFrom,\n        'dateFrom'\n      )\n    }\n    if (dateTo !== undefined && dateTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateTo,\n        'dateTo'\n      )\n    }\n    if (groups) {\n      groups.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'groups'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/reports/metadataupdated`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a metadata resource\n   * @param metadataUuid The metadata UUID\n   * @param resourceId The resource identifier (ie. filename)\n   * @param approved Use approved version or not\n   * @param size Size (only applies to images). From 1px to 2048px.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getResource(\n    metadataUuid: string,\n    resourceId: string,\n    approved?: boolean,\n    size?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<Array<string>>\n  public getResource(\n    metadataUuid: string,\n    resourceId: string,\n    approved?: boolean,\n    size?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<Array<string>>>\n  public getResource(\n    metadataUuid: string,\n    resourceId: string,\n    approved?: boolean,\n    size?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<Array<string>>>\n  public getResource(\n    metadataUuid: string,\n    resourceId: string,\n    approved?: boolean,\n    size?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getResource.'\n      )\n    }\n    if (resourceId === null || resourceId === undefined) {\n      throw new Error(\n        'Required parameter resourceId was null or undefined when calling getResource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n    if (size !== undefined && size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<string>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/attachments/${encodeURIComponent(String(resourceId))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * List saved queries for this metadata\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSavedQueries(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<SavedQueryApiModel>>\n  public getSavedQueries(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<SavedQueryApiModel>>>\n  public getSavedQueries(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<SavedQueryApiModel>>>\n  public getSavedQueries(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getSavedQueries.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<SavedQueryApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/query`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record sharing settings\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSharingSettings(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SharingResponseApiModel>\n  public getSharingSettings(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SharingResponseApiModel>>\n  public getSharingSettings(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SharingResponseApiModel>>\n  public getSharingSettings(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<SharingResponseApiModel>(\n      `${this.configuration.basePath}/records/sharing`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get last workflow status for a record\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getStatus(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataWorkflowStatusResponseApiModel>\n  public getStatus(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataWorkflowStatusResponseApiModel>>\n  public getStatus(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataWorkflowStatusResponseApiModel>>\n  public getStatus(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getStatus.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<MetadataWorkflowStatusResponseApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/status/workflow/last`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get suggestions\n   * Analyze the record an suggest processes to improve the quality of the record.&lt;br/&gt;&lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/workflow/batchupdate-xsl.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSuggestions(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<SuggestionTypeApiModel>>\n  public getSuggestions(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<SuggestionTypeApiModel>>>\n  public getSuggestions(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<SuggestionTypeApiModel>>>\n  public getSuggestions(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getSuggestions.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<SuggestionTypeApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/processes`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get test suites available.\n   * TG13, TG2, ...\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getTestSuites(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: Array<string> }>\n  public getTestSuites(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: Array<string> }>>\n  public getTestSuites(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: Array<string> }>>\n  public getTestSuites(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getTestSuites.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: Array<string> }>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/validate/inspire/testsuites`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Search status\n   * @param type One or more types to retrieve (ie. worflow, event, task). Default is all.\n   * @param details All event details including XML changes. Responses are bigger. Default is false\n   * @param author One or more event author. Default is all.\n   * @param owner One or more event owners. Default is all.\n   * @param id One or more record identifier. Default is all.\n   * @param record One or more metadata record identifier. Default is all.\n   * @param uuid One or more metadata uuid. Default is all.\n   * @param dateFrom Start date\n   * @param dateTo End date\n   * @param from From page\n   * @param size Number of records to return\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getWorkflowStatusByType(\n    type?: Array<'workflow' | 'task' | 'event'>,\n    details?: boolean,\n    author?: Array<number>,\n    owner?: Array<number>,\n    id?: Array<number>,\n    record?: Array<number>,\n    uuid?: Array<string>,\n    dateFrom?: string,\n    dateTo?: string,\n    from?: number,\n    size?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataStatusResponseApiModel>>\n  public getWorkflowStatusByType(\n    type?: Array<'workflow' | 'task' | 'event'>,\n    details?: boolean,\n    author?: Array<number>,\n    owner?: Array<number>,\n    id?: Array<number>,\n    record?: Array<number>,\n    uuid?: Array<string>,\n    dateFrom?: string,\n    dateTo?: string,\n    from?: number,\n    size?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataStatusResponseApiModel>>>\n  public getWorkflowStatusByType(\n    type?: Array<'workflow' | 'task' | 'event'>,\n    details?: boolean,\n    author?: Array<number>,\n    owner?: Array<number>,\n    id?: Array<number>,\n    record?: Array<number>,\n    uuid?: Array<string>,\n    dateFrom?: string,\n    dateTo?: string,\n    from?: number,\n    size?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataStatusResponseApiModel>>>\n  public getWorkflowStatusByType(\n    type?: Array<'workflow' | 'task' | 'event'>,\n    details?: boolean,\n    author?: Array<number>,\n    owner?: Array<number>,\n    id?: Array<number>,\n    record?: Array<number>,\n    uuid?: Array<string>,\n    dateFrom?: string,\n    dateTo?: string,\n    from?: number,\n    size?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type) {\n      type.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'type'\n        )\n      })\n    }\n    if (details !== undefined && details !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>details,\n        'details'\n      )\n    }\n    if (author) {\n      author.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'author'\n        )\n      })\n    }\n    if (owner) {\n      owner.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'owner'\n        )\n      })\n    }\n    if (id) {\n      id.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'id'\n        )\n      })\n    }\n    if (record) {\n      record.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'record'\n        )\n      })\n    }\n    if (uuid) {\n      uuid.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuid'\n        )\n      })\n    }\n    if (dateFrom !== undefined && dateFrom !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateFrom,\n        'dateFrom'\n      )\n    }\n    if (dateTo !== undefined && dateTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>dateTo,\n        'dateTo'\n      )\n    }\n    if (from !== undefined && from !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>from, 'from')\n    }\n    if (size !== undefined && size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataStatusResponseApiModel>>(\n      `${this.configuration.basePath}/records/status/search`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Index a set of records\n   * Index a set of records provided either by a bucket or a list of uuids\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public index(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: object }>\n  public index(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: object }>>\n  public index(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: object }>>\n  public index(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: object }>(\n      `${this.configuration.basePath}/records/index`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add a record\n   * Add one or more record from an XML fragment, URL or file in a folder on the catalog server. When loadingfrom the catalog server folder, it might be faster to use a local filesystem harvester.\n   * @param metadataType The type of record.\n   * @param url URL of a file to download and insert.\n   * @param serverFolder Server folder where to look for files.\n   * @param recursiveSearch (Server folder import only) Recursive search in folder.\n   * @param publishToAll (XML file only) Publish record.\n   * @param assignToCatalog (MEF file only) Assign to current catalog.\n   * @param uuidProcessing Record identifier processing.\n   * @param group The group the record is attached to.\n   * @param category Tags to assign to the record.\n   * @param rejectIfInvalid Validate the record first and reject it if not valid.\n   * @param transformWith XSL transformation to apply to the record.\n   * @param schema Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).\n   * @param extra (experimental) Add extra information to the record.\n   * @param body XML fragment.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public insert(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    url?: Array<string>,\n    serverFolder?: string,\n    recursiveSearch?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    body?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public insert(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    url?: Array<string>,\n    serverFolder?: string,\n    recursiveSearch?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    body?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public insert(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    url?: Array<string>,\n    serverFolder?: string,\n    recursiveSearch?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    body?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public insert(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    url?: Array<string>,\n    serverFolder?: string,\n    recursiveSearch?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    body?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (metadataType !== undefined && metadataType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataType,\n        'metadataType'\n      )\n    }\n    if (url) {\n      url.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'url'\n        )\n      })\n    }\n    if (serverFolder !== undefined && serverFolder !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>serverFolder,\n        'serverFolder'\n      )\n    }\n    if (recursiveSearch !== undefined && recursiveSearch !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>recursiveSearch,\n        'recursiveSearch'\n      )\n    }\n    if (publishToAll !== undefined && publishToAll !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>publishToAll,\n        'publishToAll'\n      )\n    }\n    if (assignToCatalog !== undefined && assignToCatalog !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>assignToCatalog,\n        'assignToCatalog'\n      )\n    }\n    if (uuidProcessing !== undefined && uuidProcessing !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>uuidProcessing,\n        'uuidProcessing'\n      )\n    }\n    if (group !== undefined && group !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>group,\n        'group'\n      )\n    }\n    if (category) {\n      category.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'category'\n        )\n      })\n    }\n    if (rejectIfInvalid !== undefined && rejectIfInvalid !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>rejectIfInvalid,\n        'rejectIfInvalid'\n      )\n    }\n    if (transformWith !== undefined && transformWith !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>transformWith,\n        'transformWith'\n      )\n    }\n    if (schema !== undefined && schema !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>schema,\n        'schema'\n      )\n    }\n    if (extra !== undefined && extra !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>extra,\n        'extra'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = [\n      'application/xml',\n      'application/json',\n      'application/x-www-form-urlencoded',\n    ]\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records`,\n      body,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add a record from XML or MEF/ZIP file\n   * Add record in the catalog by uploading files.\n   * @param metadataType The type of record.\n   * @param file XML or MEF file to upload\n   * @param uuidProcessing Record identifier processing.\n   * @param group The group the record is attached to.\n   * @param category Tags to assign to the record.\n   * @param rejectIfInvalid Validate the record first and reject it if not valid.\n   * @param publishToAll (XML file only) Publish record.\n   * @param assignToCatalog (MEF file only) Assign to current catalog.\n   * @param transformWith XSL transformation to apply to the record.\n   * @param schema Force the schema of the record. If not set, schema autodetection is used (and is the preferred method).\n   * @param extra (experimental) Add extra information to the record.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public insertFile(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    file?: Array<Blob>,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public insertFile(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    file?: Array<Blob>,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public insertFile(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    file?: Array<Blob>,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public insertFile(\n    metadataType?:\n      | 'METADATA'\n      | 'TEMPLATE'\n      | 'SUB_TEMPLATE'\n      | 'TEMPLATE_OF_SUB_TEMPLATE',\n    file?: Array<Blob>,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    category?: Array<string>,\n    rejectIfInvalid?: boolean,\n    publishToAll?: boolean,\n    assignToCatalog?: boolean,\n    transformWith?: string,\n    schema?: string,\n    extra?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (metadataType !== undefined && metadataType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataType,\n        'metadataType'\n      )\n    }\n    if (file) {\n      file.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'file'\n        )\n      })\n    }\n    if (uuidProcessing !== undefined && uuidProcessing !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>uuidProcessing,\n        'uuidProcessing'\n      )\n    }\n    if (group !== undefined && group !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>group,\n        'group'\n      )\n    }\n    if (category) {\n      category.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'category'\n        )\n      })\n    }\n    if (rejectIfInvalid !== undefined && rejectIfInvalid !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>rejectIfInvalid,\n        'rejectIfInvalid'\n      )\n    }\n    if (publishToAll !== undefined && publishToAll !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>publishToAll,\n        'publishToAll'\n      )\n    }\n    if (assignToCatalog !== undefined && assignToCatalog !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>assignToCatalog,\n        'assignToCatalog'\n      )\n    }\n    if (transformWith !== undefined && transformWith !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>transformWith,\n        'transformWith'\n      )\n    }\n    if (schema !== undefined && schema !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>schema,\n        'schema'\n      )\n    }\n    if (extra !== undefined && extra !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>extra,\n        'extra'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add a map metadata record from OGC OWS context\n   * Add record in the catalog by uploading a map context.\n   * @param title A map title\n   * @param recordAbstract A map abstract\n   * @param xml OGC OWS context as string\n   * @param filename OGC OWS context file name\n   * @param url OGC OWS context URL\n   * @param viewerUrl A map viewer URL to visualize the map\n   * @param overview Map overview as PNG (base64 encoded)\n   * @param overviewFilename Map overview filename\n   * @param topic Topic category\n   * @param publishToAll Publish record.\n   * @param uuidProcessing Record identifier processing.\n   * @param group The group the record is attached to.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public insertOgcMapContextFile(\n    title: string,\n    recordAbstract?: string,\n    xml?: string,\n    filename?: string,\n    url?: string,\n    viewerUrl?: string,\n    overview?: string,\n    overviewFilename?: string,\n    topic?: string,\n    publishToAll?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public insertOgcMapContextFile(\n    title: string,\n    recordAbstract?: string,\n    xml?: string,\n    filename?: string,\n    url?: string,\n    viewerUrl?: string,\n    overview?: string,\n    overviewFilename?: string,\n    topic?: string,\n    publishToAll?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public insertOgcMapContextFile(\n    title: string,\n    recordAbstract?: string,\n    xml?: string,\n    filename?: string,\n    url?: string,\n    viewerUrl?: string,\n    overview?: string,\n    overviewFilename?: string,\n    topic?: string,\n    publishToAll?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public insertOgcMapContextFile(\n    title: string,\n    recordAbstract?: string,\n    xml?: string,\n    filename?: string,\n    url?: string,\n    viewerUrl?: string,\n    overview?: string,\n    overviewFilename?: string,\n    topic?: string,\n    publishToAll?: boolean,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (title === null || title === undefined) {\n      throw new Error(\n        'Required parameter title was null or undefined when calling insertOgcMapContextFile.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (title !== undefined && title !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>title,\n        'title'\n      )\n    }\n    if (recordAbstract !== undefined && recordAbstract !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>recordAbstract,\n        'recordAbstract'\n      )\n    }\n    if (xml !== undefined && xml !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>xml, 'xml')\n    }\n    if (filename !== undefined && filename !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>filename,\n        'filename'\n      )\n    }\n    if (url !== undefined && url !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>url, 'url')\n    }\n    if (viewerUrl !== undefined && viewerUrl !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>viewerUrl,\n        'viewerUrl'\n      )\n    }\n    if (overview !== undefined && overview !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>overview,\n        'overview'\n      )\n    }\n    if (overviewFilename !== undefined && overviewFilename !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>overviewFilename,\n        'overviewFilename'\n      )\n    }\n    if (topic !== undefined && topic !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>topic,\n        'topic'\n      )\n    }\n    if (publishToAll !== undefined && publishToAll !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>publishToAll,\n        'publishToAll'\n      )\n    }\n    if (uuidProcessing !== undefined && uuidProcessing !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>uuidProcessing,\n        'uuidProcessing'\n      )\n    }\n    if (group !== undefined && group !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>group,\n        'group'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/importfrommap`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update the metadata resource visibility\n   * @param metadataUuid The metadata UUID\n   * @param resourceId The resource identifier (ie. filename)\n   * @param visibility The visibility\n   * @param approved Use approved version or not\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public patchResource(\n    metadataUuid: string,\n    resourceId: string,\n    visibility: 'public' | 'private',\n    approved?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataResourceApiModel>\n  public patchResource(\n    metadataUuid: string,\n    resourceId: string,\n    visibility: 'public' | 'private',\n    approved?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataResourceApiModel>>\n  public patchResource(\n    metadataUuid: string,\n    resourceId: string,\n    visibility: 'public' | 'private',\n    approved?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataResourceApiModel>>\n  public patchResource(\n    metadataUuid: string,\n    resourceId: string,\n    visibility: 'public' | 'private',\n    approved?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling patchResource.'\n      )\n    }\n    if (resourceId === null || resourceId === undefined) {\n      throw new Error(\n        'Required parameter resourceId was null or undefined when calling patchResource.'\n      )\n    }\n    if (visibility === null || visibility === undefined) {\n      throw new Error(\n        'Required parameter visibility was null or undefined when calling patchResource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (visibility !== undefined && visibility !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>visibility,\n        'visibility'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.patch<MetadataResourceApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/attachments/${encodeURIComponent(String(resourceId))}`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Apply a process\n   * Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.\n   * @param metadataUuid Record UUID.\n   * @param process Process identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public processRecord(\n    metadataUuid: string,\n    process: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<string>\n  public processRecord(\n    metadataUuid: string,\n    process: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<string>>\n  public processRecord(\n    metadataUuid: string,\n    process: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<string>>\n  public processRecord(\n    metadataUuid: string,\n    process: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling processRecord.'\n      )\n    }\n    if (process === null || process === undefined) {\n      throw new Error(\n        'Required parameter process was null or undefined when calling processRecord.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/processes/${encodeURIComponent(String(process))}`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Preview process result\n   * Process a metadata with an XSL transformation declared in the metadata schema (See the process folder). Parameters sent to the service are forwarded to XSL process.\n   * @param metadataUuid Record UUID.\n   * @param process Process identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public processRecordPreview(\n    metadataUuid: string,\n    process: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<ElementApiModel>\n  public processRecordPreview(\n    metadataUuid: string,\n    process: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<ElementApiModel>>\n  public processRecordPreview(\n    metadataUuid: string,\n    process: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<ElementApiModel>>\n  public processRecordPreview(\n    metadataUuid: string,\n    process: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling processRecordPreview.'\n      )\n    }\n    if (process === null || process === undefined) {\n      throw new Error(\n        'Required parameter process was null or undefined when calling processRecordPreview.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<ElementApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/processes/${encodeURIComponent(String(process))}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Publish one or more records\n   * See record sharing for more details.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public publish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public publish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public publish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public publish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/publish`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Create a new resource for a given metadata\n   * @param metadataUuid The metadata UUID\n   * @param visibility The sharing policy\n   * @param approved Use approved version or not\n   * @param inlineObject1ApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public putResource(\n    metadataUuid: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    inlineObject1ApiModel?: InlineObject1ApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataResourceApiModel>\n  public putResource(\n    metadataUuid: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    inlineObject1ApiModel?: InlineObject1ApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataResourceApiModel>>\n  public putResource(\n    metadataUuid: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    inlineObject1ApiModel?: InlineObject1ApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataResourceApiModel>>\n  public putResource(\n    metadataUuid: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    inlineObject1ApiModel?: InlineObject1ApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling putResource.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (visibility !== undefined && visibility !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>visibility,\n        'visibility'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<MetadataResourceApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/attachments`,\n      inlineObject1ApiModel,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Create a new resource from a URL for a given metadata\n   * @param metadataUuid The metadata UUID\n   * @param url The URL to load in the store\n   * @param visibility The sharing policy\n   * @param approved Use approved version or not\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public putResourceFromURL(\n    metadataUuid: string,\n    url: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataResourceApiModel>\n  public putResourceFromURL(\n    metadataUuid: string,\n    url: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataResourceApiModel>>\n  public putResourceFromURL(\n    metadataUuid: string,\n    url: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataResourceApiModel>>\n  public putResourceFromURL(\n    metadataUuid: string,\n    url: string,\n    visibility?: 'public' | 'private',\n    approved?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling putResourceFromURL.'\n      )\n    }\n    if (url === null || url === undefined) {\n      throw new Error(\n        'Required parameter url was null or undefined when calling putResourceFromURL.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (visibility !== undefined && visibility !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>visibility,\n        'visibility'\n      )\n    }\n    if (url !== undefined && url !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>url, 'url')\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataResourceApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/attachments`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Rate a record\n   * User rating of metadata. If the metadata was harvested using the \\&#39;GeoNetwork\\&#39; protocol and the system setting localrating/enable is false (the default), the user\\&#39;s rating is shared between GN nodes in this harvesting network. If the metadata was not harvested or if localrating/enable is true then \\&#39;local rating\\&#39; is applied, counting only rating from users of this node.&lt;br/&gt;When a remote rating is applied, the local rating is not updated. It will be updated on the next harvest run (FIXME ?).\n   * @param metadataUuid Record UUID.\n   * @param body Rating\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public rateRecord(\n    metadataUuid: string,\n    body: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<number>\n  public rateRecord(\n    metadataUuid: string,\n    body: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<number>>\n  public rateRecord(\n    metadataUuid: string,\n    body: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<number>>\n  public rateRecord(\n    metadataUuid: string,\n    body: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling rateRecord.'\n      )\n    }\n    if (body === null || body === undefined) {\n      throw new Error(\n        'Required parameter body was null or undefined when calling rateRecord.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<number>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/rate`,\n      body,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Restore saved content from a status record\n   * @param metadataUuid Record UUID.\n   * @param statusId Status identifier\n   * @param userId User identifier\n   * @param changeDate Change date\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public restoreAtStatusSave(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public restoreAtStatusSave(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public restoreAtStatusSave(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public restoreAtStatusSave(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling restoreAtStatusSave.'\n      )\n    }\n    if (statusId === null || statusId === undefined) {\n      throw new Error(\n        'Required parameter statusId was null or undefined when calling restoreAtStatusSave.'\n      )\n    }\n    if (userId === null || userId === undefined) {\n      throw new Error(\n        'Required parameter userId was null or undefined when calling restoreAtStatusSave.'\n      )\n    }\n    if (changeDate === null || changeDate === undefined) {\n      throw new Error(\n        'Required parameter changeDate was null or undefined when calling restoreAtStatusSave.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/status/${encodeURIComponent(String(statusId))}.${encodeURIComponent(\n        String(userId)\n      )}.${encodeURIComponent(String(changeDate))}/restore`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Save edits\n   * Save the HTML form content.\n   * @param metadataUuid Record UUID.\n   * @param tab Tab\n   * @param withAttributes\n   * @param withValidationErrors\n   * @param minor\n   * @param status Submit for review directly after save.\n   * @param commit Save current edits.\n   * @param terminate Save and terminate session.\n   * @param data Record as XML. TODO: rename xml\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public saveEdits(\n    metadataUuid: string,\n    tab?: string,\n    withAttributes?: boolean,\n    withValidationErrors?: boolean,\n    minor?: boolean,\n    status?: string,\n    commit?: boolean,\n    terminate?: boolean,\n    data?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public saveEdits(\n    metadataUuid: string,\n    tab?: string,\n    withAttributes?: boolean,\n    withValidationErrors?: boolean,\n    minor?: boolean,\n    status?: string,\n    commit?: boolean,\n    terminate?: boolean,\n    data?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public saveEdits(\n    metadataUuid: string,\n    tab?: string,\n    withAttributes?: boolean,\n    withValidationErrors?: boolean,\n    minor?: boolean,\n    status?: string,\n    commit?: boolean,\n    terminate?: boolean,\n    data?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public saveEdits(\n    metadataUuid: string,\n    tab?: string,\n    withAttributes?: boolean,\n    withValidationErrors?: boolean,\n    minor?: boolean,\n    status?: string,\n    commit?: boolean,\n    terminate?: boolean,\n    data?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling saveEdits.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (tab !== undefined && tab !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>tab, 'tab')\n    }\n    if (withAttributes !== undefined && withAttributes !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withAttributes,\n        'withAttributes'\n      )\n    }\n    if (withValidationErrors !== undefined && withValidationErrors !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>withValidationErrors,\n        'withValidationErrors'\n      )\n    }\n    if (minor !== undefined && minor !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>minor,\n        'minor'\n      )\n    }\n    if (status !== undefined && status !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>status,\n        'status'\n      )\n    }\n    if (commit !== undefined && commit !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>commit,\n        'commit'\n      )\n    }\n    if (terminate !== undefined && terminate !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>terminate,\n        'terminate'\n      )\n    }\n    if (data !== undefined && data !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>data, 'data')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/editor`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Create an overview using the map print module\n   * &lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/linking-thumbnail.html#generating-a-thumbnail-using-wms-layers\\&#39;&gt;More info&lt;/a&gt;\n   * @param metadataUuid Record UUID.\n   * @param jsonConfig The mapprint module JSON configuration\n   * @param rotationAngle The rotation angle of the map\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public saveThumbnail(\n    metadataUuid: string,\n    jsonConfig: string,\n    rotationAngle?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataResourceApiModel>\n  public saveThumbnail(\n    metadataUuid: string,\n    jsonConfig: string,\n    rotationAngle?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataResourceApiModel>>\n  public saveThumbnail(\n    metadataUuid: string,\n    jsonConfig: string,\n    rotationAngle?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataResourceApiModel>>\n  public saveThumbnail(\n    metadataUuid: string,\n    jsonConfig: string,\n    rotationAngle?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling saveThumbnail.'\n      )\n    }\n    if (jsonConfig === null || jsonConfig === undefined) {\n      throw new Error(\n        'Required parameter jsonConfig was null or undefined when calling saveThumbnail.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (jsonConfig !== undefined && jsonConfig !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>jsonConfig,\n        'jsonConfig'\n      )\n    }\n    if (rotationAngle !== undefined && rotationAngle !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>rotationAngle,\n        'rotationAngle'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataResourceApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/attachments/print-thumbnail`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Set group and owner for one or more records\n   * @param groupIdentifier Group identifier\n   * @param userIdentifier User identifier\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param approved Use approved version or not\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public setGroupAndOwner(\n    groupIdentifier: number,\n    userIdentifier: number,\n    uuids?: Array<string>,\n    bucket?: string,\n    approved?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public setGroupAndOwner(\n    groupIdentifier: number,\n    userIdentifier: number,\n    uuids?: Array<string>,\n    bucket?: string,\n    approved?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public setGroupAndOwner(\n    groupIdentifier: number,\n    userIdentifier: number,\n    uuids?: Array<string>,\n    bucket?: string,\n    approved?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public setGroupAndOwner(\n    groupIdentifier: number,\n    userIdentifier: number,\n    uuids?: Array<string>,\n    bucket?: string,\n    approved?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (groupIdentifier === null || groupIdentifier === undefined) {\n      throw new Error(\n        'Required parameter groupIdentifier was null or undefined when calling setGroupAndOwner.'\n      )\n    }\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling setGroupAndOwner.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (groupIdentifier !== undefined && groupIdentifier !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>groupIdentifier,\n        'groupIdentifier'\n      )\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (userIdentifier !== undefined && userIdentifier !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>userIdentifier,\n        'userIdentifier'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/ownership`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Set record group\n   * A record is related to one group.\n   * @param metadataUuid Record UUID.\n   * @param body Group identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public setRecordGroup(\n    metadataUuid: string,\n    body: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public setRecordGroup(\n    metadataUuid: string,\n    body: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public setRecordGroup(\n    metadataUuid: string,\n    body: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public setRecordGroup(\n    metadataUuid: string,\n    body: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling setRecordGroup.'\n      )\n    }\n    if (body === null || body === undefined) {\n      throw new Error(\n        'Required parameter body was null or undefined when calling setRecordGroup.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/group`,\n      body,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Set record group and owner\n   * @param metadataUuid Record UUID.\n   * @param groupIdentifier Group identifier\n   * @param userIdentifier User identifier\n   * @param approved Use approved version or not\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public setRecordOwnership(\n    metadataUuid: string,\n    groupIdentifier: number,\n    userIdentifier: number,\n    approved?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public setRecordOwnership(\n    metadataUuid: string,\n    groupIdentifier: number,\n    userIdentifier: number,\n    approved?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public setRecordOwnership(\n    metadataUuid: string,\n    groupIdentifier: number,\n    userIdentifier: number,\n    approved?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public setRecordOwnership(\n    metadataUuid: string,\n    groupIdentifier: number,\n    userIdentifier: number,\n    approved?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling setRecordOwnership.'\n      )\n    }\n    if (groupIdentifier === null || groupIdentifier === undefined) {\n      throw new Error(\n        'Required parameter groupIdentifier was null or undefined when calling setRecordOwnership.'\n      )\n    }\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling setRecordOwnership.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (groupIdentifier !== undefined && groupIdentifier !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>groupIdentifier,\n        'groupIdentifier'\n      )\n    }\n    if (userIdentifier !== undefined && userIdentifier !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>userIdentifier,\n        'userIdentifier'\n      )\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/ownership`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Set sharing settings for one or more records\n   * See record sharing for more details.\n   * @param sharingParameterApiModel Privileges\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public share(\n    sharingParameterApiModel: SharingParameterApiModel,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public share(\n    sharingParameterApiModel: SharingParameterApiModel,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public share(\n    sharingParameterApiModel: SharingParameterApiModel,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public share(\n    sharingParameterApiModel: SharingParameterApiModel,\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (\n      sharingParameterApiModel === null ||\n      sharingParameterApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter sharingParameterApiModel was null or undefined when calling share.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/sharing`,\n      sharingParameterApiModel,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get saved content from the status record after changes\n   * @param metadataUuid Record UUID.\n   * @param statusId Status identifier\n   * @param userId User identifier\n   * @param changeDate Change date\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public showStatusAfter(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<string>\n  public showStatusAfter(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<string>>\n  public showStatusAfter(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<string>>\n  public showStatusAfter(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling showStatusAfter.'\n      )\n    }\n    if (statusId === null || statusId === undefined) {\n      throw new Error(\n        'Required parameter statusId was null or undefined when calling showStatusAfter.'\n      )\n    }\n    if (userId === null || userId === undefined) {\n      throw new Error(\n        'Required parameter userId was null or undefined when calling showStatusAfter.'\n      )\n    }\n    if (changeDate === null || changeDate === undefined) {\n      throw new Error(\n        'Required parameter changeDate was null or undefined when calling showStatusAfter.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/status/${encodeURIComponent(String(statusId))}.${encodeURIComponent(\n        String(userId)\n      )}.${encodeURIComponent(String(changeDate))}/after`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get saved content from the status record before changes\n   * @param metadataUuid Record UUID.\n   * @param statusId Status identifier\n   * @param userId User identifier\n   * @param changeDate Change date\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public showStatusBefore(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<string>\n  public showStatusBefore(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<string>>\n  public showStatusBefore(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<string>>\n  public showStatusBefore(\n    metadataUuid: string,\n    statusId: number,\n    userId: number,\n    changeDate: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling showStatusBefore.'\n      )\n    }\n    if (statusId === null || statusId === undefined) {\n      throw new Error(\n        'Required parameter statusId was null or undefined when calling showStatusBefore.'\n      )\n    }\n    if (userId === null || userId === undefined) {\n      throw new Error(\n        'Required parameter userId was null or undefined when calling showStatusBefore.'\n      )\n    }\n    if (changeDate === null || changeDate === undefined) {\n      throw new Error(\n        'Required parameter changeDate was null or undefined when calling showStatusBefore.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/status/${encodeURIComponent(String(statusId))}.${encodeURIComponent(\n        String(userId)\n      )}.${encodeURIComponent(String(changeDate))}/before`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add tags to a record\n   * @param metadataUuid Record UUID.\n   * @param id Tag identifier\n   * @param clear Clear all before adding new ones\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public tagRecord(\n    metadataUuid: string,\n    id: Array<number>,\n    clear?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public tagRecord(\n    metadataUuid: string,\n    id: Array<number>,\n    clear?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public tagRecord(\n    metadataUuid: string,\n    id: Array<number>,\n    clear?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public tagRecord(\n    metadataUuid: string,\n    id: Array<number>,\n    clear?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling tagRecord.'\n      )\n    }\n    if (id === null || id === undefined) {\n      throw new Error(\n        'Required parameter id was null or undefined when calling tagRecord.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (id) {\n      id.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'id'\n        )\n      })\n    }\n    if (clear !== undefined && clear !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>clear,\n        'clear'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/tags`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add or remove tags to one or more records\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param id Tag identifier\n   * @param removeId Tag identifier to remove.\n   * @param clear Clear all before adding new ones\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public tagRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    id?: Array<number>,\n    removeId?: Array<number>,\n    clear?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public tagRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    id?: Array<number>,\n    removeId?: Array<number>,\n    clear?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public tagRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    id?: Array<number>,\n    removeId?: Array<number>,\n    clear?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public tagRecords(\n    uuids?: Array<string>,\n    bucket?: string,\n    id?: Array<number>,\n    removeId?: Array<number>,\n    clear?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (id) {\n      id.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'id'\n        )\n      })\n    }\n    if (removeId) {\n      removeId.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'removeId'\n        )\n      })\n    }\n    if (clear !== undefined && clear !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>clear,\n        'clear'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/tags`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Trigger MEF backup archive\n   * The backup contains all metadata not harvested including templates.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public trigger(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public trigger(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public trigger(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public trigger(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/records/backups`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Un-publish one or more records\n   * See record sharing for more details.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public unpublish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<MetadataProcessingReportApiModel>\n  public unpublish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<MetadataProcessingReportApiModel>>\n  public unpublish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<MetadataProcessingReportApiModel>>\n  public unpublish(\n    uuids?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<MetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/unpublish`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove a DOI (this is not recommended, DOI are supposed to be persistent once created. This is mainly here for testing).\n   * @param metadataUuid Record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public unregisterDoi(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public unregisterDoi(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public unregisterDoi(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public unregisterDoi(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling unregisterDoi.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/doi`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Validate a record\n   * User MUST be able to edit the record to validate it. FIXME : id MUST be the id of the current metadata record in session ?\n   * @param metadataUuid Record UUID.\n   * @param isvalid Validation status. Should be provided only in case of SUBTEMPLATE validation. If provided for another type, throw a BadParameter Exception\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public validateRecord(\n    metadataUuid: string,\n    isvalid?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<ReportsApiModel>\n  public validateRecord(\n    metadataUuid: string,\n    isvalid?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<ReportsApiModel>>\n  public validateRecord(\n    metadataUuid: string,\n    isvalid?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<ReportsApiModel>>\n  public validateRecord(\n    metadataUuid: string,\n    isvalid?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling validateRecord.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (isvalid !== undefined && isvalid !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isvalid,\n        'isvalid'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<ReportsApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/validate/internal`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Submit a record to the INSPIRE service for validation.\n   * User MUST be able to edit the record to validate it. An INSPIRE endpoint must be configured in Settings. This activates an asyncronous process, this method does not return any report. This method returns an id to be used to get the report.\n   * @param metadataUuid Record UUID.\n   * @param testsuite Test suite to run\n   * @param mode Define the encoding of the record to use. By default, ISO19139 are used as is and ISO19115-3 are converted to ISO19139.If mode &#x3D; csw, a GetRecordById request is used.If mode &#x3D; any portal id, then a GetRecordById request is used on this portal CSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public validateRecordForInspire(\n    metadataUuid: string,\n    testsuite: string,\n    mode?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public validateRecordForInspire(\n    metadataUuid: string,\n    testsuite: string,\n    mode?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public validateRecordForInspire(\n    metadataUuid: string,\n    testsuite: string,\n    mode?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public validateRecordForInspire(\n    metadataUuid: string,\n    testsuite: string,\n    mode?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling validateRecordForInspire.'\n      )\n    }\n    if (testsuite === null || testsuite === undefined) {\n      throw new Error(\n        'Required parameter testsuite was null or undefined when calling validateRecordForInspire.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (testsuite !== undefined && testsuite !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>testsuite,\n        'testsuite'\n      )\n    }\n    if (mode !== undefined && mode !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>mode, 'mode')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/validate/inspire`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Validate one or more records\n   * Update validation status for all records.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param approved Use approved version or not\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public validateRecords(\n    uuids?: Array<string>,\n    approved?: boolean,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public validateRecords(\n    uuids?: Array<string>,\n    approved?: boolean,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public validateRecords(\n    uuids?: Array<string>,\n    approved?: boolean,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public validateRecords(\n    uuids?: Array<string>,\n    approved?: boolean,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (approved !== undefined && approved !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>approved,\n        'approved'\n      )\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/records/validate`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Validate one or more records in INSPIRE validator\n   * Update validation status for all records.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param mode Define the encoding of the record to use. By default, ISO19139 are used as is and ISO19115-3 are converted to ISO19139.If mode &#x3D; csw, a GetRecordById request is used.If mode &#x3D; any portal id, then a GetRecordById request is used on this portal CSW entry point which may define custom CSW post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public validateRecordsInspire(\n    uuids?: Array<string>,\n    bucket?: string,\n    mode?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public validateRecordsInspire(\n    uuids?: Array<string>,\n    bucket?: string,\n    mode?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public validateRecordsInspire(\n    uuids?: Array<string>,\n    bucket?: string,\n    mode?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public validateRecordsInspire(\n    uuids?: Array<string>,\n    bucket?: string,\n    mode?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (mode !== undefined && mode !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>mode, 'mode')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/records/validate/inspire`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { CategoryApiModel } from '../model/models'\nimport { ListRegionsResponseApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegionsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get list of region types\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRegionTypes(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<CategoryApiModel>>\n  public getRegionTypes(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<CategoryApiModel>>>\n  public getRegionTypes(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<CategoryApiModel>>>\n  public getRegionTypes(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<CategoryApiModel>>(\n      `${this.configuration.basePath}/regions/types`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of regions\n   * @param label\n   * @param categoryId\n   * @param maxRecords\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRegions(\n    label?: string,\n    categoryId?: string,\n    maxRecords?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<ListRegionsResponseApiModel>\n  public getRegions(\n    label?: string,\n    categoryId?: string,\n    maxRecords?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<ListRegionsResponseApiModel>>\n  public getRegions(\n    label?: string,\n    categoryId?: string,\n    maxRecords?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<ListRegionsResponseApiModel>>\n  public getRegions(\n    label?: string,\n    categoryId?: string,\n    maxRecords?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (label !== undefined && label !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>label,\n        'label'\n      )\n    }\n    if (categoryId !== undefined && categoryId !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>categoryId,\n        'categoryId'\n      )\n    }\n    if (maxRecords !== undefined && maxRecords !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>maxRecords,\n        'maxRecords'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<ListRegionsResponseApiModel>(\n      `${this.configuration.basePath}/regions`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { CrsApiModel } from '../model/models'\nimport { ElementApiModel } from '../model/models'\nimport { InlineObject2ApiModel } from '../model/models'\nimport { InlineObject3ApiModel } from '../model/models'\nimport { KeywordBeanApiModel } from '../model/models'\nimport { SimpleMetadataProcessingReportApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistriesApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  /**\n   * @param consumes string[] mime-types\n   * @return true: consumes contains 'multipart/form-data', false: otherwise\n   */\n  private canConsumeForm(consumes: string[]): boolean {\n    const form = 'multipart/form-data'\n    for (const consume of consumes) {\n      if (form === consume) {\n        return true\n      }\n    }\n    return false\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Delete a thesaurus by name\n   * Delete a thesaurus.\n   * @param thesaurus Thesaurus to delete.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteThesaurus(\n    thesaurus: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteThesaurus(\n    thesaurus: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteThesaurus(\n    thesaurus: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteThesaurus(\n    thesaurus: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (thesaurus === null || thesaurus === undefined) {\n      throw new Error(\n        'Required parameter thesaurus was null or undefined when calling deleteThesaurus.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${\n        this.configuration.basePath\n      }/registries/vocabularies/${encodeURIComponent(String(thesaurus))}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get CRS\n   * @param id CRS identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCrs(\n    id: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<CrsApiModel>\n  public getCrs(\n    id: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<CrsApiModel>>\n  public getCrs(\n    id: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<CrsApiModel>>\n  public getCrs(\n    id: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error(\n        'Required parameter id was null or undefined when calling getCrs.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<CrsApiModel>(\n      `${this.configuration.basePath}/registries/crs/${encodeURIComponent(\n        String(id)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of CRS type\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCrsTypes(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<string>>\n  public getCrsTypes(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<string>>>\n  public getCrsTypes(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<string>>>\n  public getCrsTypes(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<string>>(\n      `${this.configuration.basePath}/registries/crs/types`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a directory entry\n   * Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records using XLinks. XLinks can be remote or local.\n   * @param uuid Directory entry UUID.\n   * @param process Process\n   * @param transformation Transformation\n   * @param lang lang\n   * @param schema schema\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getEntry(\n    uuid: string,\n    process?: Array<string>,\n    transformation?: string,\n    lang?: Array<string>,\n    schema?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<ElementApiModel>\n  public getEntry(\n    uuid: string,\n    process?: Array<string>,\n    transformation?: string,\n    lang?: Array<string>,\n    schema?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<ElementApiModel>>\n  public getEntry(\n    uuid: string,\n    process?: Array<string>,\n    transformation?: string,\n    lang?: Array<string>,\n    schema?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<ElementApiModel>>\n  public getEntry(\n    uuid: string,\n    process?: Array<string>,\n    transformation?: string,\n    lang?: Array<string>,\n    schema?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (uuid === null || uuid === undefined) {\n      throw new Error(\n        'Required parameter uuid was null or undefined when calling getEntry.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (process) {\n      process.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'process'\n        )\n      })\n    }\n    if (transformation !== undefined && transformation !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>transformation,\n        'transformation'\n      )\n    }\n    if (lang) {\n      lang.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'lang'\n        )\n      })\n    }\n    if (schema !== undefined && schema !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>schema,\n        'schema'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<ElementApiModel>(\n      `${this.configuration.basePath}/registries/entries/${encodeURIComponent(\n        String(uuid)\n      )}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get keyword by id\n   * Retrieve XML representation of keyword(s) from same thesaurususing different transformations. \\&#39;to-iso19139-keyword\\&#39; is the default and return an ISO19139 snippet.\\&#39;to-iso19139-keyword-as-xlink\\&#39; return an XLinked element. Custom transformation can be create on a per schema basis.\n   * @param id Keyword identifier or list of keyword identifiers comma separated.\n   * @param thesaurus Thesaurus to look info for the keyword(s).\n   * @param lang Languages.\n   * @param keywordOnly Only print the keyword, no thesaurus information.\n   * @param transformation XSL template to use (ISO19139 keyword by default, see convert.xsl).\n   * @param langMap langMap, that converts the values in the \\&#39;lang\\&#39; parameter to how they will be actually represented in the record. {\\&#39;fre\\&#39;:\\&#39;fra\\&#39;} or {\\&#39;fre\\&#39;:\\&#39;fr\\&#39;}.  Missing/empty means to convert to iso 2 letter.\n   * @param accept\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getKeywordById(\n    id: string,\n    thesaurus: string,\n    lang?: Array<string>,\n    keywordOnly?: boolean,\n    transformation?: string,\n    langMap?: string,\n    accept?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<object>\n  public getKeywordById(\n    id: string,\n    thesaurus: string,\n    lang?: Array<string>,\n    keywordOnly?: boolean,\n    transformation?: string,\n    langMap?: string,\n    accept?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<object>>\n  public getKeywordById(\n    id: string,\n    thesaurus: string,\n    lang?: Array<string>,\n    keywordOnly?: boolean,\n    transformation?: string,\n    langMap?: string,\n    accept?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<object>>\n  public getKeywordById(\n    id: string,\n    thesaurus: string,\n    lang?: Array<string>,\n    keywordOnly?: boolean,\n    transformation?: string,\n    langMap?: string,\n    accept?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error(\n        'Required parameter id was null or undefined when calling getKeywordById.'\n      )\n    }\n    if (thesaurus === null || thesaurus === undefined) {\n      throw new Error(\n        'Required parameter thesaurus was null or undefined when calling getKeywordById.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (id !== undefined && id !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>id, 'id')\n    }\n    if (thesaurus !== undefined && thesaurus !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>thesaurus,\n        'thesaurus'\n      )\n    }\n    if (lang) {\n      lang.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'lang'\n        )\n      })\n    }\n    if (keywordOnly !== undefined && keywordOnly !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>keywordOnly,\n        'keywordOnly'\n      )\n    }\n    if (transformation !== undefined && transformation !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>transformation,\n        'transformation'\n      )\n    }\n    if (langMap !== undefined && langMap !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>langMap,\n        'langMap'\n      )\n    }\n\n    let headers = this.defaultHeaders\n    if (accept !== undefined && accept !== null) {\n      headers = headers.set('Accept', String(accept))\n    }\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<object>(\n      `${this.configuration.basePath}/registries/vocabularies/keyword`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Download a thesaurus by name\n   * Download the thesaurus in SKOS format.\n   * @param thesaurus Thesaurus to download.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getThesaurus(\n    thesaurus: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getThesaurus(\n    thesaurus: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getThesaurus(\n    thesaurus: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getThesaurus(\n    thesaurus: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (thesaurus === null || thesaurus === undefined) {\n      throw new Error(\n        'Required parameter thesaurus was null or undefined when calling getThesaurus.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${\n        this.configuration.basePath\n      }/registries/vocabularies/${encodeURIComponent(String(thesaurus))}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Uploads a CSV file and convert it to SKOS format\n   * CSV file MUST contains columns at least for concept id and label. For multilingual thesaurus, consider using columns like label, label_fre, label_ita with languages parameter set to [en, fr, it]. Default language value is used if translations are empty. The thesaurus filename will be the filename of the CSV file (with .rdf extension). It is recommended to set the thesaurus title and namespace URL even if default values will be used based on the filename. Thesaurus dates are set to the date of import.\n   * @param type Local or external (default).\n   * @param dir Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.\n   * @param encoding Encoding. Default is UTF-8.\n   * @param thesaurusNs Thesaurus namespace. Default is filename.\n   * @param languages Thesaurus languages\n   * @param thesaurusTitle Thesaurus title. Default is filename.\n   * @param conceptIdColumn Column name for concept id. Default is id.\n   * @param conceptLabelColumn Column name for concept label. Default is label.\n   * @param conceptDescriptionColumn Column name for concept description. Default is description.\n   * @param conceptBroaderIdColumn Column name for broader concept id. Default is broader.\n   * @param conceptNarrowerIdColumn Column name for narrower concept id. Default is narrower.\n   * @param conceptRelatedIdColumn Column name for related concept id. Default is related.\n   * @param conceptLinkSeparator Separator used when multiple broader/narrower/related ids are in the same column. Default is \\&#39;|\\&#39;.\n   * @param importAsThesaurus Import CSV file as thesaurus if true (detault) or return it in  SKOS format.\n   * @param inlineObject3ApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public importCsvAsThesaurus(\n    type?: string,\n    dir?: string,\n    encoding?: string,\n    thesaurusNs?: string,\n    languages?: Array<string>,\n    thesaurusTitle?: string,\n    conceptIdColumn?: string,\n    conceptLabelColumn?: string,\n    conceptDescriptionColumn?: string,\n    conceptBroaderIdColumn?: string,\n    conceptNarrowerIdColumn?: string,\n    conceptRelatedIdColumn?: string,\n    conceptLinkSeparator?: string,\n    importAsThesaurus?: boolean,\n    inlineObject3ApiModel?: InlineObject3ApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public importCsvAsThesaurus(\n    type?: string,\n    dir?: string,\n    encoding?: string,\n    thesaurusNs?: string,\n    languages?: Array<string>,\n    thesaurusTitle?: string,\n    conceptIdColumn?: string,\n    conceptLabelColumn?: string,\n    conceptDescriptionColumn?: string,\n    conceptBroaderIdColumn?: string,\n    conceptNarrowerIdColumn?: string,\n    conceptRelatedIdColumn?: string,\n    conceptLinkSeparator?: string,\n    importAsThesaurus?: boolean,\n    inlineObject3ApiModel?: InlineObject3ApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public importCsvAsThesaurus(\n    type?: string,\n    dir?: string,\n    encoding?: string,\n    thesaurusNs?: string,\n    languages?: Array<string>,\n    thesaurusTitle?: string,\n    conceptIdColumn?: string,\n    conceptLabelColumn?: string,\n    conceptDescriptionColumn?: string,\n    conceptBroaderIdColumn?: string,\n    conceptNarrowerIdColumn?: string,\n    conceptRelatedIdColumn?: string,\n    conceptLinkSeparator?: string,\n    importAsThesaurus?: boolean,\n    inlineObject3ApiModel?: InlineObject3ApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public importCsvAsThesaurus(\n    type?: string,\n    dir?: string,\n    encoding?: string,\n    thesaurusNs?: string,\n    languages?: Array<string>,\n    thesaurusTitle?: string,\n    conceptIdColumn?: string,\n    conceptLabelColumn?: string,\n    conceptDescriptionColumn?: string,\n    conceptBroaderIdColumn?: string,\n    conceptNarrowerIdColumn?: string,\n    conceptRelatedIdColumn?: string,\n    conceptLinkSeparator?: string,\n    importAsThesaurus?: boolean,\n    inlineObject3ApiModel?: InlineObject3ApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n    if (dir !== undefined && dir !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>dir, 'dir')\n    }\n    if (encoding !== undefined && encoding !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>encoding,\n        'encoding'\n      )\n    }\n    if (thesaurusNs !== undefined && thesaurusNs !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>thesaurusNs,\n        'thesaurusNs'\n      )\n    }\n    if (languages) {\n      languages.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'languages'\n        )\n      })\n    }\n    if (thesaurusTitle !== undefined && thesaurusTitle !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>thesaurusTitle,\n        'thesaurusTitle'\n      )\n    }\n    if (conceptIdColumn !== undefined && conceptIdColumn !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptIdColumn,\n        'conceptIdColumn'\n      )\n    }\n    if (conceptLabelColumn !== undefined && conceptLabelColumn !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptLabelColumn,\n        'conceptLabelColumn'\n      )\n    }\n    if (\n      conceptDescriptionColumn !== undefined &&\n      conceptDescriptionColumn !== null\n    ) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptDescriptionColumn,\n        'conceptDescriptionColumn'\n      )\n    }\n    if (\n      conceptBroaderIdColumn !== undefined &&\n      conceptBroaderIdColumn !== null\n    ) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptBroaderIdColumn,\n        'conceptBroaderIdColumn'\n      )\n    }\n    if (\n      conceptNarrowerIdColumn !== undefined &&\n      conceptNarrowerIdColumn !== null\n    ) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptNarrowerIdColumn,\n        'conceptNarrowerIdColumn'\n      )\n    }\n    if (\n      conceptRelatedIdColumn !== undefined &&\n      conceptRelatedIdColumn !== null\n    ) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptRelatedIdColumn,\n        'conceptRelatedIdColumn'\n      )\n    }\n    if (conceptLinkSeparator !== undefined && conceptLinkSeparator !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>conceptLinkSeparator,\n        'conceptLinkSeparator'\n      )\n    }\n    if (importAsThesaurus !== undefined && importAsThesaurus !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>importAsThesaurus,\n        'importAsThesaurus'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<any>(\n      `${this.configuration.basePath}/registries/vocabularies/import/csv`,\n      inlineObject3ApiModel,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Import spatial directory entries\n   * Directory entry (AKA subtemplates) are XML fragments that can be inserted in metadata records. Use this service to import geographic extent entries from an ESRI Shapefile format.\n   * @param uuidAttribute Attribute to use for UUID. If none, random UUID are generated.\n   * @param uuidPattern Pattern to build UUID from. Default is \\&#39;{{uuid}}\\&#39;.\n   * @param descriptionAttribute Attribute to use for extent description. If none, no extent description defined. TODO: Add per language desc ?\n   * @param geomProjectionTo geomProjectionTo\n   * @param lenient lenient\n   * @param onlyBoundingBox Create only bounding box for each spatial objects.\n   * @param process Process\n   * @param schema Schema identifier\n   * @param uuidProcessing Record identifier processing.\n   * @param group The group the record is attached to.\n   * @param file\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public importSpatialEntries(\n    uuidAttribute?: string,\n    uuidPattern?: string,\n    descriptionAttribute?: string,\n    geomProjectionTo?: string,\n    lenient?: boolean,\n    onlyBoundingBox?: boolean,\n    process?: string,\n    schema?: string,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: number,\n    file?: Blob,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SimpleMetadataProcessingReportApiModel>\n  public importSpatialEntries(\n    uuidAttribute?: string,\n    uuidPattern?: string,\n    descriptionAttribute?: string,\n    geomProjectionTo?: string,\n    lenient?: boolean,\n    onlyBoundingBox?: boolean,\n    process?: string,\n    schema?: string,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: number,\n    file?: Blob,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SimpleMetadataProcessingReportApiModel>>\n  public importSpatialEntries(\n    uuidAttribute?: string,\n    uuidPattern?: string,\n    descriptionAttribute?: string,\n    geomProjectionTo?: string,\n    lenient?: boolean,\n    onlyBoundingBox?: boolean,\n    process?: string,\n    schema?: string,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: number,\n    file?: Blob,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SimpleMetadataProcessingReportApiModel>>\n  public importSpatialEntries(\n    uuidAttribute?: string,\n    uuidPattern?: string,\n    descriptionAttribute?: string,\n    geomProjectionTo?: string,\n    lenient?: boolean,\n    onlyBoundingBox?: boolean,\n    process?: string,\n    schema?: string,\n    uuidProcessing?: 'GENERATEUUID' | 'NOTHING' | 'OVERWRITE',\n    group?: number,\n    file?: Blob,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuidAttribute !== undefined && uuidAttribute !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>uuidAttribute,\n        'uuidAttribute'\n      )\n    }\n    if (uuidPattern !== undefined && uuidPattern !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>uuidPattern,\n        'uuidPattern'\n      )\n    }\n    if (descriptionAttribute !== undefined && descriptionAttribute !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>descriptionAttribute,\n        'descriptionAttribute'\n      )\n    }\n    if (geomProjectionTo !== undefined && geomProjectionTo !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>geomProjectionTo,\n        'geomProjectionTo'\n      )\n    }\n    if (lenient !== undefined && lenient !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>lenient,\n        'lenient'\n      )\n    }\n    if (onlyBoundingBox !== undefined && onlyBoundingBox !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>onlyBoundingBox,\n        'onlyBoundingBox'\n      )\n    }\n    if (process !== undefined && process !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>process,\n        'process'\n      )\n    }\n    if (schema !== undefined && schema !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>schema,\n        'schema'\n      )\n    }\n    if (uuidProcessing !== undefined && uuidProcessing !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>uuidProcessing,\n        'uuidProcessing'\n      )\n    }\n    if (group !== undefined && group !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>group,\n        'group'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['multipart/form-data']\n\n    const canConsumeForm = this.canConsumeForm(consumes)\n\n    let formParams: { append(param: string, value: any): any }\n    let useForm = false\n    let convertFormParamsToString = false\n    // use FormData to transmit files using content-type \"multipart/form-data\"\n    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data\n    useForm = canConsumeForm\n    if (useForm) {\n      formParams = new FormData()\n    } else {\n      formParams = new HttpParams({ encoder: this.encoder })\n    }\n\n    if (file !== undefined) {\n      formParams = (formParams.append('file', <any>file) as any) || formParams\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<SimpleMetadataProcessingReportApiModel>(\n      `${this.configuration.basePath}/registries/actions/entries/import/spatial`,\n      convertFormParamsToString ? formParams.toString() : formParams,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Preview updated matching entries in records\n   * Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally properties are preserved.&lt;br/&gt;&lt;br/&gt;The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).\n   * @param xpath XPath of the elements to extract as entry.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param identifierXpath XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.\n   * @param propertiesToCopy List of XPath of properties to copy from record to matching entry.\n   * @param substituteAsXLink Replace entry by XLink.\n   * @param fq Filter query for directory search.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public previewUpdatedRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<object>\n  public previewUpdatedRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<object>>\n  public previewUpdatedRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<object>>\n  public previewUpdatedRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (xpath === null || xpath === undefined) {\n      throw new Error(\n        'Required parameter xpath was null or undefined when calling previewUpdatedRecordEntries.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (xpath !== undefined && xpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>xpath,\n        'xpath'\n      )\n    }\n    if (identifierXpath !== undefined && identifierXpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>identifierXpath,\n        'identifierXpath'\n      )\n    }\n    if (propertiesToCopy) {\n      propertiesToCopy.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'propertiesToCopy'\n        )\n      })\n    }\n    if (substituteAsXLink !== undefined && substituteAsXLink !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>substituteAsXLink,\n        'substituteAsXLink'\n      )\n    }\n    if (fq !== undefined && fq !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>fq, 'fq')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<object>(\n      `${this.configuration.basePath}/registries/actions/entries/synchronize`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Search coordinate reference system (CRS)\n   * Based on GeoTools EPSG database. If phrase query, each words are searched separately.\n   * @param q Search value\n   * @param type Type of CRS\n   * @param rows Number of results. Default is: 100\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public searchCrs(\n    q?: string,\n    type?:\n      | 'CoordinateReferenceSystem'\n      | 'VerticalCRS'\n      | 'GeographicCRS'\n      | 'ProjectedCRS',\n    rows?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<CrsApiModel>>\n  public searchCrs(\n    q?: string,\n    type?:\n      | 'CoordinateReferenceSystem'\n      | 'VerticalCRS'\n      | 'GeographicCRS'\n      | 'ProjectedCRS',\n    rows?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<CrsApiModel>>>\n  public searchCrs(\n    q?: string,\n    type?:\n      | 'CoordinateReferenceSystem'\n      | 'VerticalCRS'\n      | 'GeographicCRS'\n      | 'ProjectedCRS',\n    rows?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<CrsApiModel>>>\n  public searchCrs(\n    q?: string,\n    type?:\n      | 'CoordinateReferenceSystem'\n      | 'VerticalCRS'\n      | 'GeographicCRS'\n      | 'ProjectedCRS',\n    rows?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (q !== undefined && q !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>q, 'q')\n    }\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n    if (rows !== undefined && rows !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>rows, 'rows')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<CrsApiModel>>(\n      `${this.configuration.basePath}/registries/crs`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Search keywords\n   * @param q Query\n   * @param lang Query in that language\n   * @param rows Number of rows\n   * @param start Start from\n   * @param pLang Return keyword information in one or more languages\n   * @param thesaurus Thesaurus identifier\n   * @param type Type of search\n   * @param uri URI query\n   * @param sort Sort by\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public searchKeywords(\n    q?: string,\n    lang?: string,\n    rows?: number,\n    start?: number,\n    pLang?: Array<string>,\n    thesaurus?: Array<string>,\n    type?: 'STARTS_WITH' | 'CONTAINS' | 'MATCH',\n    uri?: string,\n    sort?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<KeywordBeanApiModel>>\n  public searchKeywords(\n    q?: string,\n    lang?: string,\n    rows?: number,\n    start?: number,\n    pLang?: Array<string>,\n    thesaurus?: Array<string>,\n    type?: 'STARTS_WITH' | 'CONTAINS' | 'MATCH',\n    uri?: string,\n    sort?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<KeywordBeanApiModel>>>\n  public searchKeywords(\n    q?: string,\n    lang?: string,\n    rows?: number,\n    start?: number,\n    pLang?: Array<string>,\n    thesaurus?: Array<string>,\n    type?: 'STARTS_WITH' | 'CONTAINS' | 'MATCH',\n    uri?: string,\n    sort?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<KeywordBeanApiModel>>>\n  public searchKeywords(\n    q?: string,\n    lang?: string,\n    rows?: number,\n    start?: number,\n    pLang?: Array<string>,\n    thesaurus?: Array<string>,\n    type?: 'STARTS_WITH' | 'CONTAINS' | 'MATCH',\n    uri?: string,\n    sort?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (q !== undefined && q !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>q, 'q')\n    }\n    if (lang !== undefined && lang !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>lang, 'lang')\n    }\n    if (rows !== undefined && rows !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>rows, 'rows')\n    }\n    if (start !== undefined && start !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>start,\n        'start'\n      )\n    }\n    if (pLang) {\n      pLang.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'pLang'\n        )\n      })\n    }\n    if (thesaurus) {\n      thesaurus.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'thesaurus'\n        )\n      })\n    }\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n    if (uri !== undefined && uri !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>uri, 'uri')\n    }\n    if (sort !== undefined && sort !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>sort, 'sort')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<KeywordBeanApiModel>>(\n      `${this.configuration.basePath}/registries/vocabularies/search`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update matching entries in records\n   * Scan one or more records for element matching the XPath provided and then check if this element is available in the directory. If Found, the element from the directory update the element in the record and optionally properties are preserved.&lt;br/&gt;&lt;br/&gt;The identifier XPath is used to find a match. An optional filtercan be added to restrict search to a subset of the directory. If no identifier XPaths is provided, the UUID is based on the content of the snippet (hash). It is recommended to use an identifier for better matching (eg. ISO19139 contact with different roles will not match on the automatic UUID mode).\n   * @param xpath XPath of the elements to extract as entry.\n   * @param uuids Record UUIDs. If null current selection is used.\n   * @param bucket Selection bucket name\n   * @param identifierXpath XPath of the element identifier. If not defined a random UUID is generated and analysis will not check for duplicates.\n   * @param propertiesToCopy List of XPath of properties to copy from record to matching entry.\n   * @param substituteAsXLink Replace entry by XLink.\n   * @param fq Filter query for directory search.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<object>\n  public updateRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<object>>\n  public updateRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<object>>\n  public updateRecordEntries(\n    xpath: string,\n    uuids?: Array<string>,\n    bucket?: string,\n    identifierXpath?: string,\n    propertiesToCopy?: Array<string>,\n    substituteAsXLink?: boolean,\n    fq?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (xpath === null || xpath === undefined) {\n      throw new Error(\n        'Required parameter xpath was null or undefined when calling updateRecordEntries.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuids) {\n      uuids.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuids'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n    if (xpath !== undefined && xpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>xpath,\n        'xpath'\n      )\n    }\n    if (identifierXpath !== undefined && identifierXpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>identifierXpath,\n        'identifierXpath'\n      )\n    }\n    if (propertiesToCopy) {\n      propertiesToCopy.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'propertiesToCopy'\n        )\n      })\n    }\n    if (substituteAsXLink !== undefined && substituteAsXLink !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>substituteAsXLink,\n        'substituteAsXLink'\n      )\n    }\n    if (fq !== undefined && fq !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>fq, 'fq')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<object>(\n      `${this.configuration.basePath}/registries/actions/entries/synchronize`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Uploads a new thesaurus from a file\n   * Uploads a new thesaurus.\n   * @param type Local or external (default).\n   * @param dir Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.\n   * @param stylesheet XSL to be use to convert the thesaurus before load. Default _none_.\n   * @param inlineObject2ApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public uploadThesaurus(\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    inlineObject2ApiModel?: InlineObject2ApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<string>\n  public uploadThesaurus(\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    inlineObject2ApiModel?: InlineObject2ApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<HttpResponse<string>>\n  public uploadThesaurus(\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    inlineObject2ApiModel?: InlineObject2ApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<HttpEvent<string>>\n  public uploadThesaurus(\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    inlineObject2ApiModel?: InlineObject2ApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n    if (dir !== undefined && dir !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>dir, 'dir')\n    }\n    if (stylesheet !== undefined && stylesheet !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>stylesheet,\n        'stylesheet'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/xml']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/registries/vocabularies`,\n      inlineObject2ApiModel,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Uploads a new thesaurus from URL or Registry\n   * Uploads a new thesaurus.\n   * @param url If set, try to download from the Internet.\n   * @param registryUrl If set, try to download from a registry.\n   * @param registryType If using registryUrl, then define the type of registry. If not set, default mode is re3gistry.\n   * @param registryLanguage Languages to download from a registry.\n   * @param type Local or external (default).\n   * @param dir Type of thesaurus, usually one of the ISO thesaurus type codelist value. Default is theme.\n   * @param stylesheet XSL to be use to convert the thesaurus before load. Default _none_.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public uploadThesaurusFromUrl(\n    url?: string,\n    registryUrl?: string,\n    registryType?: 're3gistry' | 'ldRegistry',\n    registryLanguage?: Array<string>,\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<string>\n  public uploadThesaurusFromUrl(\n    url?: string,\n    registryUrl?: string,\n    registryType?: 're3gistry' | 'ldRegistry',\n    registryLanguage?: Array<string>,\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<HttpResponse<string>>\n  public uploadThesaurusFromUrl(\n    url?: string,\n    registryUrl?: string,\n    registryType?: 're3gistry' | 'ldRegistry',\n    registryLanguage?: Array<string>,\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<HttpEvent<string>>\n  public uploadThesaurusFromUrl(\n    url?: string,\n    registryUrl?: string,\n    registryType?: 're3gistry' | 'ldRegistry',\n    registryLanguage?: Array<string>,\n    type?: string,\n    dir?: string,\n    stylesheet?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/xml' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (url !== undefined && url !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>url, 'url')\n    }\n    if (registryUrl !== undefined && registryUrl !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>registryUrl,\n        'registryUrl'\n      )\n    }\n    if (registryType !== undefined && registryType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>registryType,\n        'registryType'\n      )\n    }\n    if (registryLanguage) {\n      registryLanguage.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'registryLanguage'\n        )\n      })\n    }\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n    if (dir !== undefined && dir !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>dir, 'dir')\n    }\n    if (stylesheet !== undefined && stylesheet !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>stylesheet,\n        'stylesheet'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/xml']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/registries/vocabularies`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { RelatedResponseApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RelatedApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get record related resources for all requested metadatas\n   * Retrieve related services, datasets, onlines, thumbnails, sources, ... to all requested records.&lt;br/&gt;&lt;a href&#x3D;\\&#39;http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html\\&#39;&gt;More info&lt;/a&gt;\n   * @param type Type of related resource. If none, all resources are returned.\n   * @param uuid Uuids of the metadatas you request the relations from.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAssociatedResourcesForRecords(\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    uuid?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<{ [key: string]: RelatedResponseApiModel }>\n  public getAssociatedResourcesForRecords(\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    uuid?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<{ [key: string]: RelatedResponseApiModel }>>\n  public getAssociatedResourcesForRecords(\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    uuid?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<{ [key: string]: RelatedResponseApiModel }>>\n  public getAssociatedResourcesForRecords(\n    type?: Array<\n      | 'children'\n      | 'parent'\n      | 'brothersAndSisters'\n      | 'siblings'\n      | 'associated'\n      | 'services'\n      | 'datasets'\n      | 'fcats'\n      | 'hasfeaturecats'\n      | 'sources'\n      | 'hassources'\n      | 'related'\n      | 'onlines'\n      | 'thumbnails'\n    >,\n    uuid?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type) {\n      type.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'type'\n        )\n      })\n    }\n    if (uuid) {\n      uuid.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuid'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: RelatedResponseApiModel }>(\n      `${this.configuration.basePath}/related`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Search endpoint\n   * See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html for search parameters details.\n   * @param bucket\n   * @param body JSON request based on Elasticsearch API.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public search(\n    bucket?: string,\n    body?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public search(\n    bucket?: string,\n    body?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public search(\n    bucket?: string,\n    body?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public search(\n    bucket?: string,\n    body?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<any>(\n      `${this.configuration.basePath}/search/records/_search`,\n      body,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectionsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Select one or more items\n   * @param bucket Bucket name\n   * @param uuid One or more record UUIDs. If null, select all in current search if bucket name is \\&#39;metadata\\&#39; (TODO: remove this limitation?).\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public add(\n    bucket: string,\n    uuid?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<number>\n  public add(\n    bucket: string,\n    uuid?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<number>>\n  public add(\n    bucket: string,\n    uuid?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<number>>\n  public add(\n    bucket: string,\n    uuid?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (bucket === null || bucket === undefined) {\n      throw new Error(\n        'Required parameter bucket was null or undefined when calling add.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuid) {\n      uuid.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuid'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<number>(\n      `${this.configuration.basePath}/selections/${encodeURIComponent(\n        String(bucket)\n      )}`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Clear selection or remove items\n   * @param bucket Selection bucket name\n   * @param uuid One or more record UUIDs\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public clear(\n    bucket: string,\n    uuid?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<number>\n  public clear(\n    bucket: string,\n    uuid?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<number>>\n  public clear(\n    bucket: string,\n    uuid?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<number>>\n  public clear(\n    bucket: string,\n    uuid?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (bucket === null || bucket === undefined) {\n      throw new Error(\n        'Required parameter bucket was null or undefined when calling clear.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuid) {\n      uuid.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuid'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<number>(\n      `${this.configuration.basePath}/selections/${encodeURIComponent(\n        String(bucket)\n      )}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get current selection\n   * @param bucket Bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public get(\n    bucket: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Set<string>>\n  public get(\n    bucket: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Set<string>>>\n  public get(\n    bucket: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Set<string>>>\n  public get(\n    bucket: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (bucket === null || bucket === undefined) {\n      throw new Error(\n        'Required parameter bucket was null or undefined when calling get.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Set<string>>(\n      `${this.configuration.basePath}/selections/${encodeURIComponent(\n        String(bucket)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { ElementApiModel } from '../model/models'\nimport { LogFileResponseApiModel } from '../model/models'\nimport { SettingApiModel } from '../model/models'\nimport { SettingsListResponseApiModel } from '../model/models'\nimport { SiteInformationApiModel } from '../model/models'\nimport { StatusApiModel } from '../model/models'\nimport { SystemInfoApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SiteApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get site informations\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getInformation(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SiteInformationApiModel>\n  public getInformation(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SiteInformationApiModel>>\n  public getInformation(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SiteInformationApiModel>>\n  public getInformation(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<SiteInformationApiModel>(\n      `${this.configuration.basePath}/site/info`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get last activity\n   * @param lines Number of lines to return\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getLastActivity(\n    lines?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public getLastActivity(\n    lines?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public getLastActivity(\n    lines?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public getLastActivity(\n    lines?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (lines !== undefined && lines !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>lines,\n        'lines'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/site/logging/activity`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get last activity in a ZIP\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getLastActivityInAZip(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getLastActivityInAZip(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getLastActivityInAZip(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getLastActivityInAZip(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/site/logging/activity/zip`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get log files\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getLogFiles(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<LogFileResponseApiModel>>\n  public getLogFiles(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<LogFileResponseApiModel>>>\n  public getLogFiles(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<LogFileResponseApiModel>>>\n  public getLogFiles(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<LogFileResponseApiModel>>(\n      `${this.configuration.basePath}/site/logging`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * robots.txt\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRobotsText(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public getRobotsText(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public getRobotsText(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public getRobotsText(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/robots.txt`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get settings with details\n   * Provides also setting properties.\n   * @param set Setting set. A common set of settings to retrieve.\n   * @param key Setting key\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSettingsDetails(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<SettingApiModel>>\n  public getSettingsDetails(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<SettingApiModel>>>\n  public getSettingsDetails(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<SettingApiModel>>>\n  public getSettingsDetails(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (set) {\n      set.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'set'\n        )\n      })\n    }\n    if (key) {\n      key.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'key'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<SettingApiModel>>(\n      `${this.configuration.basePath}/site/settings/details`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get settings\n   * Return public settings for anonymous users, internals are allowed for authenticated.\n   * @param set Setting set. A common set of settings to retrieve.\n   * @param key Setting key\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSettingsSet(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SettingsListResponseApiModel>\n  public getSettingsSet(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SettingsListResponseApiModel>>\n  public getSettingsSet(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SettingsListResponseApiModel>>\n  public getSettingsSet(\n    set?: Array<\n      | 'INSPIRE'\n      | 'CSW'\n      | 'HARVESTER'\n      | 'USER_GROUP_ONLY'\n      | 'AUTH'\n      | 'READ_ONLY'\n      | 'INDEX'\n      | 'SYSTEMINFO'\n      | 'STAGING_PROFILE'\n      | 'TYPE'\n    >,\n    key?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (set) {\n      set.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'set'\n        )\n      })\n    }\n    if (key) {\n      key.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'key'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<SettingsListResponseApiModel>(\n      `${this.configuration.basePath}/site/settings`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get site (or portal) description\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSiteOrPortalDescription(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SettingsListResponseApiModel>\n  public getSiteOrPortalDescription(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SettingsListResponseApiModel>>\n  public getSiteOrPortalDescription(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SettingsListResponseApiModel>>\n  public getSiteOrPortalDescription(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<SettingsListResponseApiModel>(\n      `${this.configuration.basePath}/site`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get sitemap\n   * @param format Format (xml or html).\n   * @param doc page.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSitemap(\n    format?: string,\n    doc?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<ElementApiModel>\n  public getSitemap(\n    format?: string,\n    doc?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<ElementApiModel>>\n  public getSitemap(\n    format?: string,\n    doc?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<ElementApiModel>>\n  public getSitemap(\n    format?: string,\n    doc?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (format !== undefined && format !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>format,\n        'format'\n      )\n    }\n    if (doc !== undefined && doc !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>doc, 'doc')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<ElementApiModel>(\n      `${this.configuration.basePath}/sitemap`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get build details\n   * To know when and how this version of the application was built.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSystemInfo(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<SystemInfoApiModel>\n  public getSystemInfo(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<SystemInfoApiModel>>\n  public getSystemInfo(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<SystemInfoApiModel>>\n  public getSystemInfo(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<SystemInfoApiModel>(\n      `${this.configuration.basePath}/site/info/build`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get XSL tranformations available\n   * XSL transformations may be applied while importing or harvesting records.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getXslTransformations(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<string>>\n  public getXslTransformations(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<string>>>\n  public getXslTransformations(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<string>>>\n  public getXslTransformations(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<string>>(\n      `${this.configuration.basePath}/site/info/transforms`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Index\n   * @param reset Drop and recreate index\n   * @param asynchronous Asynchronous mode (only on all records. ie. no selection bucket)\n   * @param havingXlinkOnly Records having only XLinks\n   * @param indices Index. By default only remove record index.\n   * @param bucket Selection bucket name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public index1(\n    reset?: boolean,\n    asynchronous?: boolean,\n    havingXlinkOnly?: boolean,\n    indices?: Array<string>,\n    bucket?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public index1(\n    reset?: boolean,\n    asynchronous?: boolean,\n    havingXlinkOnly?: boolean,\n    indices?: Array<string>,\n    bucket?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public index1(\n    reset?: boolean,\n    asynchronous?: boolean,\n    havingXlinkOnly?: boolean,\n    indices?: Array<string>,\n    bucket?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public index1(\n    reset?: boolean,\n    asynchronous?: boolean,\n    havingXlinkOnly?: boolean,\n    indices?: Array<string>,\n    bucket?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (reset !== undefined && reset !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>reset,\n        'reset'\n      )\n    }\n    if (asynchronous !== undefined && asynchronous !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>asynchronous,\n        'asynchronous'\n      )\n    }\n    if (havingXlinkOnly !== undefined && havingXlinkOnly !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>havingXlinkOnly,\n        'havingXlinkOnly'\n      )\n    }\n    if (indices) {\n      indices.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'indices'\n        )\n      })\n    }\n    if (bucket !== undefined && bucket !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>bucket,\n        'bucket'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/site/index`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Index synchronized with database\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public indexAndDbSynchronizationStatus(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: object }>\n  public indexAndDbSynchronizationStatus(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: object }>>\n  public indexAndDbSynchronizationStatus(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: object }>>\n  public indexAndDbSynchronizationStatus(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: object }>(\n      `${this.configuration.basePath}/site/index/synchronized`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Index status\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public indexStatus(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<StatusApiModel>\n  public indexStatus(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<StatusApiModel>>\n  public indexStatus(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<StatusApiModel>>\n  public indexStatus(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<StatusApiModel>(\n      `${this.configuration.basePath}/site/index/status`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Is CAS enabled?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public isCasEnabled(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<boolean>\n  public isCasEnabled(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<boolean>>\n  public isCasEnabled(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<boolean>>\n  public isCasEnabled(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<boolean>(\n      `${this.configuration.basePath}/site/info/isCasEnabled`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Is indexing?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public isIndexing(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<boolean>\n  public isIndexing(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<boolean>>\n  public isIndexing(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<boolean>>\n  public isIndexing(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<boolean>(\n      `${this.configuration.basePath}/site/indexing`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Is in read-only mode?\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public isReadOnly(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<boolean>\n  public isReadOnly(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<boolean>>\n  public isReadOnly(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<boolean>>\n  public isReadOnly(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<boolean>(\n      `${this.configuration.basePath}/site/info/readonly`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { SourceApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SourcesApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get portal list\n   * List all subportal available.\n   * @param group Group owner of the source (only applies to subportal).\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSources1(\n    group?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getSources1(\n    group?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getSources1(\n    group?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getSources1(\n    group?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (group !== undefined && group !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>group,\n        'group'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(`${this.configuration.basePath}/sources`, {\n      params: queryParameters,\n      responseType: <any>responseType,\n      withCredentials: this.configuration.withCredentials,\n      headers: headers,\n      observe: observe,\n      reportProgress: reportProgress,\n    })\n  }\n\n  /**\n   * Get all sources by type\n   * Sources are the local catalogue, subportal, external catalogue (when importing MEF files) or harvesters.\n   * @param type\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSourcesByType(\n    type: 'portal' | 'subportal' | 'externalportal' | 'harvester',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<SourceApiModel>>\n  public getSourcesByType(\n    type: 'portal' | 'subportal' | 'externalportal' | 'harvester',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<SourceApiModel>>>\n  public getSourcesByType(\n    type: 'portal' | 'subportal' | 'externalportal' | 'harvester',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<SourceApiModel>>>\n  public getSourcesByType(\n    type: 'portal' | 'subportal' | 'externalportal' | 'harvester',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (type === null || type === undefined) {\n      throw new Error(\n        'Required parameter type was null or undefined when calling getSourcesByType.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<SourceApiModel>>(\n      `${this.configuration.basePath}/sources/${encodeURIComponent(\n        String(type)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BatchEditingApiModel } from '../model/models'\nimport { CodelistApiModel } from '../model/models'\nimport { ElementApiModel } from '../model/models'\nimport { MetadataSchemaApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StandardsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get multiple codelist translations\n   * All translations are combined in the same object. No distinction by codelist. This is useful if you need lots of codelists terms to be loaded.\n   * @param schema Schema identifier\n   * @param codelist Codelist element name or alias\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getCodelistsTranslations(\n    schema: string,\n    codelist: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public getCodelistsTranslations(\n    schema: string,\n    codelist: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public getCodelistsTranslations(\n    schema: string,\n    codelist: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public getCodelistsTranslations(\n    schema: string,\n    codelist: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling getCodelistsTranslations.'\n      )\n    }\n    if (codelist === null || codelist === undefined) {\n      throw new Error(\n        'Required parameter codelist was null or undefined when calling getCodelistsTranslations.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (codelist) {\n      codelist.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'codelist'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/standards/${encodeURIComponent(\n        String(schema)\n      )}/codelists`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get batch editor configuration for a standard\n   * @param schema Schema identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getConfiguration(\n    schema: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: BatchEditingApiModel }>\n  public getConfiguration(\n    schema: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: BatchEditingApiModel }>>\n  public getConfiguration(\n    schema: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: BatchEditingApiModel }>>\n  public getConfiguration(\n    schema: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling getConfiguration.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: BatchEditingApiModel }>(\n      `${this.configuration.basePath}/standards/${encodeURIComponent(\n        String(schema)\n      )}/batchconfiguration`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get batch editor configuration for standards\n   * @param schema Schema identifiers\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getConfigurations(\n    schema?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: BatchEditingApiModel }>\n  public getConfigurations(\n    schema?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: BatchEditingApiModel }>>\n  public getConfigurations(\n    schema?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: BatchEditingApiModel }>>\n  public getConfigurations(\n    schema?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (schema) {\n      schema.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'schema'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: BatchEditingApiModel }>(\n      `${this.configuration.basePath}/standards/batchconfiguration`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get editor associated resources panel configuration\n   * @param schema Schema identifier\n   * @param name Configuration identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getEditorAssociatedPanelConfiguration(\n    schema: string,\n    name: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public getEditorAssociatedPanelConfiguration(\n    schema: string,\n    name: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public getEditorAssociatedPanelConfiguration(\n    schema: string,\n    name: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public getEditorAssociatedPanelConfiguration(\n    schema: string,\n    name: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling getEditorAssociatedPanelConfiguration.'\n      )\n    }\n    if (name === null || name === undefined) {\n      throw new Error(\n        'Required parameter name was null or undefined when calling getEditorAssociatedPanelConfiguration.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/standards/${encodeURIComponent(\n        String(schema)\n      )}/editor/associatedpanel/config/${encodeURIComponent(\n        String(name)\n      )}.json`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get descriptor details\n   * @param schema Schema identifier\n   * @param element Descriptor name\n   * @param parent\n   * @param displayIf\n   * @param xpath\n   * @param isoType\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getElementDetails(\n    schema: string,\n    element: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<ElementApiModel>\n  public getElementDetails(\n    schema: string,\n    element: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<ElementApiModel>>\n  public getElementDetails(\n    schema: string,\n    element: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<ElementApiModel>>\n  public getElementDetails(\n    schema: string,\n    element: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling getElementDetails.'\n      )\n    }\n    if (element === null || element === undefined) {\n      throw new Error(\n        'Required parameter element was null or undefined when calling getElementDetails.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (parent !== undefined && parent !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>parent,\n        'parent'\n      )\n    }\n    if (displayIf !== undefined && displayIf !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>displayIf,\n        'displayIf'\n      )\n    }\n    if (xpath !== undefined && xpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>xpath,\n        'xpath'\n      )\n    }\n    if (isoType !== undefined && isoType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isoType,\n        'isoType'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<ElementApiModel>(\n      `${this.configuration.basePath}/standards/${encodeURIComponent(\n        String(schema)\n      )}/descriptors/${encodeURIComponent(String(element))}/details`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get codelist details\n   * @param schema Schema identifier\n   * @param codelist Codelist element name or alias\n   * @param parent Parent name with namespace which may indicate a more precise label as defined in context attribute.\n   * @param displayIf Display if condition as defined in the codelist.xml file. Allows to select a more precise codelist when more than one is defined for same name.\n   * @param xpath XPath of the element to target which may indicate a more precise label as defined in context attribute.\n   * @param isoType ISO type of the element to target which may indicate a more precise label as defined in context attribute. (Same as context. TODO: Deprecate ?)\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSchemaCodelistsWithDetails(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<CodelistApiModel>\n  public getSchemaCodelistsWithDetails(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpResponse<CodelistApiModel>>\n  public getSchemaCodelistsWithDetails(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<HttpEvent<CodelistApiModel>>\n  public getSchemaCodelistsWithDetails(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'application/xml' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling getSchemaCodelistsWithDetails.'\n      )\n    }\n    if (codelist === null || codelist === undefined) {\n      throw new Error(\n        'Required parameter codelist was null or undefined when calling getSchemaCodelistsWithDetails.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (parent !== undefined && parent !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>parent,\n        'parent'\n      )\n    }\n    if (displayIf !== undefined && displayIf !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>displayIf,\n        'displayIf'\n      )\n    }\n    if (xpath !== undefined && xpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>xpath,\n        'xpath'\n      )\n    }\n    if (isoType !== undefined && isoType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isoType,\n        'isoType'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = [\n        'application/json',\n        'application/xml',\n      ]\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<CodelistApiModel>(\n      `${this.configuration.basePath}/standards/${encodeURIComponent(\n        String(schema)\n      )}/codelists/${encodeURIComponent(String(codelist))}/details`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get codelist translations\n   * @param schema Schema identifier\n   * @param codelist Codelist element name or alias\n   * @param parent\n   * @param displayIf\n   * @param xpath\n   * @param isoType\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSchemaTranslations(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public getSchemaTranslations(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public getSchemaTranslations(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public getSchemaTranslations(\n    schema: string,\n    codelist: string,\n    parent?: string,\n    displayIf?: string,\n    xpath?: string,\n    isoType?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (schema === null || schema === undefined) {\n      throw new Error(\n        'Required parameter schema was null or undefined when calling getSchemaTranslations.'\n      )\n    }\n    if (codelist === null || codelist === undefined) {\n      throw new Error(\n        'Required parameter codelist was null or undefined when calling getSchemaTranslations.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (parent !== undefined && parent !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>parent,\n        'parent'\n      )\n    }\n    if (displayIf !== undefined && displayIf !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>displayIf,\n        'displayIf'\n      )\n    }\n    if (xpath !== undefined && xpath !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>xpath,\n        'xpath'\n      )\n    }\n    if (isoType !== undefined && isoType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>isoType,\n        'isoType'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/standards/${encodeURIComponent(\n        String(schema)\n      )}/codelists/${encodeURIComponent(String(codelist))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get standards\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getStandardConfigurations(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataSchemaApiModel>>\n  public getStandardConfigurations(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataSchemaApiModel>>>\n  public getStandardConfigurations(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataSchemaApiModel>>>\n  public getStandardConfigurations(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataSchemaApiModel>>(\n      `${this.configuration.basePath}/standards`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Reload standards\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public reloadSchema(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public reloadSchema(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public reloadSchema(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public reloadSchema(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/standards/reload`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { StatusValueApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get status by type\n   * @param type Type\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getStatusByType(\n    type: 'workflow' | 'task' | 'event',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<StatusValueApiModel>>\n  public getStatusByType(\n    type: 'workflow' | 'task' | 'event',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<StatusValueApiModel>>>\n  public getStatusByType(\n    type: 'workflow' | 'task' | 'event',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<StatusValueApiModel>>>\n  public getStatusByType(\n    type: 'workflow' | 'task' | 'event',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (type === null || type === undefined) {\n      throw new Error(\n        'Required parameter type was null or undefined when calling getStatusByType.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<StatusValueApiModel>>(\n      `${this.configuration.basePath}/status/${encodeURIComponent(\n        String(type)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get status\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getStatusList(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<StatusValueApiModel>>\n  public getStatusList(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<StatusValueApiModel>>>\n  public getStatusList(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<StatusValueApiModel>>>\n  public getStatusList(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<StatusValueApiModel>>(\n      `${this.configuration.basePath}/status`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { MetadataCategoryApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TagsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get a tag\n   * @param tagIdentifier Tag identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getTag(\n    tagIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<MetadataCategoryApiModel>\n  public getTag(\n    tagIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<MetadataCategoryApiModel>>\n  public getTag(\n    tagIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<MetadataCategoryApiModel>>\n  public getTag(\n    tagIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (tagIdentifier === null || tagIdentifier === undefined) {\n      throw new Error(\n        'Required parameter tagIdentifier was null or undefined when calling getTag.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<MetadataCategoryApiModel>(\n      `${this.configuration.basePath}/tags/${encodeURIComponent(\n        String(tagIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get tags\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getTags(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<MetadataCategoryApiModel>>\n  public getTags(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<MetadataCategoryApiModel>>>\n  public getTags(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<MetadataCategoryApiModel>>>\n  public getTags(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<MetadataCategoryApiModel>>(\n      `${this.configuration.basePath}/tags`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update a tag\n   * @param tagIdentifier Tag identifier\n   * @param metadataCategoryApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateTag(\n    tagIdentifier: number,\n    metadataCategoryApiModel: MetadataCategoryApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<string>\n  public updateTag(\n    tagIdentifier: number,\n    metadataCategoryApiModel: MetadataCategoryApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<string>>\n  public updateTag(\n    tagIdentifier: number,\n    metadataCategoryApiModel: MetadataCategoryApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<string>>\n  public updateTag(\n    tagIdentifier: number,\n    metadataCategoryApiModel: MetadataCategoryApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (tagIdentifier === null || tagIdentifier === undefined) {\n      throw new Error(\n        'Required parameter tagIdentifier was null or undefined when calling updateTag.'\n      )\n    }\n    if (\n      metadataCategoryApiModel === null ||\n      metadataCategoryApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter metadataCategoryApiModel was null or undefined when calling updateTag.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/tags/${encodeURIComponent(\n        String(tagIdentifier)\n      )}`,\n      metadataCategoryApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToolsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Add or update database translations.\n   * @param key\n   * @param requestBody\n   * @param replace\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addTranslations(\n    key: string,\n    requestBody: { [key: string]: string },\n    replace?: boolean,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public addTranslations(\n    key: string,\n    requestBody: { [key: string]: string },\n    replace?: boolean,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public addTranslations(\n    key: string,\n    requestBody: { [key: string]: string },\n    replace?: boolean,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public addTranslations(\n    key: string,\n    requestBody: { [key: string]: string },\n    replace?: boolean,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (key === null || key === undefined) {\n      throw new Error(\n        'Required parameter key was null or undefined when calling addTranslations.'\n      )\n    }\n    if (requestBody === null || requestBody === undefined) {\n      throw new Error(\n        'Required parameter requestBody was null or undefined when calling addTranslations.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (replace !== undefined && replace !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>replace,\n        'replace'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/i18n/db/translations/${encodeURIComponent(\n        String(key)\n      )}`,\n      requestBody,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Generate a SLD with a new filter\n   * Get the currend SLD for the requested layers, add new filters in, save the SLD and return the new SLD URL.\n   * @param url The WMS server URL\n   * @param layers The layers\n   * @param filters The filters in JSON\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public buildSLD(\n    url: string,\n    layers: string,\n    filters: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public buildSLD(\n    url: string,\n    layers: string,\n    filters: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public buildSLD(\n    url: string,\n    layers: string,\n    filters: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public buildSLD(\n    url: string,\n    layers: string,\n    filters: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (url === null || url === undefined) {\n      throw new Error(\n        'Required parameter url was null or undefined when calling buildSLD.'\n      )\n    }\n    if (layers === null || layers === undefined) {\n      throw new Error(\n        'Required parameter layers was null or undefined when calling buildSLD.'\n      )\n    }\n    if (filters === null || filters === undefined) {\n      throw new Error(\n        'Required parameter filters was null or undefined when calling buildSLD.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (url !== undefined && url !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>url, 'url')\n    }\n    if (layers !== undefined && layers !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>layers,\n        'layers'\n      )\n    }\n    if (filters !== undefined && filters !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>filters,\n        'filters'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/tools/ogc/sld`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Call a migration step\n   * @param stepName Class name to execute corresponding to a migration step. See DatabaseMigrationTask.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public callStep(\n    stepName: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public callStep(\n    stepName: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public callStep(\n    stepName: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public callStep(\n    stepName: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (stepName === null || stepName === undefined) {\n      throw new Error(\n        'Required parameter stepName was null or undefined when calling callStep.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${\n        this.configuration.basePath\n      }/tools/migration/steps/${encodeURIComponent(String(stepName))}`,\n      null,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Clean translation packages cache.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public cleanTranslationsPackagesCache(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public cleanTranslationsPackagesCache(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public cleanTranslationsPackagesCache(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public cleanTranslationsPackagesCache(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/i18n/cache`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete database translations.\n   * @param key\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteTranslations(\n    key: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deleteTranslations(\n    key: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deleteTranslations(\n    key: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deleteTranslations(\n    key: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (key === null || key === undefined) {\n      throw new Error(\n        'Required parameter key was null or undefined when calling deleteTranslations.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/i18n/db/translations/${encodeURIComponent(\n        String(key)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove all SLD files\n   * Clean all SLD generated previously\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deteleSLD(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public deteleSLD(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public deteleSLD(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public deteleSLD(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<any>(\n      `${this.configuration.basePath}/tools/ogc/sld`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * List database translations (used to overrides client application translations).\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getDbTranslations(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public getDbTranslations(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public getDbTranslations(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public getDbTranslations(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/i18n/db/translations`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get the list of SLD available\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSLD(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<string>>\n  public getSLD(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<string>>>\n  public getSLD(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<string>>>\n  public getSLD(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<string>>(\n      `${this.configuration.basePath}/tools/ogc/sld`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * List translations for database description table\n   * @param type\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getTranslations(\n    type?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public getTranslations(\n    type?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public getTranslations(\n    type?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public getTranslations(\n    type?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type) {\n      type.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'type'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/i18n/db`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of translation packages.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getTranslationsPackage(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: Array<string> }>\n  public getTranslationsPackage(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: Array<string> }>>\n  public getTranslationsPackage(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: Array<string> }>>\n  public getTranslationsPackage(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: Array<string> }>(\n      `${this.configuration.basePath}/i18n/packages`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get a translation package.\n   * @param pack\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getTranslationsPackage1(\n    pack: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<{ [key: string]: string }>\n  public getTranslationsPackage1(\n    pack: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<{ [key: string]: string }>>\n  public getTranslationsPackage1(\n    pack: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<{ [key: string]: string }>>\n  public getTranslationsPackage1(\n    pack: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (pack === null || pack === undefined) {\n      throw new Error(\n        'Required parameter pack was null or undefined when calling getTranslationsPackage1.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<{ [key: string]: string }>(\n      `${this.configuration.basePath}/i18n/packages/${encodeURIComponent(\n        String(pack)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { UiSettingApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UiApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Get a UI configuration\n   * @param uiIdentifier UI identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUiConfiguration(\n    uiIdentifier: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<UiSettingApiModel>\n  public getUiConfiguration(\n    uiIdentifier: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<UiSettingApiModel>>\n  public getUiConfiguration(\n    uiIdentifier: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<UiSettingApiModel>>\n  public getUiConfiguration(\n    uiIdentifier: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (uiIdentifier === null || uiIdentifier === undefined) {\n      throw new Error(\n        'Required parameter uiIdentifier was null or undefined when calling getUiConfiguration.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<UiSettingApiModel>(\n      `${this.configuration.basePath}/ui/${encodeURIComponent(\n        String(uiIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get UI configuration\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUiConfigurations(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UiSettingApiModel>>\n  public getUiConfigurations(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UiSettingApiModel>>>\n  public getUiConfigurations(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UiSettingApiModel>>>\n  public getUiConfigurations(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UiSettingApiModel>>(\n      `${this.configuration.basePath}/ui`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update a UI configuration\n   * @param uiIdentifier UI configuration identifier\n   * @param uiSettingApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateUiConfiguration(\n    uiIdentifier: string,\n    uiSettingApiModel: UiSettingApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<string>\n  public updateUiConfiguration(\n    uiIdentifier: string,\n    uiSettingApiModel: UiSettingApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpResponse<string>>\n  public updateUiConfiguration(\n    uiIdentifier: string,\n    uiSettingApiModel: UiSettingApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<HttpEvent<string>>\n  public updateUiConfiguration(\n    uiIdentifier: string,\n    uiSettingApiModel: UiSettingApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | '*/*' }\n  ): Observable<any> {\n    if (uiIdentifier === null || uiIdentifier === undefined) {\n      throw new Error(\n        'Required parameter uiIdentifier was null or undefined when calling updateUiConfiguration.'\n      )\n    }\n    if (uiSettingApiModel === null || uiSettingApiModel === undefined) {\n      throw new Error(\n        'Required parameter uiSettingApiModel was null or undefined when calling updateUiConfiguration.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', '*/*']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/ui/${encodeURIComponent(\n        String(uiIdentifier)\n      )}`,\n      uiSettingApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { RatingAverageApiModel } from '../model/models'\nimport { RatingCriteriaApiModel } from '../model/models'\nimport { UserFeedbackDTOApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserfeedbackApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Removes a user feedback\n   * Removes a user feedback\n   * @param uuid User feedback UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteUserFeedback(\n    uuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public deleteUserFeedback(\n    uuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public deleteUserFeedback(\n    uuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public deleteUserFeedback(\n    uuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (uuid === null || uuid === undefined) {\n      throw new Error(\n        'Required parameter uuid was null or undefined when calling deleteUserFeedback.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<string>(\n      `${this.configuration.basePath}/userfeedback/${encodeURIComponent(\n        String(uuid)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Provides an average rating for a metadata record\n   * @param metadataUuid Metadata record UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getMetadataRating(\n    metadataUuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<RatingAverageApiModel>\n  public getMetadataRating(\n    metadataUuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<RatingAverageApiModel>>\n  public getMetadataRating(\n    metadataUuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<RatingAverageApiModel>>\n  public getMetadataRating(\n    metadataUuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getMetadataRating.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<RatingAverageApiModel>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/userfeedbackrating`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of rating criteria\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRatingCriteria(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<RatingCriteriaApiModel>>\n  public getRatingCriteria(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<RatingCriteriaApiModel>>>\n  public getRatingCriteria(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<RatingCriteriaApiModel>>>\n  public getRatingCriteria(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<RatingCriteriaApiModel>>(\n      `${this.configuration.basePath}/userfeedback/ratingcriteria`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Finds a specific user feedback\n   * @param uuid User feedback UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUserComment(\n    uuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<UserFeedbackDTOApiModel>\n  public getUserComment(\n    uuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<UserFeedbackDTOApiModel>>\n  public getUserComment(\n    uuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<UserFeedbackDTOApiModel>>\n  public getUserComment(\n    uuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (uuid === null || uuid === undefined) {\n      throw new Error(\n        'Required parameter uuid was null or undefined when calling getUserComment.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<UserFeedbackDTOApiModel>(\n      `${this.configuration.basePath}/userfeedback/${encodeURIComponent(\n        String(uuid)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Finds a list of user feedback records.\n   *  This list will include also the draft user feedback if the client is logged as reviewer.\n   * @param metadataUuid Metadata record UUID.\n   * @param size Maximum number of feedback to return.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUserComments(\n    metadataUuid?: string,\n    size?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserFeedbackDTOApiModel>>\n  public getUserComments(\n    metadataUuid?: string,\n    size?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserFeedbackDTOApiModel>>>\n  public getUserComments(\n    metadataUuid?: string,\n    size?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserFeedbackDTOApiModel>>>\n  public getUserComments(\n    metadataUuid?: string,\n    size?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (metadataUuid !== undefined && metadataUuid !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataUuid,\n        'metadataUuid'\n      )\n    }\n    if (size !== undefined && size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserFeedbackDTOApiModel>>(\n      `${this.configuration.basePath}/userfeedback`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Finds a list of user feedback for a specific records.\n   *  This list will include also the draft user feedback if the client is logged as reviewer.\n   * @param metadataUuid Metadata record UUID.\n   * @param size Maximum number of feedback to return.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUserCommentsOnARecord(\n    metadataUuid: string,\n    size?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserFeedbackDTOApiModel>>\n  public getUserCommentsOnARecord(\n    metadataUuid: string,\n    size?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserFeedbackDTOApiModel>>>\n  public getUserCommentsOnARecord(\n    metadataUuid: string,\n    size?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserFeedbackDTOApiModel>>>\n  public getUserCommentsOnARecord(\n    metadataUuid: string,\n    size?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling getUserCommentsOnARecord.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (size !== undefined && size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserFeedbackDTOApiModel>>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/userfeedback`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Creates a user feedback\n   * Creates a user feedback in draft status if the user is not logged in.\n   * @param userFeedbackDTOApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public newUserFeedback(\n    userFeedbackDTOApiModel: UserFeedbackDTOApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public newUserFeedback(\n    userFeedbackDTOApiModel: UserFeedbackDTOApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public newUserFeedback(\n    userFeedbackDTOApiModel: UserFeedbackDTOApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public newUserFeedback(\n    userFeedbackDTOApiModel: UserFeedbackDTOApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (\n      userFeedbackDTOApiModel === null ||\n      userFeedbackDTOApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter userFeedbackDTOApiModel was null or undefined when calling newUserFeedback.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/userfeedback`,\n      userFeedbackDTOApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Publishes a feedback\n   * For reviewers\n   * @param uuid User feedback UUID.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public publishFeedback(\n    uuid: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public publishFeedback(\n    uuid: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public publishFeedback(\n    uuid: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public publishFeedback(\n    uuid: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (uuid === null || uuid === undefined) {\n      throw new Error(\n        'Required parameter uuid was null or undefined when calling publishFeedback.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/userfeedback/${encodeURIComponent(\n        String(uuid)\n      )}/publish`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Send an email to catalogue administrator or record\\&#39;s contact\n   * @param metadataUuid Metadata record UUID.\n   * @param name User name.\n   * @param org User organisation.\n   * @param email User email address.\n   * @param comments A comment or question.\n   * @param recaptcha Recaptcha validation key.\n   * @param phone User phone number.\n   * @param subject Email subject.\n   * @param _function User function.\n   * @param type Comment type.\n   * @param category Comment category.\n   * @param metadataEmail List of record\\&#39;s contact to send this email.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public sendEmailToContact(\n    metadataUuid: string,\n    name: string,\n    org: string,\n    email: string,\n    comments: string,\n    recaptcha?: string,\n    phone?: string,\n    subject?: string,\n    _function?: string,\n    type?: string,\n    category?: string,\n    metadataEmail?: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public sendEmailToContact(\n    metadataUuid: string,\n    name: string,\n    org: string,\n    email: string,\n    comments: string,\n    recaptcha?: string,\n    phone?: string,\n    subject?: string,\n    _function?: string,\n    type?: string,\n    category?: string,\n    metadataEmail?: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public sendEmailToContact(\n    metadataUuid: string,\n    name: string,\n    org: string,\n    email: string,\n    comments: string,\n    recaptcha?: string,\n    phone?: string,\n    subject?: string,\n    _function?: string,\n    type?: string,\n    category?: string,\n    metadataEmail?: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public sendEmailToContact(\n    metadataUuid: string,\n    name: string,\n    org: string,\n    email: string,\n    comments: string,\n    recaptcha?: string,\n    phone?: string,\n    subject?: string,\n    _function?: string,\n    type?: string,\n    category?: string,\n    metadataEmail?: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (metadataUuid === null || metadataUuid === undefined) {\n      throw new Error(\n        'Required parameter metadataUuid was null or undefined when calling sendEmailToContact.'\n      )\n    }\n    if (name === null || name === undefined) {\n      throw new Error(\n        'Required parameter name was null or undefined when calling sendEmailToContact.'\n      )\n    }\n    if (org === null || org === undefined) {\n      throw new Error(\n        'Required parameter org was null or undefined when calling sendEmailToContact.'\n      )\n    }\n    if (email === null || email === undefined) {\n      throw new Error(\n        'Required parameter email was null or undefined when calling sendEmailToContact.'\n      )\n    }\n    if (comments === null || comments === undefined) {\n      throw new Error(\n        'Required parameter comments was null or undefined when calling sendEmailToContact.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (recaptcha !== undefined && recaptcha !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>recaptcha,\n        'recaptcha'\n      )\n    }\n    if (name !== undefined && name !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>name, 'name')\n    }\n    if (org !== undefined && org !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>org, 'org')\n    }\n    if (email !== undefined && email !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>email,\n        'email'\n      )\n    }\n    if (comments !== undefined && comments !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>comments,\n        'comments'\n      )\n    }\n    if (phone !== undefined && phone !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>phone,\n        'phone'\n      )\n    }\n    if (subject !== undefined && subject !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>subject,\n        'subject'\n      )\n    }\n    if (_function !== undefined && _function !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>_function,\n        'function'\n      )\n    }\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n    if (category !== undefined && category !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>category,\n        'category'\n      )\n    }\n    if (metadataEmail !== undefined && metadataEmail !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>metadataEmail,\n        'metadataEmail'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/records/${encodeURIComponent(\n        String(metadataUuid)\n      )}/alert`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { OwnerResponseApiModel } from '../model/models'\nimport { PasswordUpdateParameterApiModel } from '../model/models'\nimport { TransferRequestApiModel } from '../model/models'\nimport { UserApiModel } from '../model/models'\nimport { UserDtoApiModel } from '../model/models'\nimport { UserGroupApiModel } from '../model/models'\nimport { UserGroupsResponseApiModel } from '../model/models'\nimport { UserRegisterDtoApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Creates a user\n   * Creates a catalog user.\n   * @param userDtoApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public createUser(\n    userDtoApiModel: UserDtoApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public createUser(\n    userDtoApiModel: UserDtoApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public createUser(\n    userDtoApiModel: UserDtoApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public createUser(\n    userDtoApiModel: UserDtoApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userDtoApiModel === null || userDtoApiModel === undefined) {\n      throw new Error(\n        'Required parameter userDtoApiModel was null or undefined when calling createUser.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/users`,\n      userDtoApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete a user\n   * Deletes a catalog user by identifier.\n   * @param userIdentifier User identifier.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteUser(\n    userIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public deleteUser(\n    userIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public deleteUser(\n    userIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public deleteUser(\n    userIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling deleteUser.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<string>(\n      `${this.configuration.basePath}/users/${encodeURIComponent(\n        String(userIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get owners\n   * Return users who actually owns one or more records.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getRecordOwners(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<OwnerResponseApiModel>>\n  public getRecordOwners(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<OwnerResponseApiModel>>>\n  public getRecordOwners(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<OwnerResponseApiModel>>>\n  public getRecordOwners(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<OwnerResponseApiModel>>(\n      `${this.configuration.basePath}/users/owners`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get user\n   * @param userIdentifier User identifier.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUser(\n    userIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<UserApiModel>\n  public getUser(\n    userIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<UserApiModel>>\n  public getUser(\n    userIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<UserApiModel>>\n  public getUser(\n    userIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling getUser.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<UserApiModel>(\n      `${this.configuration.basePath}/users/${encodeURIComponent(\n        String(userIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get user identicon\n   * @param userIdentifier User identifier.\n   * @param size Size.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUserIdenticon(\n    userIdentifier: number,\n    size?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public getUserIdenticon(\n    userIdentifier: number,\n    size?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public getUserIdenticon(\n    userIdentifier: number,\n    size?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public getUserIdenticon(\n    userIdentifier: number,\n    size?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling getUserIdenticon.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (size !== undefined && size !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>size, 'size')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<any>(\n      `${this.configuration.basePath}/users/${encodeURIComponent(\n        String(userIdentifier)\n      )}.png`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get users\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUsers(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserApiModel>>\n  public getUsers(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserApiModel>>>\n  public getUsers(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserApiModel>>>\n  public getUsers(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserApiModel>>(\n      `${this.configuration.basePath}/users`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Create user account\n   * User is created with a registered user profile. username field is ignored and the email is used as username. Password is sent by email. Catalog administrator is also notified.\n   * @param userRegisterDtoApiModel User details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public registerUser(\n    userRegisterDtoApiModel: UserRegisterDtoApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public registerUser(\n    userRegisterDtoApiModel: UserRegisterDtoApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public registerUser(\n    userRegisterDtoApiModel: UserRegisterDtoApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public registerUser(\n    userRegisterDtoApiModel: UserRegisterDtoApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (\n      userRegisterDtoApiModel === null ||\n      userRegisterDtoApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter userRegisterDtoApiModel was null or undefined when calling registerUser.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/user/actions/register`,\n      userRegisterDtoApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Resets user password\n   * Resets the user password.\n   * @param userIdentifier User identifier.\n   * @param password Password to change.\n   * @param password2 Password to change (repeat).\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public resetUserPassword(\n    userIdentifier: number,\n    password: string,\n    password2: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public resetUserPassword(\n    userIdentifier: number,\n    password: string,\n    password2: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public resetUserPassword(\n    userIdentifier: number,\n    password: string,\n    password2: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public resetUserPassword(\n    userIdentifier: number,\n    password: string,\n    password2: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling resetUserPassword.'\n      )\n    }\n    if (password === null || password === undefined) {\n      throw new Error(\n        'Required parameter password was null or undefined when calling resetUserPassword.'\n      )\n    }\n    if (password2 === null || password2 === undefined) {\n      throw new Error(\n        'Required parameter password2 was null or undefined when calling resetUserPassword.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (password !== undefined && password !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>password,\n        'password'\n      )\n    }\n    if (password2 !== undefined && password2 !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>password2,\n        'password2'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.post<string>(\n      `${this.configuration.basePath}/users/${encodeURIComponent(\n        String(userIdentifier)\n      )}/actions/forget-password`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Retrieve all user groups\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public retrieveAllUserGroups(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserGroupsResponseApiModel>>\n  public retrieveAllUserGroups(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserGroupsResponseApiModel>>>\n  public retrieveAllUserGroups(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserGroupsResponseApiModel>>>\n  public retrieveAllUserGroups(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserGroupsResponseApiModel>>(\n      `${this.configuration.basePath}/users/groups`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Retrieve user groups\n   * Retrieve the user groups.\n   * @param userIdentifier User identifier.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public retrieveUserGroups(\n    userIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserGroupApiModel>>\n  public retrieveUserGroups(\n    userIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserGroupApiModel>>>\n  public retrieveUserGroups(\n    userIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserGroupApiModel>>>\n  public retrieveUserGroups(\n    userIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling retrieveUserGroups.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserGroupApiModel>>(\n      `${this.configuration.basePath}/users/${encodeURIComponent(\n        String(userIdentifier)\n      )}/groups`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Transfer privileges\n   * @param transferRequestApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public saveOwners(\n    transferRequestApiModel: TransferRequestApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public saveOwners(\n    transferRequestApiModel: TransferRequestApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public saveOwners(\n    transferRequestApiModel: TransferRequestApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public saveOwners(\n    transferRequestApiModel: TransferRequestApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (\n      transferRequestApiModel === null ||\n      transferRequestApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter transferRequestApiModel was null or undefined when calling saveOwners.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/users/owners`,\n      transferRequestApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Send user password reminder by email\n   * An email is sent to the requested user with a link to reset his password. User MUST have an email to get the link. LDAP users will not be able to retrieve their password using this service.\n   * @param username The user name\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public sendPasswordByEmail(\n    username: string,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public sendPasswordByEmail(\n    username: string,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public sendPasswordByEmail(\n    username: string,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public sendPasswordByEmail(\n    username: string,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (username === null || username === undefined) {\n      throw new Error(\n        'Required parameter username was null or undefined when calling sendPasswordByEmail.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<string>(\n      `${this.configuration.basePath}/user/${encodeURIComponent(\n        String(username)\n      )}/actions/forgot-password`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update user password\n   * Get a valid changekey by email first and then update your password.\n   * @param username The user name\n   * @param passwordUpdateParameterApiModel The new password and a valid change key\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updatePassword(\n    username: string,\n    passwordUpdateParameterApiModel: PasswordUpdateParameterApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<string>\n  public updatePassword(\n    username: string,\n    passwordUpdateParameterApiModel: PasswordUpdateParameterApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpResponse<string>>\n  public updatePassword(\n    username: string,\n    passwordUpdateParameterApiModel: PasswordUpdateParameterApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<HttpEvent<string>>\n  public updatePassword(\n    username: string,\n    passwordUpdateParameterApiModel: PasswordUpdateParameterApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' | 'text/plain' }\n  ): Observable<any> {\n    if (username === null || username === undefined) {\n      throw new Error(\n        'Required parameter username was null or undefined when calling updatePassword.'\n      )\n    }\n    if (\n      passwordUpdateParameterApiModel === null ||\n      passwordUpdateParameterApiModel === undefined\n    ) {\n      throw new Error(\n        'Required parameter passwordUpdateParameterApiModel was null or undefined when calling updatePassword.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json', 'text/plain']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.patch<string>(\n      `${this.configuration.basePath}/user/${encodeURIComponent(\n        String(username)\n      )}`,\n      passwordUpdateParameterApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update a user\n   * Updates a catalog user.\n   * @param userIdentifier User identifier.\n   * @param userDtoApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateUser(\n    userIdentifier: number,\n    userDtoApiModel: UserDtoApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public updateUser(\n    userIdentifier: number,\n    userDtoApiModel: UserDtoApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public updateUser(\n    userIdentifier: number,\n    userDtoApiModel: UserDtoApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public updateUser(\n    userIdentifier: number,\n    userDtoApiModel: UserDtoApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling updateUser.'\n      )\n    }\n    if (userDtoApiModel === null || userDtoApiModel === undefined) {\n      throw new Error(\n        'Required parameter userDtoApiModel was null or undefined when calling updateUser.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/users/${encodeURIComponent(\n        String(userIdentifier)\n      )}`,\n      userDtoApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { PaginatedUserSearchResponseApiModel } from '../model/models'\nimport { UserSearchDtoApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UsersearchesApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Creates a user search\n   * Creates a user search.\n   * @param userSearchDtoApiModel User search details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public createUserCustomSearch(\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<number>\n  public createUserCustomSearch(\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<number>>\n  public createUserCustomSearch(\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<number>>\n  public createUserCustomSearch(\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (userSearchDtoApiModel === null || userSearchDtoApiModel === undefined) {\n      throw new Error(\n        'Required parameter userSearchDtoApiModel was null or undefined when calling createUserCustomSearch.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<number>(\n      `${this.configuration.basePath}/usersearches`,\n      userSearchDtoApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Delete a user search\n   * Deletes a user search by identifier.\n   * @param searchIdentifier Search identifier.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteUserCustomSerach(\n    searchIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public deleteUserCustomSerach(\n    searchIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public deleteUserCustomSerach(\n    searchIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public deleteUserCustomSerach(\n    searchIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (searchIdentifier === null || searchIdentifier === undefined) {\n      throw new Error(\n        'Required parameter searchIdentifier was null or undefined when calling deleteUserCustomSerach.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<string>(\n      `${this.configuration.basePath}/usersearches/${encodeURIComponent(\n        String(searchIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get user custom searches for all users (no paginated)\n   * @param featuredType Featured type search.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAllUserCustomSearches(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserSearchDtoApiModel>>\n  public getAllUserCustomSearches(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserSearchDtoApiModel>>>\n  public getAllUserCustomSearches(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserSearchDtoApiModel>>>\n  public getAllUserCustomSearches(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (featuredType !== undefined && featuredType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>featuredType,\n        'featuredType'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserSearchDtoApiModel>>(\n      `${this.configuration.basePath}/usersearches/all`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get user custom searches for all users (paginated)\n   * @param featuredType Featured  type search.\n   * @param search\n   * @param offset From page\n   * @param limit Number of records to return\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAllUserCustomSearchesPage(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    search?: string,\n    offset?: number,\n    limit?: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<PaginatedUserSearchResponseApiModel>\n  public getAllUserCustomSearchesPage(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    search?: string,\n    offset?: number,\n    limit?: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<PaginatedUserSearchResponseApiModel>>\n  public getAllUserCustomSearchesPage(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    search?: string,\n    offset?: number,\n    limit?: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<PaginatedUserSearchResponseApiModel>>\n  public getAllUserCustomSearchesPage(\n    featuredType?: 'HOME' | 'EDITOR_BOARD',\n    search?: string,\n    offset?: number,\n    limit?: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (featuredType !== undefined && featuredType !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>featuredType,\n        'featuredType'\n      )\n    }\n    if (search !== undefined && search !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>search,\n        'search'\n      )\n    }\n    if (offset !== undefined && offset !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>offset,\n        'offset'\n      )\n    }\n    if (limit !== undefined && limit !== null) {\n      queryParameters = this.addToHttpParams(\n        queryParameters,\n        <any>limit,\n        'limit'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<PaginatedUserSearchResponseApiModel>(\n      `${this.configuration.basePath}/usersearches/allpaginated`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get featured user custom searches\n   * @param type Number of records to return\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getFeaturedUserCustomSearches(\n    type?: 'HOME' | 'EDITOR_BOARD',\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserSearchDtoApiModel>>\n  public getFeaturedUserCustomSearches(\n    type?: 'HOME' | 'EDITOR_BOARD',\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserSearchDtoApiModel>>>\n  public getFeaturedUserCustomSearches(\n    type?: 'HOME' | 'EDITOR_BOARD',\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserSearchDtoApiModel>>>\n  public getFeaturedUserCustomSearches(\n    type?: 'HOME' | 'EDITOR_BOARD',\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (type !== undefined && type !== null) {\n      queryParameters = this.addToHttpParams(queryParameters, <any>type, 'type')\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserSearchDtoApiModel>>(\n      `${this.configuration.basePath}/usersearches/featured`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get custom search\n   * @param searchIdentifier User search identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUserCustomSearch(\n    searchIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<UserSearchDtoApiModel>\n  public getUserCustomSearch(\n    searchIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<UserSearchDtoApiModel>>\n  public getUserCustomSearch(\n    searchIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<UserSearchDtoApiModel>>\n  public getUserCustomSearch(\n    searchIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (searchIdentifier === null || searchIdentifier === undefined) {\n      throw new Error(\n        'Required parameter searchIdentifier was null or undefined when calling getUserCustomSearch.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<UserSearchDtoApiModel>(\n      `${this.configuration.basePath}/usersearches/${encodeURIComponent(\n        String(searchIdentifier)\n      )}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get user custom searches\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getUserCustomSearches(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<UserSearchDtoApiModel>>\n  public getUserCustomSearches(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<UserSearchDtoApiModel>>>\n  public getUserCustomSearches(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<UserSearchDtoApiModel>>>\n  public getUserCustomSearches(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<UserSearchDtoApiModel>>(\n      `${this.configuration.basePath}/usersearches`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Update a user search\n   * @param searchIdentifier User search identifier\n   * @param userSearchDtoApiModel User search details\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateCustomUserSearch(\n    searchIdentifier: number,\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any>\n  public updateCustomUserSearch(\n    searchIdentifier: number,\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<any>>\n  public updateCustomUserSearch(\n    searchIdentifier: number,\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<any>>\n  public updateCustomUserSearch(\n    searchIdentifier: number,\n    userSearchDtoApiModel: UserSearchDtoApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (searchIdentifier === null || searchIdentifier === undefined) {\n      throw new Error(\n        'Required parameter searchIdentifier was null or undefined when calling updateCustomUserSearch.'\n      )\n    }\n    if (userSearchDtoApiModel === null || userSearchDtoApiModel === undefined) {\n      throw new Error(\n        'Required parameter userSearchDtoApiModel was null or undefined when calling updateCustomUserSearch.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<any>(\n      `${this.configuration.basePath}/usersearches/${encodeURIComponent(\n        String(searchIdentifier)\n      )}`,\n      userSearchDtoApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional } from '@angular/core'\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n} from '@angular/common/http'\nimport { CustomHttpParameterCodec } from '../encoder'\nimport { Observable } from 'rxjs'\n\nimport { SelectionApiModel } from '../model/models'\n\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables'\nimport { Configuration } from '../configuration'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserselectionsApiService {\n  protected basePath = 'https://apps.titellus.net/geonetwork/srv/api'\n  public defaultHeaders = new HttpHeaders()\n  public configuration = new Configuration()\n  public encoder: HttpParameterCodec\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string,\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath\n      }\n      this.configuration.basePath = basePath\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec()\n  }\n\n  private addToHttpParams(\n    httpParams: HttpParams,\n    value: any,\n    key?: string\n  ): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value)\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key)\n    }\n    return httpParams\n  }\n\n  private addToHttpParamsRecursive(\n    httpParams: HttpParams,\n    value?: any,\n    key?: string\n  ): HttpParams {\n    if (value == null) {\n      return httpParams\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        ;(value as any[]).forEach(\n          (elem) =>\n            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))\n        )\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(\n            key,\n            (value as Date).toISOString().substr(0, 10)\n          )\n        } else {\n          throw Error('key may not be null if value is Date')\n        }\n      } else {\n        Object.keys(value).forEach(\n          (k) =>\n            (httpParams = this.addToHttpParamsRecursive(\n              httpParams,\n              value[k],\n              key != null ? `${key}.${k}` : k\n            ))\n        )\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value)\n    } else {\n      throw Error('key may not be null if value is not object or array')\n    }\n    return httpParams\n  }\n\n  /**\n   * Add items to a user selection set\n   * @param selectionIdentifier Selection identifier\n   * @param userIdentifier User identifier\n   * @param uuid One or more record UUIDs.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addToUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public addToUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public addToUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public addToUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (selectionIdentifier === null || selectionIdentifier === undefined) {\n      throw new Error(\n        'Required parameter selectionIdentifier was null or undefined when calling addToUserSelection.'\n      )\n    }\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling addToUserSelection.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuid) {\n      uuid.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuid'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/userselections/${encodeURIComponent(\n        String(selectionIdentifier)\n      )}/${encodeURIComponent(String(userIdentifier))}`,\n      null,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Add a user selection set\n   * @param selectionApiModel\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public createPersistentSelectionType(\n    selectionApiModel: SelectionApiModel,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public createPersistentSelectionType(\n    selectionApiModel: SelectionApiModel,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public createPersistentSelectionType(\n    selectionApiModel: SelectionApiModel,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public createPersistentSelectionType(\n    selectionApiModel: SelectionApiModel,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (selectionApiModel === null || selectionApiModel === undefined) {\n      throw new Error(\n        'Required parameter selectionApiModel was null or undefined when calling createPersistentSelectionType.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json']\n    const httpContentTypeSelected:\n      | string\n      | undefined = this.configuration.selectHeaderContentType(consumes)\n    if (httpContentTypeSelected !== undefined) {\n      headers = headers.set('Content-Type', httpContentTypeSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.put<string>(\n      `${this.configuration.basePath}/userselections`,\n      selectionApiModel,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Remove items to a user selection set\n   * @param selectionIdentifier Selection identifier\n   * @param userIdentifier User identifier\n   * @param uuid One or more record UUIDs. If null, remove all.\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public deleteFromUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<string>\n  public deleteFromUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<string>>\n  public deleteFromUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<string>>\n  public deleteFromUserSelection(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    uuid?: Array<string>,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (selectionIdentifier === null || selectionIdentifier === undefined) {\n      throw new Error(\n        'Required parameter selectionIdentifier was null or undefined when calling deleteFromUserSelection.'\n      )\n    }\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling deleteFromUserSelection.'\n      )\n    }\n\n    let queryParameters = new HttpParams({ encoder: this.encoder })\n    if (uuid) {\n      uuid.forEach((element) => {\n        queryParameters = this.addToHttpParams(\n          queryParameters,\n          <any>element,\n          'uuid'\n        )\n      })\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.delete<string>(\n      `${this.configuration.basePath}/userselections/${encodeURIComponent(\n        String(selectionIdentifier)\n      )}/${encodeURIComponent(String(userIdentifier))}`,\n      {\n        params: queryParameters,\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get list of user selection sets\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSelectionList(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<SelectionApiModel>>\n  public getSelectionList(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<SelectionApiModel>>>\n  public getSelectionList(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<SelectionApiModel>>>\n  public getSelectionList(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<SelectionApiModel>>(\n      `${this.configuration.basePath}/userselections`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n\n  /**\n   * Get record in a user selection set\n   * @param selectionIdentifier Selection identifier\n   * @param userIdentifier User identifier\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getSelectionRecords(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<Array<string>>\n  public getSelectionRecords(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpResponse<Array<string>>>\n  public getSelectionRecords(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<HttpEvent<Array<string>>>\n  public getSelectionRecords(\n    selectionIdentifier: number,\n    userIdentifier: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: { httpHeaderAccept?: 'application/json' }\n  ): Observable<any> {\n    if (selectionIdentifier === null || selectionIdentifier === undefined) {\n      throw new Error(\n        'Required parameter selectionIdentifier was null or undefined when calling getSelectionRecords.'\n      )\n    }\n    if (userIdentifier === null || userIdentifier === undefined) {\n      throw new Error(\n        'Required parameter userIdentifier was null or undefined when calling getSelectionRecords.'\n      )\n    }\n\n    let headers = this.defaultHeaders\n\n    let httpHeaderAcceptSelected: string | undefined =\n      options && options.httpHeaderAccept\n    if (httpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['application/json']\n      httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(\n        httpHeaderAccepts\n      )\n    }\n    if (httpHeaderAcceptSelected !== undefined) {\n      headers = headers.set('Accept', httpHeaderAcceptSelected)\n    }\n\n    let responseType: 'text' | 'json' = 'json'\n    if (\n      httpHeaderAcceptSelected &&\n      httpHeaderAcceptSelected.startsWith('text')\n    ) {\n      responseType = 'text'\n    }\n\n    return this.httpClient.get<Array<string>>(\n      `${this.configuration.basePath}/userselections/${encodeURIComponent(\n        String(selectionIdentifier)\n      )}/${encodeURIComponent(String(userIdentifier))}`,\n      {\n        responseType: <any>responseType,\n        withCredentials: this.configuration.withCredentials,\n        headers: headers,\n        observe: observe,\n        reportProgress: reportProgress,\n      }\n    )\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http'\n\nexport interface ConfigurationParameters {\n  apiKeys?: { [key: string]: string }\n  username?: string\n  password?: string\n  accessToken?: string | (() => string)\n  basePath?: string\n  withCredentials?: boolean\n  encoder?: HttpParameterCodec\n}\n\nexport class Configuration {\n  apiKeys?: { [key: string]: string }\n  username?: string\n  password?: string\n  accessToken?: string | (() => string)\n  basePath?: string\n  withCredentials?: boolean\n  encoder?: HttpParameterCodec\n\n  constructor(configurationParameters: ConfigurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys\n    this.username = configurationParameters.username\n    this.password = configurationParameters.password\n    this.accessToken = configurationParameters.accessToken\n    this.basePath = configurationParameters.basePath\n    this.withCredentials = configurationParameters.withCredentials\n    this.encoder = configurationParameters.encoder\n  }\n\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderContentType(contentTypes: string[]): string | undefined {\n    if (contentTypes.length === 0) {\n      return undefined\n    }\n\n    const type = contentTypes.find((x: string) => this.isJsonMime(x))\n    if (type === undefined) {\n      return contentTypes[0]\n    }\n    return type\n  }\n\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderAccept(accepts: string[]): string | undefined {\n    if (accepts.length === 0) {\n      return undefined\n    }\n\n    const type = accepts.find((x: string) => this.isJsonMime(x))\n    if (type === undefined) {\n      return accepts[0]\n    }\n    return type\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp(\n      '^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$',\n      'i'\n    )\n    return (\n      mime !== null &&\n      (jsonMime.test(mime) ||\n        mime.toLowerCase() === 'application/json-patch+json')\n    )\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http'\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n  encodeKey(k: string): string {\n    return encodeURIComponent(k)\n  }\n  encodeValue(v: string): string {\n    return encodeURIComponent(v)\n  }\n  decodeKey(k: string): string {\n    return decodeURIComponent(k)\n  }\n  decodeValue(v: string): string {\n    return decodeURIComponent(v)\n  }\n}\n","export * from './api/api'\nexport * from './model/models'\nexport * from './variables'\nexport * from './configuration'\nexport * from './api.module'\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface AddressApiModel {\n  state?: string\n  address?: string\n  id?: number\n  city?: string\n  zip?: string\n  country?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface BatchEditParameterApiModel {\n  xpath: string\n  value: string\n  condition?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface CategoryApiModel {\n  id?: string\n  label?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface CategoryResponseApiModel {\n  label?: { [key: string]: string }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface CrsApiModel {\n  code?: string\n  authority?: string\n  version?: string\n  codeSpace?: string\n  description?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface EntryApiModel {\n  code: string\n  label: string\n  description: string\n  hideInEditMode?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ExtentDtoApiModel {\n  href?: string\n  type?: string\n  xpath?: string\n  description?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ExternalResourceManagementPropertiesApiModel {\n  url?: string\n  windowParameters?: string\n  modal?: boolean\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface FeatureResponseApiModel {\n  decodeMap?: { [key: string]: Array<string> }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface FieldApiModel {\n  template?: string\n  name?: string\n  xpath?: string\n  indexField?: string\n  use?: string\n  removable?: boolean\n  insertMode?: string\n  codelist?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface GrantedAuthorityApiModel {\n  authority?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface GroupOperationsApiModel {\n  operations?: { [key: string]: boolean }\n  group?: number\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface GroupPrivilegeApiModel {\n  operations?: { [key: string]: boolean }\n  group?: number\n  userProfiles?: Array<GroupPrivilegeApiModel.UserProfilesEnum>\n  userGroup?: boolean\n  reserved?: boolean\n  userProfile?: Array<GroupPrivilegeApiModel.UserProfileEnum>\n}\nexport namespace GroupPrivilegeApiModel {\n  export type UserProfilesEnum =\n    | 'Administrator'\n    | 'UserAdmin'\n    | 'Reviewer'\n    | 'Editor'\n    | 'RegisteredUser'\n    | 'Guest'\n    | 'Monitor'\n  export const UserProfilesEnum = {\n    Administrator: 'Administrator' as UserProfilesEnum,\n    UserAdmin: 'UserAdmin' as UserProfilesEnum,\n    Reviewer: 'Reviewer' as UserProfilesEnum,\n    Editor: 'Editor' as UserProfilesEnum,\n    RegisteredUser: 'RegisteredUser' as UserProfilesEnum,\n    Guest: 'Guest' as UserProfilesEnum,\n    Monitor: 'Monitor' as UserProfilesEnum,\n  }\n  export type UserProfileEnum =\n    | 'Administrator'\n    | 'UserAdmin'\n    | 'Reviewer'\n    | 'Editor'\n    | 'RegisteredUser'\n    | 'Guest'\n    | 'Monitor'\n  export const UserProfileEnum = {\n    Administrator: 'Administrator' as UserProfileEnum,\n    UserAdmin: 'UserAdmin' as UserProfileEnum,\n    Reviewer: 'Reviewer' as UserProfileEnum,\n    Editor: 'Editor' as UserProfileEnum,\n    RegisteredUser: 'RegisteredUser' as UserProfileEnum,\n    Guest: 'Guest' as UserProfileEnum,\n    Monitor: 'Monitor' as UserProfileEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface IProcessingReportApiModel {\n  running?: boolean\n  uuid?: string\n  startIsoDateTime?: string\n  endIsoDateTime?: string\n  ellapsedTimeInSeconds?: number\n  totalTimeInSeconds?: number\n  type?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ISODateApiModel {\n  internalDateTime?: string\n  hours?: number\n  minutes?: number\n  seconds?: number\n  years?: number\n  months?: number\n  days?: number\n  dateAndTime?: string\n  dateAsString?: string\n  timeInSeconds?: number\n  dateOnly?: boolean\n  dateYearOnly?: boolean\n  dateYearMonthOnly?: boolean\n  timeAsString?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface InfoReportApiModel {\n  message?: string\n  uuid?: string\n  draft?: boolean\n  approved?: boolean\n  date?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface InlineObjectApiModel {\n  file?: Blob\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface InlineObject1ApiModel {\n  file?: Blob\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface InlineObject2ApiModel {\n  file?: Blob\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface InlineObject3ApiModel {\n  file?: Blob\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface IsoLanguageApiModel {\n  id?: number\n  code?: string\n  shortCode?: string\n  label?: { [key: string]: string }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface KeywordBeanApiModel {\n  values?: { [key: string]: string }\n  definitions?: { [key: string]: string }\n  coordEast?: string\n  coordWest?: string\n  coordSouth?: string\n  coordNorth?: string\n  thesaurusKey?: string\n  thesaurusInfo?: KeywordBeanApiModel\n  namespaceCode?: KeywordBeanApiModel\n  definition?: string\n  uri?: string\n  value?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { MetadataLinkApiModel } from './metadataLink.api.model'\nimport { LinkStatusApiModel } from './linkStatus.api.model'\nimport { ISODateApiModel } from './iSODate.api.model'\n\nexport interface LinkApiModel {\n  records?: Set<MetadataLinkApiModel>\n  linkStatus?: Set<LinkStatusApiModel>\n  lastState?: number\n  lastCheck?: ISODateApiModel\n  protocol?: string\n  url?: string\n  id?: number\n  linkType?: LinkApiModel.LinkTypeEnum\n}\nexport namespace LinkApiModel {\n  export type LinkTypeEnum = 'HTTP' | 'METADATA'\n  export const LinkTypeEnum = {\n    HTTP: 'HTTP' as LinkTypeEnum,\n    METADATA: 'METADATA' as LinkTypeEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface LocalizedStringApiModel {\n  value?: string\n  lang?: string\n  href?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface LogFileResponseApiModel {\n  file?: string\n  name?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface MapServerApiModel {\n  namespace?: string\n  description?: string\n  password?: string\n  username?: string\n  id?: number\n  namespacePrefix?: string\n  configurl?: string\n  wmsurl?: string\n  wfsurl?: string\n  wcsurl?: string\n  stylerurl?: string\n  pushStyleInWorkspace_JpaWorkaround?: string\n  pushStyleInWorkspace?: MapServerApiModel\n  name?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface MeResponseApiModel {\n  id?: string\n  profile?: string\n  username?: string\n  name?: string\n  surname?: string\n  email?: string\n  hash?: string\n  organisation?: string\n  admin?: boolean\n  groupsWithRegisteredUser?: Array<number>\n  groupsWithEditor?: Array<number>\n  groupsWithReviewer?: Array<number>\n  groupsWithUserAdmin?: Array<number>\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface MetadataCategoryApiModel {\n  id?: number\n  name?: string\n  label?: { [key: string]: string }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface MetadataIdentifierTemplateApiModel {\n  id?: number\n  template?: string\n  systemProvided_JPAWorkaround?: string\n  systemProvided?: boolean\n  systemDefault?: boolean\n  name?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface MetadataLinkApiModel {\n  metadataId?: number\n  metadataUuid?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { ExternalResourceManagementPropertiesApiModel } from './externalResourceManagementProperties.api.model'\n\nexport interface MetadataResourceApiModel {\n  version?: string\n  filename?: string\n  url?: string\n  metadataUuid?: string\n  metadataId?: number\n  approved?: boolean\n  visibility?: MetadataResourceApiModel.VisibilityEnum\n  externalResourceManagementProperties?: ExternalResourceManagementPropertiesApiModel\n  lastModification?: string\n  id?: string\n  size?: number\n}\nexport namespace MetadataResourceApiModel {\n  export type VisibilityEnum = 'public' | 'private'\n  export const VisibilityEnum = {\n    Public: 'public' as VisibilityEnum,\n    Private: 'private' as VisibilityEnum,\n  }\n}\n","export * from './address.api.model'\nexport * from './anonymousMapserver.api.model'\nexport * from './associated.api.model'\nexport * from './associatedSiblingMetadataItem.api.model'\nexport * from './attributeTable.api.model'\nexport * from './batchEditParameter.api.model'\nexport * from './batchEditing.api.model'\nexport * from './category.api.model'\nexport * from './categoryResponse.api.model'\nexport * from './children.api.model'\nexport * from './codelist.api.model'\nexport * from './crs.api.model'\nexport * from './dataset.api.model'\nexport * from './description.api.model'\nexport * from './element.api.model'\nexport * from './entry.api.model'\nexport * from './extentDto.api.model'\nexport * from './externalResourceManagementProperties.api.model'\nexport * from './fCRelatedMetadataItem.api.model'\nexport * from './fcat.api.model'\nexport * from './featureResponse.api.model'\nexport * from './featureType.api.model'\nexport * from './field.api.model'\nexport * from './grantedAuthority.api.model'\nexport * from './group.api.model'\nexport * from './groupOperations.api.model'\nexport * from './groupPrivilege.api.model'\nexport * from './hasfeaturecats.api.model'\nexport * from './hassource.api.model'\nexport * from './iProcessingReport.api.model'\nexport * from './iSODate.api.model'\nexport * from './infoReport.api.model'\nexport * from './inlineObject1.api.model'\nexport * from './inlineObject2.api.model'\nexport * from './inlineObject3.api.model'\nexport * from './inlineObject.api.model'\nexport * from './isoLanguage.api.model'\nexport * from './keywordBean.api.model'\nexport * from './link.api.model'\nexport * from './linkStatus.api.model'\nexport * from './listRegionsResponse.api.model'\nexport * from './localizedString.api.model'\nexport * from './logFileResponse.api.model'\nexport * from './mapServer.api.model'\nexport * from './meResponse.api.model'\nexport * from './metadataCategory.api.model'\nexport * from './metadataIdentifierTemplate.api.model'\nexport * from './metadataLink.api.model'\nexport * from './metadataProcessingReport.api.model'\nexport * from './metadataReplacementProcessingReport.api.model'\nexport * from './metadataResource.api.model'\nexport * from './metadataSchema.api.model'\nexport * from './metadataStatus.api.model'\nexport * from './metadataStatusResponse.api.model'\nexport * from './metadataWorkflowStatusResponse.api.model'\nexport * from './multilingualValue.api.model'\nexport * from './online.api.model'\nexport * from './operation.api.model'\nexport * from './ownerResponse.api.model'\nexport * from './pageJSONWrapper.api.model'\nexport * from './pageLink.api.model'\nexport * from './pageable.api.model'\nexport * from './paginatedUserSearchResponse.api.model'\nexport * from './parent.api.model'\nexport * from './passwordUpdateParameter.api.model'\nexport * from './processingReport.api.model'\nexport * from './ratingAverage.api.model'\nexport * from './ratingCriteria.api.model'\nexport * from './regionResponse.api.model'\nexport * from './related.api.model'\nexport * from './relatedLinkItem.api.model'\nexport * from './relatedMetadataItem.api.model'\nexport * from './relatedResponse.api.model'\nexport * from './relatedSiblingMetadataItem.api.model'\nexport * from './relatedThumbnailItem.api.model'\nexport * from './replaceEntryChange.api.model'\nexport * from './replaceReport.api.model'\nexport * from './report.api.model'\nexport * from './reports.api.model'\nexport * from './savedQuery.api.model'\nexport * from './section.api.model'\nexport * from './selection.api.model'\nexport * from './service.api.model'\nexport * from './setting.api.model'\nexport * from './settingsListResponse.api.model'\nexport * from './sharingParameter.api.model'\nexport * from './sharingResponse.api.model'\nexport * from './siblings.api.model'\nexport * from './simpleMetadataProcessingReport.api.model'\nexport * from './siteInformation.api.model'\nexport * from './sort.api.model'\nexport * from './source.api.model'\nexport * from './status.api.model'\nexport * from './statusValue.api.model'\nexport * from './suggestionType.api.model'\nexport * from './systemInfo.api.model'\nexport * from './thumbnail.api.model'\nexport * from './transferRequest.api.model'\nexport * from './uiSetting.api.model'\nexport * from './user.api.model'\nexport * from './userDto.api.model'\nexport * from './userFeedbackDTO.api.model'\nexport * from './userGroup.api.model'\nexport * from './userGroupId.api.model'\nexport * from './userGroupsResponse.api.model'\nexport * from './userRegisterDto.api.model'\nexport * from './userSearchDto.api.model'\nexport * from './userSecurity.api.model'\nexport * from './values.api.model'\nexport * from './xsltMetadataProcessingReport.api.model'\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface OperationApiModel {\n  id?: number\n  reserved?: boolean\n  reservedOperation?: OperationApiModel.ReservedOperationEnum\n  name?: string\n  label?: { [key: string]: string }\n}\nexport namespace OperationApiModel {\n  export type ReservedOperationEnum =\n    | 'view'\n    | 'download'\n    | 'editing'\n    | 'notify'\n    | 'dynamic'\n    | 'featured'\n  export const ReservedOperationEnum = {\n    View: 'view' as ReservedOperationEnum,\n    Download: 'download' as ReservedOperationEnum,\n    Editing: 'editing' as ReservedOperationEnum,\n    Notify: 'notify' as ReservedOperationEnum,\n    Dynamic: 'dynamic' as ReservedOperationEnum,\n    Featured: 'featured' as ReservedOperationEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface OwnerResponseApiModel {\n  id?: number\n  name?: string\n  records?: number\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface PageJSONWrapperApiModel {\n  format?: PageJSONWrapperApiModel.FormatEnum\n  status?: PageJSONWrapperApiModel.StatusEnum\n  link?: string\n  sections?: Array<PageJSONWrapperApiModel.SectionsEnum>\n  linkText?: string\n  language?: string\n}\nexport namespace PageJSONWrapperApiModel {\n  export type FormatEnum = 'LINK' | 'HTML' | 'TEXT' | 'MARKDOWN' | 'WIKI'\n  export const FormatEnum = {\n    LINK: 'LINK' as FormatEnum,\n    HTML: 'HTML' as FormatEnum,\n    TEXT: 'TEXT' as FormatEnum,\n    MARKDOWN: 'MARKDOWN' as FormatEnum,\n    WIKI: 'WIKI' as FormatEnum,\n  }\n  export type StatusEnum = 'PUBLIC' | 'PUBLIC_ONLY' | 'PRIVATE' | 'HIDDEN'\n  export const StatusEnum = {\n    PUBLIC: 'PUBLIC' as StatusEnum,\n    PUBLICONLY: 'PUBLIC_ONLY' as StatusEnum,\n    PRIVATE: 'PRIVATE' as StatusEnum,\n    HIDDEN: 'HIDDEN' as StatusEnum,\n  }\n  export type SectionsEnum =\n    | 'ALL'\n    | 'TOP'\n    | 'FOOTER'\n    | 'MENU'\n    | 'SUBMENU'\n    | 'CUSTOM_MENU1'\n    | 'CUSTOM_MENU2'\n    | 'CUSTOM_MENU3'\n    | 'DRAFT'\n  export const SectionsEnum = {\n    ALL: 'ALL' as SectionsEnum,\n    TOP: 'TOP' as SectionsEnum,\n    FOOTER: 'FOOTER' as SectionsEnum,\n    MENU: 'MENU' as SectionsEnum,\n    SUBMENU: 'SUBMENU' as SectionsEnum,\n    CUSTOMMENU1: 'CUSTOM_MENU1' as SectionsEnum,\n    CUSTOMMENU2: 'CUSTOM_MENU2' as SectionsEnum,\n    CUSTOMMENU3: 'CUSTOM_MENU3' as SectionsEnum,\n    DRAFT: 'DRAFT' as SectionsEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface PasswordUpdateParameterApiModel {\n  password?: string\n  changeKey?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface RatingAverageApiModel {\n  ratingCount?: number\n  ratingAverages?: { [key: string]: number }\n  userfeedbackCount?: number\n  lastComment?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface RatingCriteriaApiModel {\n  id?: number\n  internal?: boolean\n  name?: string\n  label?: { [key: string]: string }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface RegionResponseApiModel {\n  north?: number\n  east?: number\n  south?: number\n  west?: number\n  label?: { [key: string]: string }\n  hasGeom?: boolean\n  categoryId?: string\n  id?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ReplaceEntryChangeApiModel {\n  originalVal?: string\n  changedVal?: string\n  fieldId?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ReportApiModel {\n  message?: string\n  uuid?: string\n  draft?: boolean\n  approved?: boolean\n  date?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SavedQueryApiModel {\n  id?: string\n  xpath?: string\n  label?: string\n  cleanValues?: string\n  parameters?: Array<string>\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SelectionApiModel {\n  id?: number\n  name?: string\n  watchable?: boolean\n  label?: { [key: string]: string }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SettingApiModel {\n  name?: string\n  value?: string\n  dataType?: SettingApiModel.DataTypeEnum\n  position?: number\n  internal?: boolean\n  internal_JpaWorkaround?: string\n}\nexport namespace SettingApiModel {\n  export type DataTypeEnum = 'STRING' | 'INT' | 'BOOLEAN' | 'JSON'\n  export const DataTypeEnum = {\n    STRING: 'STRING' as DataTypeEnum,\n    INT: 'INT' as DataTypeEnum,\n    BOOLEAN: 'BOOLEAN' as DataTypeEnum,\n    JSON: 'JSON' as DataTypeEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SiteInformationApiModel {\n  catalogue?: { [key: string]: string }\n  index?: { [key: string]: string }\n  main?: { [key: string]: string }\n  database?: { [key: string]: string }\n  version?: { [key: string]: string }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SortApiModel {\n  sorted?: boolean\n  unsorted?: boolean\n  empty?: boolean\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface StatusApiModel {\n  id?: string\n  state?: StatusApiModel.StateEnum\n  date?: string\n  message?: string\n}\nexport namespace StatusApiModel {\n  export type StateEnum =\n    | 'RED'\n    | 'UNINITIALIZED'\n    | 'YELLOW'\n    | 'GREEN'\n    | 'DISABLED'\n  export const StateEnum = {\n    RED: 'RED' as StateEnum,\n    UNINITIALIZED: 'UNINITIALIZED' as StateEnum,\n    YELLOW: 'YELLOW' as StateEnum,\n    GREEN: 'GREEN' as StateEnum,\n    DISABLED: 'DISABLED' as StateEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface StatusValueApiModel {\n  type?: StatusValueApiModel.TypeEnum\n  notificationLevel?: StatusValueApiModel.NotificationLevelEnum\n  displayOrder?: number\n  id?: number\n  reserved?: boolean\n  reserved_JpaWorkaround?: string\n  name?: string\n  label?: { [key: string]: string }\n}\nexport namespace StatusValueApiModel {\n  export type TypeEnum = 'workflow' | 'task' | 'event'\n  export const TypeEnum = {\n    Workflow: 'workflow' as TypeEnum,\n    Task: 'task' as TypeEnum,\n    Event: 'event' as TypeEnum,\n  }\n  export type NotificationLevelEnum =\n    | 'statusUserOwner'\n    | 'catalogueAdministrator'\n    | 'catalogueProfileAdministrator'\n    | 'catalogueProfileUserAdmin'\n    | 'catalogueProfileReviewer'\n    | 'catalogueProfileEditor'\n    | 'catalogueProfileRegisteredUser'\n    | 'catalogueProfileGuest'\n    | 'recordProfileReviewer'\n    | 'recordUserAuthor'\n  export const NotificationLevelEnum = {\n    StatusUserOwner: 'statusUserOwner' as NotificationLevelEnum,\n    CatalogueAdministrator: 'catalogueAdministrator' as NotificationLevelEnum,\n    CatalogueProfileAdministrator: 'catalogueProfileAdministrator' as NotificationLevelEnum,\n    CatalogueProfileUserAdmin: 'catalogueProfileUserAdmin' as NotificationLevelEnum,\n    CatalogueProfileReviewer: 'catalogueProfileReviewer' as NotificationLevelEnum,\n    CatalogueProfileEditor: 'catalogueProfileEditor' as NotificationLevelEnum,\n    CatalogueProfileRegisteredUser: 'catalogueProfileRegisteredUser' as NotificationLevelEnum,\n    CatalogueProfileGuest: 'catalogueProfileGuest' as NotificationLevelEnum,\n    RecordProfileReviewer: 'recordProfileReviewer' as NotificationLevelEnum,\n    RecordUserAuthor: 'recordUserAuthor' as NotificationLevelEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SuggestionTypeApiModel {\n  name: string\n  operational: string\n  params?: string\n  process?: string\n  id?: string\n  category?: string\n  target?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface SystemInfoApiModel {\n  stagingProfile?: string\n  buildDate?: string\n  version?: string\n  subVersion?: string\n  buildOsInfo?: string\n  buildJavaVersion?: string\n  buildJavaVendor?: string\n  scmUrl?: string\n  scmRevision?: string\n  devMode?: boolean\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface TransferRequestApiModel {\n  sourceUser?: number\n  sourceGroup?: number\n  targetUser?: number\n  targetGroup?: number\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface UiSettingApiModel {\n  id?: string\n  configuration?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { UserSecurityApiModel } from './userSecurity.api.model'\nimport { GrantedAuthorityApiModel } from './grantedAuthority.api.model'\nimport { AddressApiModel } from './address.api.model'\n\nexport interface UserApiModel {\n  profile?: UserApiModel.ProfileEnum\n  surname?: string\n  enabled?: boolean\n  username?: string\n  id?: number\n  email?: string\n  emailAddresses?: Set<string>\n  addresses?: Set<AddressApiModel>\n  primaryAddress?: AddressApiModel\n  organisation?: string\n  kind?: string\n  security?: UserSecurityApiModel\n  lastLoginDate?: string\n  authorities?: Array<GrantedAuthorityApiModel>\n  accountNonExpired?: boolean\n  accountNonLocked?: boolean\n  credentialsNonExpired?: boolean\n  name?: string\n}\nexport namespace UserApiModel {\n  export type ProfileEnum =\n    | 'Administrator'\n    | 'UserAdmin'\n    | 'Reviewer'\n    | 'Editor'\n    | 'RegisteredUser'\n    | 'Guest'\n    | 'Monitor'\n  export const ProfileEnum = {\n    Administrator: 'Administrator' as ProfileEnum,\n    UserAdmin: 'UserAdmin' as ProfileEnum,\n    Reviewer: 'Reviewer' as ProfileEnum,\n    Editor: 'Editor' as ProfileEnum,\n    RegisteredUser: 'RegisteredUser' as ProfileEnum,\n    Guest: 'Guest' as ProfileEnum,\n    Monitor: 'Monitor' as ProfileEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface UserFeedbackDTOApiModel {\n  uuid?: string\n  comment?: string\n  rating?: { [key: string]: number }\n  ratingAVG?: number\n  metadataUUID?: string\n  metadataTitle?: string\n  authorUserId?: number\n  authorName?: string\n  authorEmail?: string\n  authorOrganization?: string\n  approverName?: string\n  optionPrivacy?: boolean\n  published?: boolean\n  parentUuid?: string\n  captcha?: string\n  date?: string\n  showApproveButton?: boolean\n  keywords?: Array<string>\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { UserApiModel } from './user.api.model'\nimport { UserGroupIdApiModel } from './userGroupId.api.model'\nimport { GroupApiModel } from './group.api.model'\n\nexport interface UserGroupApiModel {\n  profile?: UserGroupApiModel.ProfileEnum\n  group?: GroupApiModel\n  id?: UserGroupIdApiModel\n  user?: UserApiModel\n}\nexport namespace UserGroupApiModel {\n  export type ProfileEnum =\n    | 'Administrator'\n    | 'UserAdmin'\n    | 'Reviewer'\n    | 'Editor'\n    | 'RegisteredUser'\n    | 'Guest'\n    | 'Monitor'\n  export const ProfileEnum = {\n    Administrator: 'Administrator' as ProfileEnum,\n    UserAdmin: 'UserAdmin' as ProfileEnum,\n    Reviewer: 'Reviewer' as ProfileEnum,\n    Editor: 'Editor' as ProfileEnum,\n    RegisteredUser: 'RegisteredUser' as ProfileEnum,\n    Guest: 'Guest' as ProfileEnum,\n    Monitor: 'Monitor' as ProfileEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface UserGroupIdApiModel {\n  profile?: UserGroupIdApiModel.ProfileEnum\n  groupId?: number\n  userId?: number\n}\nexport namespace UserGroupIdApiModel {\n  export type ProfileEnum =\n    | 'Administrator'\n    | 'UserAdmin'\n    | 'Reviewer'\n    | 'Editor'\n    | 'RegisteredUser'\n    | 'Guest'\n    | 'Monitor'\n  export const ProfileEnum = {\n    Administrator: 'Administrator' as ProfileEnum,\n    UserAdmin: 'UserAdmin' as ProfileEnum,\n    Reviewer: 'Reviewer' as ProfileEnum,\n    Editor: 'Editor' as ProfileEnum,\n    RegisteredUser: 'RegisteredUser' as ProfileEnum,\n    Guest: 'Guest' as ProfileEnum,\n    Monitor: 'Monitor' as ProfileEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface UserGroupsResponseApiModel {\n  userId?: number\n  userName?: string\n  groupId?: number\n  groupName?: string\n  userProfile?: string\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface UserSearchDtoApiModel {\n  id?: number\n  url?: string\n  featuredType?: string\n  creationDate?: string\n  creatorId?: number\n  creator?: string\n  logo?: string\n  names?: { [key: string]: string }\n  groups?: Array<number>\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nexport interface UserSecurityApiModel {\n  authType?: string\n  nodeId?: string\n  securityNotificationsString?: UserSecurityApiModel\n  securityNotifications?: Set<UserSecurityApiModel.SecurityNotificationsEnum>\n}\nexport namespace UserSecurityApiModel {\n  export type SecurityNotificationsEnum = 'UPDATE_HASH_REQUIRED' | 'UNKNOWN'\n  export const SecurityNotificationsEnum = {\n    UPDATEHASHREQUIRED: 'UPDATE_HASH_REQUIRED' as SecurityNotificationsEnum,\n    UNKNOWN: 'UNKNOWN' as SecurityNotificationsEnum,\n  }\n}\n","/**\n * GeoNetwork 4.0.3 OpenAPI Documentation\n * This is the description of the GeoNetwork OpenAPI. Use this API to manage your catalog.\n *\n * The version of the OpenAPI document: 4.0.3\n * Contact: geonetwork-users@lists.sourceforge.net\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ValuesApiModel {\n  label?: string\n  code?: string\n  definition?: string\n}\n","import { InjectionToken } from '@angular/core'\n\nexport const BASE_PATH = new InjectionToken<string>('basePath')\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  tsv: '   ',\n  ssv: ' ',\n  pipes: '|',\n}\n","/*\n * Public API Surface of search\n */\n\nexport * from './lib/search.module'\nexport * from './lib/state/actions'\nexport * from './lib/state/selectors'\nexport * from './lib/state/search.facade'\nexport * from './lib/state/effects'\nexport * from './lib/state/reducer'\nexport * from './lib/elasticsearch'\n","export enum ElasticsearchMetadataModels {\n  SUMMARY,\n  BRIEF,\n  FULL,\n}\n\nexport const ES_SOURCE_SUMMARY = [\n  'uuid',\n  'id',\n  'title',\n  'resource*',\n  'resourceTitleObject',\n  'resourceAbstractObject',\n  'overview',\n  'logo',\n  'codelist_status_text',\n]\n\nexport const ES_SOURCE_BRIEF = [\n  ...ES_SOURCE_SUMMARY,\n  'resourceTypeObject',\n  'Org',\n  'link',\n]\n\nexport const ElasticSearchSources = {\n  [ElasticsearchMetadataModels.SUMMARY]: ES_SOURCE_SUMMARY,\n  [ElasticsearchMetadataModels.BRIEF]: ES_SOURCE_BRIEF,\n}\n","import { Injectable } from '@angular/core'\nimport { MetadataUrlService, RecordBrief, RecordSummary } from '@lib/common'\nimport { SearchResponse } from 'elasticsearch'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ElasticsearchMapper {\n  constructor(private metadataUrlService: MetadataUrlService) {}\n\n  toRecordSummary(\n    response: SearchResponse<any>,\n    apiPath?: string\n  ): RecordSummary[] {\n    return response.hits.hits.map((hit) => ({\n      uuid: hit._id,\n      id: hit._source.id,\n      title: hit._source.resourceTitleObject?.default || 'no title',\n      abstract: hit._source.resourceAbstractObject?.default || 'no abstract',\n      thumbnailUrl: this.getFirstValue(hit._source.overview)?.url || '',\n      metadataUrl: this.metadataUrlService.getUrl(hit._source.uuid, apiPath),\n      downloadable: (hit as any).download,\n      viewable: (hit as any).view,\n      logoUrl: `/geonetwork${hit._source.logo}`,\n      updateFrequency: this.getFirstValue(hit._source.codelist_status_text),\n      link: hit._source.link,\n    }))\n  }\n\n  toRecordBrief(\n    response: SearchResponse<any>,\n    apiPath?: string\n  ): RecordBrief[] {\n    return response.hits.hits.map((hit) => ({\n      uuid: hit._id,\n      id: hit._source.id,\n      title: hit._source.resourceTitleObject?.default || 'no title',\n      abstract: hit._source.resourceAbstractObject?.default || 'no abstract',\n      thumbnailUrl: this.getFirstValue(hit._source.overview)?.url || '',\n      metadataUrl: this.metadataUrlService.getUrl(hit._source.uuid, apiPath),\n      downloadable: (hit as any).download,\n      viewable: (hit as any).view,\n      logoUrl: `/geonetwork${hit._source.logo}`,\n      updateFrequency: this.getFirstValue(hit._source.codelist_status_text),\n      link: hit._source.link,\n      organization: hit._source.Org,\n      type: hit._source.resourceType[0],\n    }))\n  }\n\n  private getFirstValue(field) {\n    return Array.isArray(field) ? field[0] : field\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { SortParams } from '@lib/common'\nimport { NameList, SearchParams } from 'elasticsearch'\nimport { SearchStateSearch } from '../state/reducer'\nimport { ElasticsearchMetadataModels, ElasticSearchSources } from './constant'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ElasticsearchService {\n  constructor() {}\n\n  getSearchRequestBody(\n    state: SearchStateSearch,\n    model: ElasticsearchMetadataModels\n  ): SearchParams {\n    const { size, from } = state.params\n    const payload = {\n      aggregations: state.config.aggregations,\n      from,\n      size,\n      sort: this.buildPayloadSort(state) as NameList,\n      query: this.buildPayloadQuery(state),\n      _source: ElasticSearchSources[model],\n    }\n    return payload\n  }\n\n  private buildPayloadSort(state: SearchStateSearch): SortParams {\n    const { sortBy } = state.params\n    return sortBy\n      ? sortBy.split(',').map((s) => {\n          if (s.startsWith('-')) {\n            return { [s.substring(1)]: 'desc' }\n          } else {\n            return s\n          }\n        })\n      : undefined\n  }\n\n  private buildPayloadQuery(state: SearchStateSearch) {\n    const { filters } = state.params\n    const { any, ...searchFilters } = filters\n    const queryFilters = this.stateFiltersToQueryString(searchFilters)\n    const queryAny = `(${any || '*'})`\n    const query =\n      queryAny + (queryFilters.length > 0 ? ` AND ${queryFilters}` : '')\n\n    const partialQuery = {\n      bool: {\n        must: [{ query_string: { query } }],\n        filter: this.buildPayloadFilter(state),\n      },\n    }\n    return partialQuery\n  }\n\n  private buildPayloadFilter(state: SearchStateSearch) {\n    const { filters } = state.config\n    const { custom, elastic } = filters\n    const queryString = this.stateFiltersToQueryString(custom)\n    const query = []\n    if (elastic) {\n      if (!Array.isArray(elastic)) {\n        query.push(elastic)\n      } else {\n        query.push(...elastic)\n      }\n    } else if (custom) {\n      query.push({\n        query_string: {\n          query: queryString,\n        },\n      })\n    }\n    return query\n  }\n\n  buildMoreOnAggregationPayload(\n    state: SearchStateSearch,\n    key: string\n  ): SearchParams {\n    const payload = {\n      aggregations: { [key]: state.config.aggregations[key] },\n      size: 0,\n      query: this.buildPayloadQuery(state),\n    }\n    return payload\n  }\n\n  combineQueryGroups(queryGroups) {\n    return queryGroups ? queryGroups.join(' AND ').trim() : ''\n  }\n\n  /**\n   * Facets state is an object like this:\n   *\n   * {\n   *   'tag': {\n   *     'world': true,\n   *     'vector': true\n   *   },\n   *   'availableInService' : {\n   *     'availableInViewService': '+linkProtocol:\\/OGC:WMS.*\\/'\n   *   },\n   *   'resourceType': {\n   *     'service': {\n   *       'serviceType': {\n   *         'OGC:WMS': true\n   *         'OGC:WFS': false\n   *       }\n   *     },\n   *     'download': {\n   *       'serviceType': {\n   *       }\n   *     },\n   *     'dataset': true\n   *   }\n   * }\n   */\n  stateFiltersToQueryString(facetsState) {\n    const query = []\n    for (const indexKey in facetsState) {\n      if (facetsState.hasOwnProperty(indexKey)) {\n        const queryChunk = this.parseStateNode(\n          indexKey,\n          facetsState[indexKey],\n          undefined\n        )\n        if (queryChunk) {\n          query.push(queryChunk)\n        }\n      }\n    }\n    return this.combineQueryGroups(query)\n  }\n\n  private parseStateNode(nodeName, node, indexKey) {\n    let queryString = ''\n    if (node && typeof node === 'object') {\n      const chunks = []\n      for (const p in node) {\n        // nesting\n        if (node[p] && typeof node[p] === 'object') {\n          const nextLvlKey = Object.keys(node[p])[0]\n          const nextLvlState = node[p][nextLvlKey]\n          if (Object.keys(nextLvlState).length) {\n            const nestedChunks = [nodeName + ':' + '\"' + p + '\"']\n            const chunk = this.parseStateNode(\n              nextLvlKey,\n              nextLvlState,\n              nextLvlKey\n            ).trim()\n            if (chunk) {\n              nestedChunks.push(chunk)\n            }\n            chunks.push('(' + nestedChunks.join(' AND ') + ')')\n          }\n        } else {\n          const chunk = this.parseStateNode(p, node[p], nodeName).trim()\n          if (chunk) {\n            chunks.push(chunk)\n          }\n        }\n      }\n      if (chunks && chunks.length) {\n        queryString += '('\n        queryString += chunks.join(' ')\n        queryString += ')'\n      }\n    } else if (typeof node === 'string') {\n      queryString += node\n    } else if (node === true) {\n      queryString += indexKey + ':\"' + nodeName + '\"'\n    } else if (node === false) {\n      queryString += '-' + indexKey + ':\"' + nodeName + '\"'\n    }\n    return queryString\n  }\n}\n","export const ES_FIXTURE_AGGS_REQUEST = {\n  'tag.default': { terms: { field: 'tag.default', include: '.*', size: 10 } },\n  availableInServices: {\n    filters: {\n      filters: {\n        availableInViewService: {\n          query_string: { query: '+linkProtocol:/OGC:WMS.*/' },\n        },\n        availableInDownloadService: {\n          query_string: { query: '+linkProtocol:/OGC:WFS.*/' },\n        },\n      },\n    },\n  },\n  resolutionScaleDenominator: {\n    histogram: {\n      field: 'resolutionScaleDenominator',\n      interval: 10000,\n      keyed: true,\n      min_doc_count: 1,\n    },\n    meta: { collapsed: true },\n  },\n}\n","const BUCKETS = [\n  { key: 'Hungary', doc_count: 20 },\n  {\n    key: 'Austria',\n    doc_count: 3,\n  },\n  { key: 'Belgium', doc_count: 8 },\n  {\n    key: 'Bulgaria',\n    doc_count: 2,\n  },\n  { key: 'Croatia', doc_count: 15 },\n  {\n    key: 'Cyprus',\n    doc_count: 5,\n  },\n]\n\nexport const ES_FIXTURE_AGGS_RESPONSE = {\n  'tag.default': {\n    doc_count_error_upper_bound: 0,\n    sum_other_doc_count: 458,\n    buckets: BUCKETS,\n  },\n  availableInServices: {\n    buckets: {\n      availableInDownloadService: { doc_count: 0 },\n      availableInViewService: { doc_count: 299 },\n    },\n  },\n  resolutionScaleDenominator: {\n    meta: { collapsed: true },\n    buckets: {\n      '0.0': { key: 0, doc_count: 2 },\n      '10000.0': { key: 10000, doc_count: 291 },\n      '20000.0': { key: 20000, doc_count: 1 },\n      '50000.0': { key: 50000, doc_count: 9 },\n      '100000.0': { key: 100000, doc_count: 135 },\n      '250000.0': { key: 250000, doc_count: 54 },\n      '1000000.0': { key: 1000000, doc_count: 55 },\n      '2000000.0': { key: 2000000, doc_count: 3 },\n      '3000000.0': { key: 3000000, doc_count: 10 },\n      '1.0E7': { key: 10000000, doc_count: 93 },\n      '2.0E7': { key: 20000000, doc_count: 9 },\n      '6.0E7': { key: 60000000, doc_count: 8 },\n    },\n  },\n}\n\nexport const ES_FIXTURE_AGGS_RESPONSE_MORE = {\n  'tag.default': {\n    doc_count_error_upper_bound: 0,\n    sum_other_doc_count: 456,\n    buckets: [\n      ...BUCKETS,\n      { key: 'Spain', doc_count: 86 },\n      { key: 'United Kingdom', doc_count: 84 },\n    ],\n  },\n}\n","export * from './search-requests'\nexport * from './search-responses'\nexport * from './aggregations-request'\nexport * from './aggregations-response'\n","export const ES_FIXTURE_REQUEST_WITH_AGGS = {\n  from: 0,\n  size: 30,\n  sort: ['_score'],\n  query: {\n    function_score: {\n      boost: '5',\n      functions: [\n        {\n          filter: { exists: { field: 'parentUuid' } },\n          weight: 0.3,\n        },\n        {\n          filter: { match: { codelist_status: 'obsolete' } },\n          weight: 0.3,\n        },\n        {\n          gauss: {\n            dateStamp: {\n              scale: '365d',\n              offset: '90d',\n              decay: 0.5,\n            },\n          },\n        },\n      ],\n      score_mode: 'multiply',\n      query: {\n        bool: {\n          must: [\n            {\n              query_string: {\n                query:\n                  '(marine resourceTitleObject.default:(marine)^2) AND (tag:\"Hungary\")',\n              },\n            },\n            { terms: { isTemplate: ['n'] } },\n          ],\n        },\n      },\n    },\n  },\n  aggregations: {\n    codelist_hierarchyLevel_text: {\n      terms: { field: 'codelist_hierarchyLevel_text' },\n      aggs: { format: { terms: { field: 'format' } } },\n    },\n    codelist_spatialRepresentationType: {\n      terms: {\n        field: 'codelist_spatialRepresentationType',\n        size: 10,\n      },\n    },\n    availableInServices: {\n      filters: {\n        filters: {\n          availableInViewService: {\n            query_string: { query: '+linkProtocol:/OGC:WMS.*/' },\n          },\n          availableInDownloadService: {\n            query_string: { query: '+linkProtocol:/OGC:WFS.*/' },\n          },\n        },\n      },\n    },\n    thesaurus_geonetworkthesaurusexternalthemegemet_tree: {\n      terms: {\n        field: 'thesaurus_geonetworkthesaurusexternalthemegemet_tree',\n        size: 100,\n        order: { _key: 'asc' },\n        include: '[^/]+/?[^/]+',\n      },\n    },\n    tag: { terms: { field: 'tag', include: '.*', size: 21 } },\n    thesaurus_geonetworkthesaurusexternalplaceregions_tree: {\n      terms: {\n        field: 'thesaurus_geonetworkthesaurusexternalplaceregions_tree',\n        size: 100,\n        order: { _key: 'asc' },\n      },\n    },\n    resolutionScaleDenominator: {\n      terms: {\n        field: 'resolutionScaleDenominator',\n        size: 10,\n        order: { _key: 'asc' },\n      },\n    },\n    creationYearForResource: {\n      terms: {\n        field: 'creationYearForResource',\n        size: 10,\n        order: { _key: 'desc' },\n      },\n    },\n    OrgForResource: { terms: { field: 'OrgForResource', size: 15 } },\n    codelist_maintenanceAndUpdateFrequency_text: {\n      terms: {\n        field: 'codelist_maintenanceAndUpdateFrequency_text',\n        size: 10,\n      },\n    },\n    codelist_status_text: {\n      terms: {\n        field: 'codelist_status_text',\n        size: 10,\n      },\n    },\n    dateStamp: { auto_date_histogram: { field: 'dateStamp', buckets: 50 } },\n  },\n  _source: {\n    includes: [\n      'uuid',\n      'id',\n      'creat*',\n      'group*',\n      'logo',\n      'category',\n      'topic*',\n      'inspire*',\n      'resource*',\n      'draft',\n      'overview.*',\n      'owner*',\n      'link*',\n      'image*',\n      'status*',\n      'rating',\n      'tag*',\n      'geom',\n      'contact*',\n      '*Org*',\n      'hasBoundingPolygon',\n      'isTemplate',\n      'valid',\n      'isHarvested',\n      'dateStamp',\n      'documentStandard',\n      'codelist_status*',\n      'recordLink',\n    ],\n  },\n  track_total_hits: true,\n}\n","export const aggsOnly = {\n  took: 7,\n  timed_out: false,\n  _shards: { total: 1, successful: 1, skipped: 0, failed: 0 },\n  hits: { total: { value: 6073, relation: 'eq' }, max_score: null, hits: [] },\n  aggregations: {\n    results: {\n      doc_count_error_upper_bound: 0,\n      sum_other_doc_count: 910,\n      buckets: [\n        { key: 'Habitat e biotopi', doc_count: 49 },\n        { key: 'Habitats and biotopes', doc_count: 49 },\n        { key: 'Habitats et biotopes', doc_count: 49 },\n        { key: 'Lebensräume und Biotope', doc_count: 49 },\n        { key: 'Schutzgebiete', doc_count: 41 },\n        { key: 'Protected sites', doc_count: 39 },\n        { key: 'Sites protégés', doc_count: 39 },\n        { key: 'Siti protetti', doc_count: 39 },\n        { key: 'Verkehrsnetze', doc_count: 32 },\n        { key: 'Gebiete mit naturbedingten Risiken', doc_count: 31 },\n        { key: 'Reti di trasporto', doc_count: 30 },\n        { key: 'Réseaux de transport', doc_count: 30 },\n        { key: 'Transport networks', doc_count: 30 },\n        {\n          key: 'Schutzgebiete Sites protégés Siti protetti Protected sites',\n          doc_count: 27,\n        },\n        { key: 'Zones à risque naturel', doc_count: 26 },\n        {\n          key:\n            'Habitats et biotopes Lebensräume und Biotope Habitat e biotopi Habitats and biotopes',\n          doc_count: 25,\n        },\n        { key: 'Natural risk zones', doc_count: 25 },\n        { key: 'Zone a rischio naturale', doc_count: 25 },\n        {\n          key:\n            'Lebensräume und Biotope Habitats et biotopes Habitat e biotopi Habitats and biotopes',\n          doc_count: 24,\n        },\n        {\n          key:\n            'Réseaux de transport Verkehrsnetze Reti di trasporto Transport networks',\n          doc_count: 23,\n        },\n        { key: 'Geologia', doc_count: 22 },\n        { key: 'Geologie', doc_count: 22 },\n        { key: 'Geology', doc_count: 22 },\n        { key: 'Géologie', doc_count: 22 },\n        { key: 'Gewässernetz', doc_count: 20 },\n        { key: 'Distribuzione delle specie', doc_count: 18 },\n        { key: 'Dénominations géographiques', doc_count: 18 },\n        { key: 'Geografische Bezeichnungen', doc_count: 18 },\n        { key: 'Geographical names', doc_count: 18 },\n        { key: 'Nomi geografici', doc_count: 18 },\n        { key: 'Répartition des espèces', doc_count: 18 },\n        { key: 'Species distribution', doc_count: 18 },\n        { key: 'Verteilung der Arten', doc_count: 18 },\n        { key: 'Gebäude', doc_count: 17 },\n      ],\n    },\n  },\n}\n","export * from './elasticsearch.mapper'\nexport * from './elasticsearch.service'\nexport * from './fixtures'\n","import { Component, OnInit } from '@angular/core'\nimport { EsRequestAggTerm, SearchFilters } from '@lib/common'\nimport { FacetSelectEvent, ModelBlock } from '@lib/ui'\nimport { combineLatest, Observable } from 'rxjs'\nimport { map, take } from 'rxjs/operators'\nimport { SearchFacade } from '../../state/search.facade'\nimport { FacetsService } from '../facets.service'\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker'\n\nmarker('facets.block.title.OrgForResource')\nmarker('facets.block.title.availableInServices')\nmarker('facets.block.title.cl_hierarchyLevel.key')\nmarker('facets.block.title.cl_maintenanceAndUpdateFrequency.key')\nmarker('facets.block.title.cl_spatialRepresentationType.key')\nmarker('facets.block.title.cl_status.key')\nmarker('facets.block.title.creationYearForResource')\nmarker('facets.block.title.resolutionScaleDenominator')\nmarker('facets.block.title.tag')\nmarker('facets.block.title.tag.default')\nmarker('facets.block.title.th_regions_tree.default')\n\n@Component({\n  selector: 'search-facets-container',\n  templateUrl: './facets-container.component.html',\n  styleUrls: ['./facets-container.component.css'],\n})\nexport class FacetsContainerComponent implements OnInit {\n  selectedPaths$: Observable<string[][]>\n  models$: Observable<ModelBlock[]>\n\n  constructor(\n    private facets: FacetsService,\n    private searchFacade: SearchFacade\n  ) {}\n\n  ngOnInit(): void {\n    this.selectedPaths$ = this.searchFacade.searchFilters$.pipe(\n      map((filters) => this.facets.findSelectedPaths(filters))\n    )\n\n    this.models$ = combineLatest([\n      this.searchFacade.configAggregations$,\n      this.searchFacade.resultsAggregations$,\n    ]).pipe(\n      map(([configAggregations, resultsAggregations]) => {\n        const model = this.facets.createFacetModel(\n          configAggregations,\n          resultsAggregations,\n          false\n        )\n        return model\n      })\n    )\n  }\n\n  onItemChange(facetEvent: FacetSelectEvent) {\n    this.searchFacade.searchFilters$.pipe(take(1)).subscribe((filters) => {\n      this.updateFilters(filters, facetEvent)\n    })\n  }\n\n  private updateFilters(filters: SearchFilters, facetEvent: FacetSelectEvent) {\n    const { item, block } = facetEvent\n    const { path } = item\n    const pathValue = this.facets.computeItemPathValue(block, item)\n    const newFilters = this.facets.computeNewFiltersFromState(\n      filters,\n      path,\n      pathValue\n    )\n    this.searchFacade.setFilters(newFilters)\n  }\n\n  onMore(key: string): void {\n    this.searchFacade.requestMoreOnAggregation(key, 20)\n  }\n\n  onFilterChange(term: EsRequestAggTerm): void {\n    const include = `.*${term.include}.*`\n    this.searchFacade.setIncludeOnAggregation(term.field, include)\n  }\n}\n","<ui-facet-list\n  [models]=\"models$ | async\"\n  [selectedPaths]=\"selectedPaths$ | async\"\n  (itemChange)=\"onItemChange($event)\"\n  (more)=\"onMore($event)\"\n  (filterChange)=\"onFilterChange($event)\"\n></ui-facet-list>\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FacetsModule as UiFacetsModule } from '@lib/ui'\nimport { TranslateModule } from '@ngx-translate/core'\nimport { FacetsContainerComponent } from './facets-container/facets-container.component'\n\n@NgModule({\n  declarations: [FacetsContainerComponent],\n  imports: [CommonModule, TranslateModule.forChild(), UiFacetsModule],\n  exports: [FacetsContainerComponent],\n})\nexport class FacetsModule {}\n","import { Injectable } from '@angular/core'\nimport {\n  AggregationsTypesEnum,\n  LogService,\n  parse,\n  PARSE_DELIMITER,\n  SearchFilters,\n} from '@lib/common'\nimport { FacetPath, ModelBlock, ModelItem } from '@lib/ui'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetsService {\n  constructor(private logger: LogService) {}\n\n  createFacetModel(\n    requestAggregations,\n    responseAggregations,\n    isNested: boolean,\n    path: string[] = []\n  ) {\n    if (requestAggregations === undefined) {\n      return\n    }\n    const listModel = []\n\n    interface AggEntry {\n      key: string\n      meta: object\n      doc_count: number\n    }\n\n    for (const key in requestAggregations) {\n      if (responseAggregations.hasOwnProperty(key)) {\n        const requestAgg = requestAggregations[key]\n        const responseAgg = responseAggregations[key]\n\n        let blockModel: any = {\n          key,\n          items: [],\n          path: [...path, responseAgg.meta?.field || key],\n          meta: responseAgg.meta,\n        }\n        if (requestAgg.hasOwnProperty(AggregationsTypesEnum.TERMS)) {\n          blockModel = {\n            ...blockModel,\n            type: AggregationsTypesEnum.TERMS,\n            size: requestAgg[AggregationsTypesEnum.TERMS].size,\n            more: responseAgg.sum_other_doc_count > 0,\n            includeFilter: requestAgg.terms.include !== undefined,\n            excludeFilter: requestAgg.terms.exclude !== undefined,\n          }\n\n          responseAgg.buckets.forEach((bucket) => {\n            if (bucket.key) {\n              const value = bucket.key_as_string || bucket.key\n              const itemPath = [...blockModel.path, String(value)]\n              const itemModel = {\n                value,\n                meta: bucket.meta,\n                count: bucket.doc_count,\n                path: itemPath,\n              }\n              blockModel.items.push(itemModel)\n            }\n          })\n        } else if (requestAgg.hasOwnProperty(AggregationsTypesEnum.HISTOGRAM)) {\n          blockModel = {\n            ...blockModel,\n            type: AggregationsTypesEnum.HISTOGRAM,\n            size: requestAgg[AggregationsTypesEnum.HISTOGRAM].size,\n          }\n\n          if (requestAgg[AggregationsTypesEnum.HISTOGRAM].keyed) {\n            const entries = Object.entries(responseAgg.buckets)\n            for (let p = 0; p < entries.length; p++) {\n              const entry: [string, AggEntry] = entries[p] as [string, AggEntry]\n              const nextEntry: [string, AggEntry] = entries[p + 1] as [\n                string,\n                AggEntry\n              ]\n              const lowerBound = entry[1].key\n              const onlyOneBucket = entries.length === 1\n              const upperBound = onlyOneBucket\n                ? lowerBound +\n                  Number(requestAgg[AggregationsTypesEnum.HISTOGRAM].interval)\n                : nextEntry\n                ? nextEntry[1].key\n                : '*'\n              const value = lowerBound + '-' + upperBound\n              const itemPath = [...blockModel.path, lowerBound + '']\n              const itemModel = {\n                value,\n                meta: entry[1].meta,\n                count: entry[1].doc_count,\n                query_string: `+${requestAgg.histogram.field}:[${lowerBound} TO ${upperBound}}`,\n                path: itemPath,\n              }\n              blockModel.items.push(itemModel)\n            }\n          } else {\n            this.logger.warn(\n              'Facet configuration error. Histogram are only supported with keyed mode.' +\n                'eg. creationYearForResource: {histogram: { ' +\n                'field: \"creationYearForResource\",' +\n                'interval: 5,' +\n                'keyed: true,' +\n                'min_doc_count: 1}}'\n            )\n          }\n        } else if (requestAgg.hasOwnProperty(AggregationsTypesEnum.FILTERS)) {\n          const type = AggregationsTypesEnum.FILTERS\n          blockModel = {\n            ...blockModel,\n            type,\n            size: requestAgg[type].size,\n          }\n\n          Object.entries(responseAgg.buckets).forEach((entry) => {\n            const itemValue = entry[0]\n            const bucket = entry[1] as AggEntry\n            const itemPath = [...blockModel.path, itemValue]\n            const itemModel = {\n              value: itemValue,\n              meta: bucket.meta,\n              count: bucket.doc_count,\n              path: itemPath,\n              query_string:\n                requestAgg.filters.filters[itemValue].query_string.query,\n            }\n            blockModel.items.push(itemModel)\n          })\n        } else {\n          this.logger.warn('Unsupported aggregation config.', requestAgg)\n        }\n        listModel.push(blockModel)\n      }\n    }\n    return listModel\n  }\n\n  /**\n   * Compute the path value of a facet item. The path value is the last\n   * element of the path array.\n   * If the item is not selected, returns `null`\n   * For 'terms' facet, it is a boolean, true when selected, false when\n   * inverted.\n   * For 'filters' and 'histogram', it is a lucene expression\n   *\n   * @param block model\n   * @param item model\n   */\n  computeItemPathValue(block: ModelBlock, item: ModelItem) {\n    const { selected, inverted } = item\n    const { type } = block\n    let value: any = !inverted\n\n    if (selected) {\n      if (\n        type === AggregationsTypesEnum.FILTERS ||\n        type === AggregationsTypesEnum.HISTOGRAM\n      ) {\n        value = item.query_string\n        if (inverted) {\n          value = `-(${value})`\n        }\n      }\n    } else {\n      value = null\n    }\n    return value\n  }\n\n  /**\n   * Create a new filter object that will be passed to the state.\n   * It update recursively the object depending on the path structure.\n   *\n   * @param filters previous state\n   * @param path of the updated item\n   * @param value of the updated item\n   */\n  computeNewFiltersFromState(\n    filters: SearchFilters,\n    path: FacetPath,\n    value: any\n  ): SearchFilters {\n    const clone = JSON.parse(JSON.stringify(filters))\n    const getter = parse(path.join(PARSE_DELIMITER))\n    if (value === null) {\n      this.removePathFromFilters_(clone, path)\n    } else {\n      const setter = getter.assign\n      setter(clone, value)\n    }\n    return clone\n  }\n\n  /**\n   * Remove a filter in the state object, depending on the given path, which\n   * could be deep in the parameter tree.\n   *\n   * @param filters state\n   * @param path to remove from state\n   */\n  private removePathFromFilters_(filters: SearchFilters, path: FacetPath) {\n    const head = path[0]\n    const tail = path.slice(1)\n    for (const prop of Object.keys(filters)) {\n      if (filters.hasOwnProperty(prop)) {\n        if (head.toString() === prop && tail.length === 0) {\n          delete filters[prop]\n        } else {\n          if ('object' === typeof filters[prop]) {\n            this.removePathFromFilters_(filters[prop], tail)\n            if (0 === Object.keys(filters[prop]).length) {\n              delete filters[prop]\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Compute filters recursive paths enabled in the state current\n   * search\n   * e.g [[\"tag.default\", \"land use\"]]\n   *\n   * @param filters Search filters from state\n   */\n  findSelectedPaths(filters): string[][] {\n    const discoveredObjects = [] // For checking for cyclic object\n    const path = []\n    const results = []\n\n    // store void result to prevent ; added by prettier before iife\n    const _ = (function find(obj) {\n      for (const key of Object.keys(obj)) {\n        if (typeof obj[key] !== 'object') {\n          // Found a selected path\n          path.push(key)\n          results.push(Array.from(path))\n          path.pop()\n        }\n        const o = obj[key] // The next object to be searched\n        if (o && typeof o === 'object') {\n          if (!discoveredObjects.find((discovered) => discovered === o)) {\n            // check for cyclic link\n            path.push(key)\n            discoveredObjects.push(o)\n            find(o)\n            path.pop()\n          }\n        }\n      }\n    })(filters)\n\n    return results\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core'\nimport { TextInputComponent } from '@lib/ui'\nimport { Subscription } from 'rxjs'\nimport { debounceTime } from 'rxjs/operators'\nimport { SearchFacade } from '../state/search.facade'\n\n@Component({\n  selector: 'search-fuzzy-search',\n  templateUrl: './fuzzy-search.component.html',\n  styleUrls: ['./fuzzy-search.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FuzzySearchComponent implements OnDestroy, AfterViewInit {\n  @ViewChild('searchText') searchText: TextInputComponent\n\n  currentTextSearch$\n\n  subs = new Subscription()\n\n  constructor(private searchFacade: SearchFacade) {\n    this.currentTextSearch$ = this.searchFacade.searchFilters$\n  }\n\n  ngAfterViewInit(): void {\n    this.subs.add(\n      this.searchText.valueChange.pipe(debounceTime(400)).subscribe((value) => {\n        this.searchFacade.setFilters({ any: value })\n      })\n    )\n  }\n\n  ngOnDestroy(): void {\n    this.subs.unsubscribe()\n  }\n}\n","<ui-text-input\n  #searchText\n  [hint]=\"'search.field.any.placeholder' | translate\"\n  [value]=\"currentTextSearch$ | async\"\n></ui-text-input>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { RecordMetric } from '@lib/common'\nimport { SearchApiService } from '@lib/gn-api'\nimport { Observable } from 'rxjs'\nimport { map, share } from 'rxjs/operators'\nimport { SearchResponse } from 'elasticsearch'\n\n@Component({\n  selector: 'search-records-metrics',\n  templateUrl: './records-metrics.component.html',\n  styleUrls: ['./records-metrics.component.css'],\n})\nexport class RecordsMetricsComponent implements OnInit {\n  @Input() field: string\n  @Input() count = 10\n  @Input() queryString = '+isTemplate:n'\n  @Output() metricSelect = new EventEmitter<RecordMetric>()\n  results$: Observable<RecordMetric[]>\n\n  constructor(private searchService: SearchApiService) {}\n\n  ngOnInit(): void {\n    this.results$ = this.searchService\n      .search(\n        'bucket',\n        JSON.stringify({\n          size: 0,\n          track_total_hits: true,\n          query: { query_string: { query: this.queryString } },\n          aggs: {\n            results: {\n              terms: {\n                field: this.field,\n                size: this.count,\n              },\n            },\n          },\n        })\n      )\n      .pipe(\n        map<any, RecordMetric[]>(\n          (response: SearchResponse<any>) =>\n            response.aggregations.results.buckets.map((category) => ({\n              value: category.key,\n              recordCount: category.doc_count,\n            })) as RecordMetric[]\n        ),\n        share()\n      )\n  }\n}\n","<div class=\"grid md:grid-cols-3 lg:grid-cols-4 gap-4 p-4\">\n  <div *ngFor=\"let category of results$ | async\">\n    <ui-record-metric\n      [label]=\"category.value | translate\"\n      [count]=\"category.recordCount\"\n      [icon]=\"''\"\n      (click)=\"metricSelect.emit(category)\"\n    ></ui-record-metric>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core'\nimport { SearchFacade } from '../state/search.facade'\n\n@Component({\n  selector: 'search-results-hits',\n  templateUrl: './results-hits.container.component.html',\n})\nexport class ResultsHitsContainerComponent implements OnInit {\n  constructor(public facade: SearchFacade) {}\n  ngOnInit(): void {}\n}\n","<ui-results-hits-number\n  [loading]=\"facade.isLoading$ | async\"\n  [hits]=\"facade.resultsHits$ | async\"\n></ui-results-hits-number>\n","import { Component, OnInit } from '@angular/core'\nimport { ResultsListLayout } from '@lib/common'\nimport { Observable } from 'rxjs'\nimport { SearchFacade } from '../state/search.facade'\n\n@Component({\n  selector: 'search-results-layout',\n  templateUrl: './results-layout.component.html',\n})\nexport class ResultsLayoutComponent implements OnInit {\n  choices = Object.values(ResultsListLayout).map((v) => {\n    return {\n      label: v,\n      value: v,\n    }\n  })\n\n  constructor(public searchFacade: SearchFacade) {}\n\n  ngOnInit(): void {}\n\n  change(layout: any) {\n    this.searchFacade.setResultsLayout(layout)\n  }\n}\n","<ui-dropdown-selector\n  [title]=\"'results.layout.selectOne' | translate\"\n  [ariaName]=\"'results.layout.selectOne' | translate\"\n  [choices]=\"choices\"\n  (selectValue)=\"change($event)\"\n  [selected]=\"searchFacade.layout$ | async\"\n></ui-dropdown-selector>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core'\nimport {\n  InfiniteScrollModel,\n  InfiniteScrollOptionsDefault,\n  RecordSummary,\n  ResultsListLayout,\n} from '@lib/common'\nimport { iif, Observable, of } from 'rxjs'\nimport { distinctUntilChanged, mergeMap } from 'rxjs/operators'\nimport { SearchFacade } from '../state/search.facade'\n\n@Component({\n  selector: 'search-results-list-container',\n  templateUrl: './results-list.container.component.html',\n  styleUrls: ['./results-list.container.component.css'],\n})\nexport class ResultsListContainerComponent implements OnInit, OnDestroy {\n  @Input() layout: ResultsListLayout = ResultsListLayout.CARD\n  @Input() scrollableOptions: InfiniteScrollModel = {}\n  @Output() mdSelect = new EventEmitter<RecordSummary>()\n\n  scrollDisable$: Observable<boolean>\n  scrollableConfig: InfiniteScrollModel\n\n  constructor(public facade: SearchFacade) {}\n\n  ngOnInit(): void {\n    this.scrollableConfig = {\n      ...InfiniteScrollOptionsDefault,\n      ...this.scrollableOptions,\n    }\n    this.facade.setResultsLayout(this.layout)\n\n    this.scrollDisable$ = of(this.scrollableConfig.disabled).pipe(\n      mergeMap((disabled) =>\n        iif(() => !!disabled, of(true), this.facade.isEndOfResults$)\n      ),\n      distinctUntilChanged()\n    )\n  }\n  onMetadataSelection(metadata: RecordSummary): void {\n    this.mdSelect.emit(metadata)\n  }\n\n  onScrollDown() {\n    this.facade.scroll()\n  }\n\n  ngOnDestroy(): void {}\n}\n","<div\n  class=\"search-results\"\n  infinite-scroll\n  [infiniteScrollDistance]=\"scrollableConfig.distance\"\n  [infiniteScrollUpDistance]=\"scrollableConfig.upDistance\"\n  [infiniteScrollThrottle]=\"scrollableConfig.throttle\"\n  [infiniteScrollDisabled]=\"scrollDisable$ | async\"\n  (scrolled)=\"onScrollDown()\"\n>\n  <ui-results-list\n    [loading]=\"facade.isLoading$ | async\"\n    [records]=\"facade.results$ | async\"\n    [layout]=\"facade.layout$ | async\"\n    (mdSelect)=\"onMetadataSelection($event)\"\n  ></ui-results-list>\n</div>\n","import { CommonModule } from '@angular/common'\nimport { HttpClientModule, HttpClientXsrfModule } from '@angular/common/http'\nimport { NgModule } from '@angular/core'\nimport { GnApiModule } from '@lib/gn-api'\nimport { UiModule } from '@lib/ui'\nimport { EffectsModule } from '@ngrx/effects'\nimport { StoreModule } from '@ngrx/store'\nimport { TranslateModule } from '@ngx-translate/core'\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll'\nimport { FacetsModule } from './facets/facets.module'\nimport { FuzzySearchComponent } from './fuzzy-search/fuzzy-search.component'\nimport { RecordsMetricsComponent } from './records-metrics/records-metrics.component'\nimport { ResultsLayoutComponent } from './results-layout/results-layout.component'\nimport { ResultsListContainerComponent } from './results-list/results-list.container.component'\nimport { SortByComponent } from './sort-by/sort-by.component'\nimport { SearchEffects } from './state/effects'\nimport { initialState, reducer, SEARCH_FEATURE_KEY } from './state/reducer'\nimport { ResultsHitsContainerComponent } from './results-hits-number/results-hits.container.component'\nimport { SearchStateContainerDirective } from './state/container/search-state.container.directive'\n\n@NgModule({\n  declarations: [\n    SortByComponent,\n    ResultsLayoutComponent,\n    FuzzySearchComponent,\n    RecordsMetricsComponent,\n    ResultsListContainerComponent,\n    ResultsHitsContainerComponent,\n    SearchStateContainerDirective,\n  ],\n  imports: [\n    CommonModule,\n    TranslateModule.forChild(),\n    StoreModule.forFeature(SEARCH_FEATURE_KEY, reducer, {\n      initialState,\n    }),\n    EffectsModule.forFeature([SearchEffects]),\n    HttpClientModule,\n    HttpClientXsrfModule,\n    UiModule,\n    GnApiModule,\n    FacetsModule,\n    InfiniteScrollModule,\n  ],\n  exports: [\n    SortByComponent,\n    ResultsLayoutComponent,\n    FuzzySearchComponent,\n    RecordsMetricsComponent,\n    ResultsListContainerComponent,\n    ResultsHitsContainerComponent,\n    FacetsModule,\n    SearchStateContainerDirective,\n  ],\n})\nexport class LibSearchModule {}\n","import { Component, OnInit } from '@angular/core'\nimport { select, Store } from '@ngrx/store'\nimport { SetSortBy } from '../state/actions'\nimport { SearchState } from '../state/reducer'\nimport { getSearchSortBy } from '../state/selectors'\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker'\n\nmarker('results.sortBy.relevancy')\nmarker('results.sortBy.dateStamp')\nmarker('results.sortBy.popularity')\n\n@Component({\n  selector: 'search-sort-by',\n  templateUrl: './sort-by.component.html',\n})\nexport class SortByComponent implements OnInit {\n  choices = [\n    {\n      label: 'results.sortBy.relevancy',\n      value: '_score',\n    },\n    {\n      label: 'results.sortBy.dateStamp',\n      value: '-dateStamp',\n    },\n    {\n      label: 'results.sortBy.popularity',\n      value: 'popularity',\n    },\n  ]\n  currentSortBy$ = this.store.pipe(select(getSearchSortBy))\n\n  constructor(private store: Store<SearchState>) {}\n\n  ngOnInit(): void {}\n\n  changeSortBy(criteria: any) {\n    if (typeof criteria === 'string') {\n      this.store.dispatch(new SetSortBy(criteria))\n    } else {\n      throw new Error(`Unexpected value received: ${criteria}`)\n    }\n  }\n}\n","<ui-dropdown-selector\n  [title]=\"'search.field.sortBy' | translate\"\n  [choices]=\"choices\"\n  (selectValue)=\"changeSortBy($event)\"\n  [selected]=\"currentSortBy$ | async\"\n  ariaName=\"search-sort-by\"\n></ui-dropdown-selector>\n","import {\n  EsRequestAggTermPatch,\n  RecordSummary,\n  SearchFilters,\n  StateConfigFilters,\n} from '@lib/common'\nimport { Action } from '@ngrx/store'\nimport { SearchStateParams } from './reducer'\n\nexport const ADD_SEARCH = '[Search] Add search instance'\n\nexport const SET_FILTERS = '[Search] Set Filters'\nexport const SET_CONFIG_FILTERS = '[Search] Set config filters'\nexport const UPDATE_FILTERS = '[Search] Update Filters'\nexport const SET_SEARCH = '[Search] Set overall search configuration'\nexport const SET_SORT_BY = '[Search] Sort By'\nexport const SET_PAGINATION = '[Search] Set pagination'\nexport const PAGINATE = '[Search] Paginate'\nexport const SCROLL = '[Search] Scroll'\nexport const SET_RESULTS_LAYOUT = '[Search] Set results layout'\nexport const ADD_RESULTS = '[Search] Add Results'\nexport const CLEAR_PAGINATION = '[Search] Clear Paging'\nexport const CLEAR_RESULTS = '[Search] Clear Results'\nexport const REQUEST_MORE_RESULTS = '[Search] Request More Results'\nexport const SET_RESULTS_AGGREGATIONS = '[Search] Set Results Aggregations'\nexport const SET_RESULTS_HITS = '[Search] Set Results hits'\nexport const SET_CONFIG_AGGREGATIONS = '[Search] Set Config Aggregations'\nexport const REQUEST_MORE_ON_AGGREGATION =\n  '[Search] Request More On Aggregation'\nexport const SET_INCLUDE_ON_AGGREGATION = '[Search] Set term include'\nexport const UPDATE_REQUEST_AGGREGATION_TERM =\n  '[Search] Update request aggregation term'\nexport const PATCH_RESULTS_AGGREGATIONS = '[Search] Patch Results Aggregations'\n\nexport const DEFAULT_SEARCH_KEY = 'default'\n\nabstract class AbstractAction {\n  id?: string\n  protected constructor(id?: string) {\n    this.id = id || DEFAULT_SEARCH_KEY\n  }\n}\n\nexport class AddSearch implements Action {\n  readonly type = ADD_SEARCH\n  constructor(public id: string) {}\n}\n\nexport class SetConfigFilters extends AbstractAction implements Action {\n  readonly type = SET_CONFIG_FILTERS\n\n  constructor(public payload: StateConfigFilters, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetFilters extends AbstractAction implements Action {\n  readonly type = SET_FILTERS\n\n  constructor(public payload: SearchFilters, id?: string) {\n    super(id)\n  }\n}\n\nexport class UpdateFilters extends AbstractAction implements Action {\n  readonly type = UPDATE_FILTERS\n\n  constructor(public payload: SearchFilters, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetSearch extends AbstractAction implements Action {\n  readonly type = SET_SEARCH\n\n  constructor(public payload: SearchStateParams, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetSortBy extends AbstractAction implements Action {\n  readonly type = SET_SORT_BY\n  constructor(public sortBy: string, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetPagination extends AbstractAction implements Action {\n  readonly type = SET_PAGINATION\n  constructor(public from: number, public size: number, id?: string) {\n    super(id)\n  }\n}\n\nexport class Paginate extends AbstractAction implements Action {\n  readonly type = PAGINATE\n  constructor(public delta: number, id?: string) {\n    super(id)\n  }\n}\n\nexport class ClearPagination extends AbstractAction implements Action {\n  readonly type = CLEAR_PAGINATION\n\n  constructor(id?: string) {\n    super(id)\n  }\n}\n\nexport class Scroll extends AbstractAction implements Action {\n  readonly type = SCROLL\n  constructor(id?: string) {\n    super(id)\n  }\n}\n\nexport class SetResultsLayout extends AbstractAction implements Action {\n  readonly type = SET_RESULTS_LAYOUT\n\n  constructor(public resultsLayout: string, id?: string) {\n    super(id)\n  }\n}\n\nexport class AddResults extends AbstractAction implements Action {\n  readonly type = ADD_RESULTS\n\n  constructor(public payload: RecordSummary[], id?: string) {\n    super(id)\n  }\n}\n\nexport class ClearResults extends AbstractAction implements Action {\n  readonly type = CLEAR_RESULTS\n\n  constructor(id?: string) {\n    super(id)\n  }\n}\n\nexport class RequestMoreResults extends AbstractAction implements Action {\n  readonly type = REQUEST_MORE_RESULTS\n\n  constructor(id?: string) {\n    super(id)\n  }\n}\n\nexport class SetResultsAggregations extends AbstractAction implements Action {\n  readonly type = SET_RESULTS_AGGREGATIONS\n\n  constructor(public payload: any, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetResultsHits extends AbstractAction implements Action {\n  readonly type = SET_RESULTS_HITS\n  constructor(public payload: any, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetConfigAggregations extends AbstractAction implements Action {\n  readonly type = SET_CONFIG_AGGREGATIONS\n  constructor(public payload: any, id?: string) {\n    super(id)\n  }\n}\n\nexport class RequestMoreOnAggregation extends AbstractAction implements Action {\n  readonly type = REQUEST_MORE_ON_AGGREGATION\n  constructor(public key: string, public increment: number, id?: string) {\n    super(id)\n  }\n}\n\nexport class SetIncludeOnAggregation extends AbstractAction implements Action {\n  readonly type = SET_INCLUDE_ON_AGGREGATION\n  constructor(public key: string, public include: string, id?: string) {\n    super(id)\n  }\n}\n\nexport class UpdateRequestAggregationTerm\n  extends AbstractAction\n  implements Action {\n  readonly type = UPDATE_REQUEST_AGGREGATION_TERM\n  constructor(\n    public key: string,\n    public patch: EsRequestAggTermPatch,\n    id?: string\n  ) {\n    super(id)\n  }\n}\n\nexport class PatchResultsAggregations extends AbstractAction implements Action {\n  readonly type = PATCH_RESULTS_AGGREGATIONS\n\n  constructor(public key: string, public payload: any, id?: string) {\n    super(id)\n  }\n}\n\nexport type SearchActions =\n  | AddSearch\n  | SetConfigFilters\n  | SetFilters\n  | UpdateFilters\n  | SetSearch\n  | SetSortBy\n  | SetPagination\n  | Paginate\n  | Scroll\n  | SetResultsLayout\n  | AddResults\n  | ClearPagination\n  | ClearResults\n  | RequestMoreResults\n  | SetResultsAggregations\n  | SetResultsHits\n  | SetConfigAggregations\n  | RequestMoreOnAggregation\n  | SetIncludeOnAggregation\n  | UpdateRequestAggregationTerm\n  | PatchResultsAggregations\n","import { Directive, Host, Input, OnInit } from '@angular/core'\nimport { SearchFacade } from '../search.facade'\n\n@Directive({\n  selector: '[searchSearchStateContainer]',\n  providers: [SearchFacade],\n})\nexport class SearchStateContainerDirective implements OnInit {\n  @Input('searchSearchStateContainer') searchId: string\n\n  constructor(@Host() private facade: SearchFacade) {}\n\n  ngOnInit(): void {\n    this.facade.init(this.searchId)\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { AuthService } from '@lib/auth'\nimport { SearchApiService } from '@lib/gn-api'\nimport { Actions, createEffect, ofType } from '@ngrx/effects'\nimport { select, Store } from '@ngrx/store'\nimport { SearchResponse } from 'elasticsearch'\nimport { of } from 'rxjs'\nimport { flatMap, map, switchMap, withLatestFrom } from 'rxjs/operators'\nimport { ElasticsearchMetadataModels } from '../elasticsearch/constant'\nimport { ElasticsearchMapper } from '../elasticsearch/elasticsearch.mapper'\nimport { ElasticsearchService } from '../elasticsearch/elasticsearch.service'\nimport {\n  AddResults,\n  CLEAR_PAGINATION,\n  ClearPagination,\n  ClearResults,\n  PAGINATE,\n  PatchResultsAggregations,\n  REQUEST_MORE_ON_AGGREGATION,\n  REQUEST_MORE_RESULTS,\n  RequestMoreOnAggregation,\n  RequestMoreResults,\n  SCROLL,\n  SearchActions,\n  SET_FILTERS,\n  SET_INCLUDE_ON_AGGREGATION,\n  SET_PAGINATION,\n  SET_SEARCH,\n  SET_SORT_BY,\n  SetIncludeOnAggregation,\n  SetResultsAggregations,\n  SetResultsHits,\n  UPDATE_FILTERS,\n  UPDATE_REQUEST_AGGREGATION_TERM,\n  UpdateRequestAggregationTerm,\n} from './actions'\nimport { SearchState } from './reducer'\nimport { getSearchStateSearch } from './selectors'\n\n@Injectable()\nexport class SearchEffects {\n  constructor(\n    private actions$: Actions,\n    private searchService: SearchApiService,\n    private store$: Store<SearchState>,\n    private authService: AuthService,\n    private esService: ElasticsearchService,\n    private esMapper: ElasticsearchMapper\n  ) {}\n\n  clearResults$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        SET_SORT_BY,\n        SET_FILTERS,\n        UPDATE_FILTERS,\n        SET_SEARCH,\n        SET_PAGINATION,\n        PAGINATE\n      ),\n      switchMap((action: SearchActions) =>\n        of(\n          new ClearResults(action.id),\n          new ClearPagination(action.id),\n          new RequestMoreResults(action.id)\n        )\n      )\n    )\n  )\n\n  scroll$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SCROLL),\n      map((action: SearchActions) => new RequestMoreResults(action.id))\n    )\n  )\n\n  loadResults$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(REQUEST_MORE_RESULTS),\n      // flatMap is used because of multiple search concerns\n      // TODO: should implement our own switchMap to filter by searchId\n      switchMap((action: SearchActions) =>\n        this.authService.authReady().pipe(\n          withLatestFrom(\n            this.store$.pipe(select(getSearchStateSearch, action.id))\n          ),\n          switchMap(([_, state]) =>\n            this.searchService.search(\n              'bucket',\n              JSON.stringify(\n                this.esService.getSearchRequestBody(\n                  state,\n                  ElasticsearchMetadataModels.BRIEF\n                )\n              )\n            )\n          ),\n          switchMap((response: SearchResponse<any>) => {\n            const records = this.esMapper.toRecordBrief(\n              response,\n              this.searchService.configuration.basePath\n            )\n            const aggregations = response.aggregations\n            return [\n              new AddResults(records, action.id),\n              new SetResultsAggregations(aggregations, action.id),\n              new SetResultsHits(response.hits.total, action.id),\n            ]\n          })\n        )\n      ) // wait for auth to be known\n    )\n  )\n\n  loadMoreOnAggregation$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<RequestMoreOnAggregation>(REQUEST_MORE_ON_AGGREGATION),\n      switchMap((action: RequestMoreOnAggregation) =>\n        of(\n          new UpdateRequestAggregationTerm(\n            action.key,\n            {\n              increment: action.increment,\n            },\n            action.id\n          )\n        )\n      )\n    )\n  })\n\n  setIncludeOnAggregation$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType<SetIncludeOnAggregation>(SET_INCLUDE_ON_AGGREGATION),\n      switchMap((action) =>\n        of(\n          new UpdateRequestAggregationTerm(\n            action.key,\n            {\n              include: action.include,\n            },\n            action.id\n          )\n        )\n      )\n    )\n  })\n\n  updateRequestAggregationTerm$ = createEffect(() => {\n    const updateTermAction$ = this.actions$.pipe(\n      ofType<UpdateRequestAggregationTerm>(UPDATE_REQUEST_AGGREGATION_TERM)\n    )\n\n    return updateTermAction$.pipe(\n      switchMap((action) =>\n        this.authService.authReady().pipe(\n          withLatestFrom(this.store$.pipe(select(getSearchStateSearch))),\n          switchMap(([_, state]) =>\n            this.searchService.search(\n              'bucket',\n              JSON.stringify(\n                this.esService.buildMoreOnAggregationPayload(state, action.key)\n              )\n            )\n          ),\n          map((response: SearchResponse<any>) => {\n            const aggregations = response.aggregations\n            return new PatchResultsAggregations(\n              action.key,\n              aggregations,\n              action.id\n            )\n          })\n        )\n      ) // wait for auth to be known\n    )\n  })\n}\n","import {\n  RecordSummary,\n  RESULTS_PAGE_SIZE,\n  SearchFilters,\n  StateConfigFilters,\n} from '@lib/common'\nimport * as fromActions from './actions'\nimport { DEFAULT_SEARCH_KEY } from './actions'\n\nexport const SEARCH_FEATURE_KEY = 'searchState'\n\nexport interface SearchStateParams {\n  filters?: SearchFilters\n  sortBy?: string\n  size?: number\n  from?: number\n}\n\nexport interface SearchStateSearch {\n  config: {\n    aggregations?: any\n    filters?: StateConfigFilters\n  }\n  params: SearchStateParams\n  results: {\n    hits: {\n      value: number\n      eq: string\n    }\n    records: RecordSummary[]\n    aggregations: any\n  }\n  resultsLayout?: string\n  loadingMore: boolean\n}\n\nexport type SearchState = { [key: string]: SearchStateSearch }\n\nexport const initSearch = (): SearchStateSearch => {\n  return {\n    config: {\n      filters: {},\n    },\n    params: {\n      filters: {},\n      size: RESULTS_PAGE_SIZE,\n      from: 0,\n    },\n    results: {\n      hits: null,\n      records: [],\n      aggregations: {},\n    },\n    loadingMore: false,\n  }\n}\n\nexport const initialState: SearchState = {\n  [DEFAULT_SEARCH_KEY]: initSearch(),\n}\n\nexport function reducer(\n  state = initialState,\n  action: fromActions.SearchActions\n): SearchState {\n  const { id } = action\n  if (id) {\n    let stateSearch = state[id] || initSearch()\n    if (action.type !== fromActions.ADD_SEARCH) {\n      stateSearch = reducerSearch(stateSearch, action)\n    }\n    if (stateSearch) {\n      return {\n        ...state,\n        [id]: stateSearch,\n      }\n    }\n  }\n  return state\n}\n\nexport function reducerSearch(\n  state: SearchStateSearch,\n  action: fromActions.SearchActions\n): SearchStateSearch {\n  switch (action.type) {\n    case fromActions.SET_CONFIG_FILTERS: {\n      return {\n        ...state,\n        config: {\n          ...state.config,\n          filters: { ...action.payload },\n        },\n      }\n    }\n    case fromActions.SET_FILTERS: {\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          filters: { ...action.payload },\n        },\n      }\n    }\n    case fromActions.UPDATE_FILTERS: {\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          filters: {\n            ...state.params.filters,\n            ...action.payload,\n          },\n        },\n      }\n    }\n    case fromActions.SET_SEARCH: {\n      return {\n        ...state,\n        params: {\n          ...action.payload,\n        },\n      }\n    }\n    case fromActions.SET_SORT_BY: {\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          sortBy: action.sortBy,\n        },\n      }\n    }\n    case fromActions.SET_PAGINATION: {\n      const { from, size } = action\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          from,\n          size,\n        },\n      }\n    }\n    case fromActions.CLEAR_PAGINATION:\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          from: 0,\n        },\n      }\n    case fromActions.SCROLL:\n    case fromActions.PAGINATE: {\n      const delta = (action as fromActions.Paginate).delta || state.params.size\n      const from = Math.max(0, state.params.from + delta)\n      return {\n        ...state,\n        params: {\n          ...state.params,\n          from,\n        },\n      }\n    }\n    case fromActions.SET_RESULTS_LAYOUT: {\n      return {\n        ...state,\n        resultsLayout: action.resultsLayout,\n      }\n    }\n    case fromActions.ADD_RESULTS: {\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          records: [...state.results.records, ...action.payload],\n        },\n        loadingMore: false,\n      }\n    }\n    case fromActions.CLEAR_RESULTS: {\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          hits: null,\n          records: [],\n        },\n      }\n    }\n    case fromActions.REQUEST_MORE_RESULTS: {\n      return {\n        ...state,\n        loadingMore: true,\n      }\n    }\n    case fromActions.SET_RESULTS_HITS: {\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          hits: action.payload,\n        },\n      }\n    }\n    case fromActions.SET_RESULTS_AGGREGATIONS: {\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          aggregations: action.payload,\n        },\n      }\n    }\n    case fromActions.SET_CONFIG_AGGREGATIONS: {\n      return {\n        ...state,\n        config: {\n          ...state.config,\n          aggregations: action.payload,\n        },\n      }\n    }\n    case fromActions.UPDATE_REQUEST_AGGREGATION_TERM: {\n      const config = state.config\n      const aggregations = config.aggregations\n      const terms = aggregations[action.key].terms\n      const { increment, ...patch } = action.patch\n\n      if (increment) {\n        patch.size = terms.size + increment\n      }\n      return {\n        ...state,\n        config: {\n          ...config,\n          aggregations: {\n            ...aggregations,\n            [action.key]: {\n              terms: {\n                ...terms,\n                ...patch,\n              },\n            },\n          },\n        },\n      }\n    }\n    case fromActions.PATCH_RESULTS_AGGREGATIONS: {\n      const clone = JSON.parse(JSON.stringify(state.results.aggregations))\n      clone[action.key].buckets = action.payload[action.key].buckets\n\n      return {\n        ...state,\n        results: {\n          ...state.results,\n          aggregations: clone,\n        },\n      }\n    }\n  }\n\n  return state\n}\n","import { Injectable } from '@angular/core'\nimport {\n  ResultsListLayout,\n  SearchFilters,\n  StateConfigFilters,\n} from '@lib/common'\nimport { select, Store } from '@ngrx/store'\nimport { Observable } from 'rxjs'\nimport {\n  AddSearch,\n  DEFAULT_SEARCH_KEY,\n  Paginate,\n  RequestMoreOnAggregation,\n  RequestMoreResults,\n  Scroll,\n  SetConfigAggregations,\n  SetConfigFilters,\n  SetFilters,\n  SetIncludeOnAggregation,\n  SetPagination,\n  SetResultsLayout,\n  SetSearch,\n  UpdateFilters,\n} from './actions'\nimport { SearchState, SearchStateParams } from './reducer'\nimport {\n  getSearchConfigAggregations,\n  getSearchFilters,\n  getSearchResults,\n  getSearchResultsAggregations,\n  getSearchResultsHits,\n  getSearchResultsLayout,\n  getSearchResultsLoading,\n  isEndOfResults,\n} from './selectors'\n\n@Injectable()\nexport class SearchFacade {\n  results$: Observable<any>\n  layout$: Observable<string>\n  isLoading$: Observable<boolean>\n  isEndOfResults$: Observable<boolean>\n  searchFilters$: Observable<SearchFilters>\n  configAggregations$: Observable<any>\n  resultsAggregations$: Observable<any>\n  resultsHits$: Observable<any>\n\n  searchId: string\n\n  constructor(private store: Store<SearchState>) {}\n\n  init(searchId: string = DEFAULT_SEARCH_KEY): void {\n    this.searchId = searchId\n    this.store.dispatch(new AddSearch(searchId))\n\n    this.results$ = this.store.pipe(select(getSearchResults, searchId))\n    this.layout$ = this.store.pipe(select(getSearchResultsLayout, searchId))\n    this.isLoading$ = this.store.pipe(select(getSearchResultsLoading, searchId))\n    this.searchFilters$ = this.store.pipe(select(getSearchFilters, searchId))\n    this.resultsHits$ = this.store.pipe(select(getSearchResultsHits, searchId))\n    this.isEndOfResults$ = this.store.pipe(select(isEndOfResults, searchId))\n    this.configAggregations$ = this.store.pipe(\n      select(getSearchConfigAggregations, searchId)\n    )\n    this.resultsAggregations$ = this.store.pipe(\n      select(getSearchResultsAggregations, searchId)\n    )\n  }\n\n  setConfigAggregations(config: any): void {\n    this.store.dispatch(new SetConfigAggregations(config, this.searchId))\n  }\n\n  setConfigFilters(filters: StateConfigFilters): void {\n    this.store.dispatch(new SetConfigFilters(filters, this.searchId))\n  }\n\n  requestMoreResults(): void {\n    this.store.dispatch(new RequestMoreResults(this.searchId))\n  }\n\n  requestMoreOnAggregation(key: string, increment: number): void {\n    this.store.dispatch(\n      new RequestMoreOnAggregation(key, increment, this.searchId)\n    )\n  }\n\n  setResultsLayout(layout: ResultsListLayout): void {\n    this.store.dispatch(new SetResultsLayout(layout, this.searchId))\n  }\n\n  setFilters(filters: SearchFilters): void {\n    this.store.dispatch(new SetFilters(filters, this.searchId))\n  }\n\n  updateFilters(filters: SearchFilters): void {\n    this.store.dispatch(new UpdateFilters(filters, this.searchId))\n  }\n\n  setSearch(params: SearchStateParams): void {\n    this.store.dispatch(new SetSearch(params, this.searchId))\n  }\n\n  setIncludeOnAggregation(key: string, include: string): void {\n    this.store.dispatch(\n      new SetIncludeOnAggregation(key, include, this.searchId)\n    )\n  }\n\n  setPagination(from: number, size: number): void {\n    this.store.dispatch(new SetPagination(from, size, this.searchId))\n  }\n\n  paginate(delta: number): void {\n    this.store.dispatch(new Paginate(delta, this.searchId))\n  }\n\n  scroll(): void {\n    this.store.dispatch(new Scroll(this.searchId))\n  }\n}\n","import { createFeatureSelector, createSelector } from '@ngrx/store'\nimport { DEFAULT_SEARCH_KEY } from './actions'\nimport { SEARCH_FEATURE_KEY, SearchState, SearchStateSearch } from './reducer'\n\nexport const getSearchState = createFeatureSelector<SearchState>(\n  SEARCH_FEATURE_KEY\n)\n\nexport const getSearchStateSearch = createSelector(\n  getSearchState,\n  (state: SearchState, id: string = DEFAULT_SEARCH_KEY) => state[id]\n)\n\nexport const getSearchFilters = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.params.filters\n)\n\nexport const getSearchSortBy = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.params.sortBy\n)\n\nexport const getSearchResultsLayout = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.resultsLayout\n)\n\nexport const getSearchConfigAggregations = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.config.aggregations\n)\n\nexport const getSearchResults = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.results.records\n)\n\nexport const getSearchResultsLoading = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.loadingMore\n)\n\nexport const getSearchResultsAggregations = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.results.aggregations\n)\n\nexport const getSearchResultsHits = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => state.results.hits\n)\n\nexport const isEndOfResults = createSelector(\n  getSearchStateSearch,\n  (state: SearchStateSearch) => {\n    return (\n      state.results.hits &&\n      state.params.from + state.params.size >= state.results.hits.value\n    )\n  }\n)\n","/*\n * Public API Surface of ui\n */\n\nexport * from './lib/dropdown-selector/dropdown-selector.component'\nexport * from './lib/facets/facets.module'\nexport * from './lib/facets/facets.model'\nexport * from './lib/facets/fixtures'\nexport * from './lib/text-input/text-input.component'\nexport * from './lib/chips-input/chips-input.component'\nexport * from './lib/datepicker/datepicker.component'\nexport * from './lib/text-area/text-area.component'\nexport * from './lib/ui.module'\n","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core'\nimport { Observable } from 'rxjs'\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  switchMap,\n  tap,\n} from 'rxjs/operators'\n\n@Component({\n  selector: 'ui-autocomplete',\n  templateUrl: './autocomplete.component.html',\n  styleUrls: ['./autocomplete.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AutocompleteComponent implements OnInit {\n  @Input() placeholder: string\n  @Input() action: () => Observable<string[]>\n  @Output() changed = new EventEmitter<string>()\n\n  searching: boolean\n\n  autocomplete = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      tap(() => (this.searching = true)),\n      switchMap((term) => this.action())\n    )\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"form-group\">\n  <input\n    type=\"text\"\n    class=\"form-control form-control-lg\"\n    [placeholder]=\"placeholder\"\n  />\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core'\n\n@Component({\n  selector: 'ui-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ButtonComponent implements OnInit {\n  @Input() type: 'primary' | 'secondary' | 'default' = 'default'\n  @Input() disabled = false\n  @Input() extraClass = ''\n\n  classList = ''\n\n  get color() {\n    switch (this.type) {\n      case 'default':\n        return 'bg-gray-100 hover:bg-gray-200'\n      case 'primary':\n        return 'bg-primary-lighter hover:bg-primary'\n      case 'secondary':\n        return 'bg-secondary-lighter hover:bg-secondary'\n    }\n  }\n\n  get textColor() {\n    switch (this.type) {\n      case 'default':\n        return 'text-main'\n      case 'secondary':\n        return 'text-secondary-darkest'\n      case 'primary':\n        return 'text-primary-darkest'\n    }\n  }\n\n  get borderColor() {\n    switch (this.type) {\n      case 'default':\n        return 'border-gray-100 hover:border-gray-200 focus:border-gray-500 focus:ring-4 focus:ring-gray-500 focus:ring-opacity-50'\n      case 'secondary':\n        return 'border-secondary-lighter hover:border-secondary focus:border-secondary-darker focus:ring-4 focus:ring-secondary-darker focus:ring-opacity-50'\n      case 'primary':\n        return 'border-primary-lighter hover:border-primary focus:border-primary-darker focus:ring-4 focus:ring-primary-darker focus:ring-opacity-50'\n    }\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.classList = `${this.color} ${this.textColor} ${this.borderColor} ${this.extraClass}`\n  }\n}\n","<button\n  type=\"button\"\n  class=\"border py-2 px-4 rounded focus:outline-none\"\n  [class]=\"classList\"\n  [disabled]=\"disabled\"\n>\n  <ng-content></ng-content>\n</button>\n","import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'ui-catalog-title',\n  templateUrl: './catalog-title.component.html',\n  styleUrls: ['./catalog-title.component.css'],\n})\nexport class CatalogTitleComponent {\n  @Input() name: string\n  @Input() tooltip: string\n  @Input() description: string\n}\n","<div class=\"lg:flex lg:items-center lg:justify-between\">\n  <div class=\"flex-1 min-w-0\">\n    <h2\n      *ngIf=\"name\"\n      [title]=\"tooltip\"\n      class=\"text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:leading-9 sm:truncate\"\n    >\n      {{ name }}\n    </h2>\n    <div\n      *ngIf=\"description\"\n      class=\"mt-1 flex flex-col sm:mt-0 sm:flex-row sm:flex-wrap\"\n    >\n      <div\n        class=\"mt-2 flex items-center text-sm leading-5 text-gray-500 sm:mr-6\"\n      >\n        {{ description }}\n      </div>\n    </div>\n  </div>\n</div>\n","import { HttpClient } from '@angular/common/http'\nimport { Component, Input, OnInit, Output } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\nimport { distinctUntilChanged, map } from 'rxjs/operators'\n\nexport interface Items {\n  display: string\n  value: string\n}\n\n@Component({\n  selector: 'ui-chips-input',\n  templateUrl: './chips-input.component.html',\n  styleUrls: ['./chips-input.component.css'],\n})\nexport class ChipsInputComponent implements OnInit {\n  @Input() url: (text) => string\n  @Input() placeholder: string\n  @Input() selectedItems: Items[]\n  @Output() itemsChange: Observable<Items[]>\n\n  rawChange: Subject<Items[]>\n\n  items: Items[] = []\n\n  onChange(event) {\n    this.rawChange.next(event)\n  }\n\n  requestAutocompleteItems = (text: string): Observable<any> => {\n    const url = this.url(text)\n    return this.http\n      .get<any>(url)\n      .pipe(map((item) => item.map((i) => i.values.eng)))\n  }\n\n  constructor(private http: HttpClient) {\n    this.rawChange = new Subject<Items[]>()\n    this.itemsChange = this.rawChange.pipe(distinctUntilChanged())\n  }\n\n  ngOnInit(): void {\n    this.items = this.selectedItems\n  }\n}\n","<tag-input\n  [ngModel]=\"items\"\n  (ngModelChange)=\"onChange($event)\"\n  onlyFromAutocomplete=\"true\"\n  [placeholder]=\"placeholder\"\n  [animationDuration]=\"{ enter: '0ms', leave: '0ms' }\"\n  class=\"border-2 border-primary h-full rounded-lg p-2 bg-white text-sm focus:border-primary\"\n>\n  <tag-input-dropdown\n    [autocompleteObservable]=\"requestAutocompleteItems\"\n    [minimumTextLength]=\"0\"\n  >\n    <ng-template let-item=\"item\" let-index=\"index\">\n      {{ item.display }}\n    </ng-template>\n    >\n  </tag-input-dropdown>\n</tag-input>\n","import { Component, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'ui-color-scale',\n  templateUrl: './color-scale.component.html',\n  styleUrls: ['./color-scale.component.css'],\n})\nexport class ColorScaleComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"flex flex-row items-center\">\n  <div class=\"text-xs text-gray-700 font-bold m-2 w-32 text-right\">primary</div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-primary-darkest\"\n    title=\"primary-darkest\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-primary-darker\"\n    title=\"primary-darker\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-primary border-2 border-primary-darkest\"\n    title=\"primary\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-primary-lighter\"\n    title=\"primary-lighter\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-primary-lightest\"\n    title=\"primary-lightest\"\n  ></div>\n</div>\n<div class=\"flex flex-row\">\n  <div class=\"text-xs text-gray-700 font-bold m-2 w-32 text-right\">\n    secondary\n  </div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-secondary-darkest\"\n    title=\"secondary-darkest\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-secondary-darker\"\n    title=\"secondary-darker\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-secondary border-2 border-secondary-darkest\"\n    title=\"secondary\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-secondary-lighter\"\n    title=\"secondary-lighter\"\n  ></div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-secondary-lightest\"\n    title=\"secondary-lightest\"\n  ></div>\n</div>\n<div class=\"flex flex-row\">\n  <div class=\"text-xs text-gray-700 font-bold m-2 w-32 text-right\">\n    background to main\n  </div>\n  <div\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-background\"\n    title=\"background\"\n  ></div>\n  <div\n    *ngFor=\"let i of [1, 2, 3, 4, 5, 6, 7, 8, 9]\"\n    class=\"shadow-md rounded w-6 h-6 m-2 bg-gray-{{ i }}00\"\n    title=\"bg-gray-{{ i }}00\"\n  ></div>\n  <div class=\"shadow-md rounded w-6 h-6 m-2 bg-main\" title=\"main\"></div>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core'\nimport { IMyDateModel, IMyDpOptions } from 'mydatepicker'\n\n@Component({\n  selector: ' ui-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.css'],\n})\nexport class DatepickerComponent implements OnInit, AfterViewInit {\n  @Input() options: IMyDpOptions\n  @Input() currentDate: Date\n\n  @Output()\n  selectedDate = new EventEmitter<Date>()\n\n  model: any\n\n  onDateChanged(event: IMyDateModel) {\n    this.selectedDate.emit(new Date(event.jsdate))\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.initializeDate(this.currentDate)\n  }\n\n  initializeDate(date: Date) {\n    this.model = {\n      jsdate: date || new Date(),\n    }\n  }\n\n  ngAfterViewInit() {\n    // to delay emit after parent viewinit completed\n    setTimeout(() => this.selectedDate.emit(this.model.jsdate))\n  }\n}\n","<my-date-picker\n  [options]=\"options\"\n  (dateChanged)=\"onDateChanged($event)\"\n  [(ngModel)]=\"model\"\n></my-date-picker>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker'\n\nexport const placeholder = 'dropFile'\nmarker('dropFile')\n\n@Component({\n  selector: 'ui-drag-and-drop-file-input',\n  templateUrl: './drag-and-drop-file-input.component.html',\n  styleUrls: ['./drag-and-drop-file-input.component.css'],\n})\nexport class DragAndDropFileInputComponent implements OnInit {\n  @Input() placeholder = placeholder\n  @Input() accept = '*'\n  @Output() fileChange = new EventEmitter<any>()\n  selectedFile: File = null\n\n  get fileName(): string | null {\n    return this.selectedFile && this.selectedFile.name\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  selectFile(event) {\n    this.selectedFile = event.addedFiles[0]\n\n    this.fileChange.emit(this.selectedFile)\n  }\n}\n","<div class=\"flex h-full\">\n  <ngx-dropzone\n    class=\"flex-1\"\n    multiple=\"false\"\n    (change)=\"selectFile($event)\"\n    [accept]=\"accept\"\n  >\n    <div *ngIf=\"!fileName\" class=\"text-gray-900 pl-2 py-2\" translate=\"\">\n      {{ placeholder }}\n    </div>\n\n    <div *ngIf=\"fileName\" class=\"text-gray-900 pl-2 py-2\">{{ fileName }}</div>\n  </ngx-dropzone>\n</div>\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core'\n\n@Component({\n  selector: 'ui-dropdown-selector',\n  templateUrl: './dropdown-selector.component.html',\n  styleUrls: ['./dropdown-selector.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DropdownSelectorComponent implements OnInit, AfterViewInit {\n  @Input() title: string\n  @Input() showTitle = true\n  @Input() ariaName: string\n  @Input() choices: {\n    value: any\n    label: string\n  }[]\n  @Input() selected: any\n  @Output() selectValue = new EventEmitter<any>()\n\n  get id() {\n    return this.title.toLowerCase().replace(/[^a-z]+/g, '-')\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  isSelected(choice) {\n    return choice.value === this.selected\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.selectValue.emit(this.choices[0].value))\n  }\n}\n","<div class=\"flex flex-row items-center relative\">\n  <label\n    *ngIf=\"showTitle\"\n    class=\"block uppercase tracking-wide text-gray-800 text-xs font-bold mr-2 whitespace-no-wrap\"\n    [attr.for]=\"id\"\n  >\n    {{ title }}\n  </label>\n  <select\n    [id]=\"id\"\n    (change)=\"this.selectValue.emit($event.target.value)\"\n    class=\"block w-full bg-white border border-gray-300 text-gray-800 py-2 px-3 pr-6 rounded leading-tight focus:outline-none focus:border-primary\"\n  >\n    <option\n      *ngFor=\"let choice of choices\"\n      [value]=\"choice.value\"\n      [selected]=\"isSelected(choice)\"\n    >\n      {{ choice.label | translate }}\n    </option>\n  </select>\n  <div\n    class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-800\"\n  ></div>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core'\nimport { AggregationsTypesEnum } from '@lib/common'\nimport { fromEvent, Subscription } from 'rxjs'\nimport { debounceTime } from 'rxjs/operators'\nimport {\n  FacetPath,\n  FacetSelectEvent,\n  ModelBlock,\n  ModelItem,\n} from '../facets.model'\n\n@Component({\n  selector: 'ui-facet-block',\n  templateUrl: './facet-block.component.html',\n  styleUrls: ['./facet-block.component.css'],\n})\nexport class FacetBlockComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input() collapsed: boolean\n  @Input() filter: string\n  @Input() model: ModelBlock\n  @Input() selectedPaths: FacetPath[]\n\n  @ViewChild('filterInput') eltFilterInputRef: ElementRef<HTMLInputElement>\n\n  @Output() filterChange = new EventEmitter<string>()\n  @Output() itemChange = new EventEmitter<FacetSelectEvent>()\n  @Output() more = new EventEmitter<void>()\n\n  title: string\n  hasItems: boolean\n  private subscription = new Subscription()\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.title = this.model.key\n    this.hasItems = this.countItems() > 0\n  }\n\n  ngAfterViewInit(): void {\n    if (this.eltFilterInputRef) {\n      this.subscription.add(\n        fromEvent<Event>(this.eltFilterInputRef.nativeElement, 'keyup')\n          .pipe(debounceTime(300))\n          .subscribe((event: any) =>\n            this.onFilterChange((event.path[0] as HTMLInputElement).value)\n          )\n      )\n    }\n  }\n\n  get canFilter(): boolean {\n    return this.model.includeFilter\n  }\n\n  countItems() {\n    return this.model.type === AggregationsTypesEnum.FILTERS\n      ? this.model.items.reduce((sum, current) => sum + current.count, 0)\n      : this.model.items.length\n  }\n\n  toggleCollapsed() {\n    this.collapsed = !this.collapsed\n  }\n\n  onFilterChange(value: string) {\n    this.filterChange.emit(value)\n  }\n\n  isItemSelected(item: ModelItem) {\n    return this.selectedPaths\n      .map((path) => JSON.stringify(path))\n      .includes(JSON.stringify(item.path))\n  }\n\n  emitItemChange(item: ModelItem): void {\n    const eventOutput = { item, block: this.model }\n    this.itemChange.emit(eventOutput)\n  }\n\n  onItemSelectedChange(selected: boolean, item: ModelItem) {\n    item.selected = selected\n    this.emitItemChange(item)\n  }\n\n  onItemInvertedChange(inverted: boolean, item: ModelItem) {\n    item.inverted = inverted\n    this.emitItemChange(item)\n  }\n\n  onMoreClick(event: Event) {\n    event.preventDefault()\n    this.more.emit()\n  }\n\n  getItems() {\n    return this.model.items\n  }\n\n  canShowMore() {\n    return this.model.more\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe()\n  }\n}\n\n@Component({ selector: 'ui-facet-block', template: '' })\nexport class FacetBlockStubComponent implements Partial<FacetBlockComponent> {\n  @Input() title: string\n  @Input() model: ModelBlock\n  @Input() selectedPaths: string[][]\n\n  @Output() filterChange = new EventEmitter<string>()\n  @Output() itemSelected = new EventEmitter<string[]>()\n  @Output() itemUnselected = new EventEmitter<string[]>()\n}\n","<div\n  class=\"flex flex-row items-center group\"\n  *ngIf=\"hasItems\"\n  (click)=\"toggleCollapsed()\"\n>\n  <span\n    class=\"flex-initial truncate font-bold cursor-pointer text-gray-900 group-hover:text-black span-title\"\n    >{{ 'facets.block.title.' + title | translate }}</span\n  >\n  <div\n    *ngIf=\"!collapsed\"\n    class=\"flex-shrink-0 cursor-pointer text-gray-900 group-hover:text-black icon-collapse\"\n    style=\"min-width: 20px\"\n  >\n    <!-- chevron-down svg -->\n    <svg\n      class=\"h-5 w-5\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path\n        fill-rule=\"evenodd\"\n        d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n        clip-rule=\"evenodd\"\n      />\n    </svg>\n  </div>\n  <div\n    *ngIf=\"collapsed\"\n    class=\"flex-shrink-0 cursor-pointer text-gray-900 group-hover:text-black icon-expand\"\n    style=\"min-width: 20px\"\n  >\n    <!-- chevron-right svg -->\n    <svg\n      class=\"h-5 w-5\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path\n        fill-rule=\"evenodd\"\n        d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n        clip-rule=\"evenodd\"\n      />\n    </svg>\n  </div>\n</div>\n<div [hidden]=\"collapsed || !hasItems\" class=\"ml-4 collapsible-content\">\n  <div\n    *ngIf=\"canFilter\"\n    class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500\"\n  >\n    <svg\n      class=\"h-4 w-4 my-2\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\"\n      />\n    </svg>\n  </div>\n  <input\n    type=\"text\"\n    class=\"w-full rounded border border-1 border-gray-300 input-filter py-1 px-2 pl-8 focus:outline-none focus:border-blue-400\"\n    *ngIf=\"canFilter\"\n    #filterInput\n  />\n  <ui-facet-item\n    *ngFor=\"let item of getItems()\"\n    [label]=\"item.value\"\n    [count]=\"item.count\"\n    [selected]=\"isItemSelected(item)\"\n    (selectedChange)=\"onItemSelectedChange($event, item)\"\n    (invertedChange)=\"onItemInvertedChange($event, item)\"\n  ></ui-facet-item>\n  <a href *ngIf=\"canShowMore()\" class=\"a-more\" (click)=\"onMoreClick($event)\"\n    >more</a\n  >\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\n\n@Component({\n  selector: 'ui-facet-item',\n  templateUrl: './facet-item.component.html',\n  styleUrls: ['./facet-item.component.css'],\n})\nexport class FacetItemComponent implements OnInit {\n  @Input() label: string\n  @Input() count: number\n  @Input() selected: boolean\n  @Input() inverted: boolean\n\n  @Output() selectedChange = new EventEmitter<boolean>()\n  @Output() invertedChange = new EventEmitter<boolean>()\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onSelectedChange(value: boolean) {\n    this.selectedChange.emit(value)\n  }\n\n  onInvertedChange(value: boolean) {\n    this.invertedChange.emit(value)\n  }\n\n  toggleInverted() {\n    this.inverted = !this.inverted\n    this.onInvertedChange(this.inverted)\n  }\n}\n\n@Component({ selector: 'ui-facet-item', template: '' })\nexport class FacetItemStubComponent implements Partial<FacetItemComponent> {\n  @Input() label: string\n  @Input() count: number\n  @Input() selected: boolean\n  @Input() inverted: boolean\n\n  @Output() selectedChange = new EventEmitter<boolean>()\n  @Output() invertedChange = new EventEmitter<boolean>()\n}\n","<div\n  class=\"flex flex-row items-center group px-1 my-1 hover:bg-gray-100 rounded-sm\"\n>\n  <label\n    class=\"flex-grow flex-shrink truncate cursor-pointer text-gray-900 group-hover:text-black\"\n  >\n    <input\n      type=\"checkbox\"\n      class=\"cursor-pointer\"\n      [ngModel]=\"selected\"\n      (ngModelChange)=\"onSelectedChange($event)\"\n    />\n    {{ label | translate }}\n    <span class=\"text-gray-600 group-hover:text-black\">({{ count }})</span>\n  </label>\n  <div\n    *ngIf=\"!inverted\"\n    class=\"flex-shrink-0 cursor-pointer invisible group-hover:visible icon-exclude\"\n    style=\"min-width: 20px\"\n    (click)=\"toggleInverted()\"\n  >\n    <!-- minus svg -->\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path\n        fill-rule=\"evenodd\"\n        d=\"M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\"\n        clip-rule=\"evenodd\"\n      />\n    </svg>\n  </div>\n  <div\n    *ngIf=\"inverted\"\n    class=\"flex-shrink-0 cursor-pointer invisible group-hover:visible icon-include\"\n    style=\"min-width: 20px\"\n    (click)=\"toggleInverted()\"\n  >\n    <!-- check svg -->\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n    >\n      <path\n        fill-rule=\"evenodd\"\n        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n        clip-rule=\"evenodd\"\n      />\n    </svg>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { EsRequestAggTerm } from '@lib/common'\nimport { FacetSelectEvent, ModelBlock } from '../facets.model'\n\n@Component({\n  selector: 'ui-facet-list',\n  templateUrl: './facet-list.component.html',\n  styleUrls: ['./facet-list.component.css'],\n})\nexport class FacetListComponent implements OnInit {\n  @Input() models: ModelBlock[]\n  @Input() selectedPaths: string[][]\n\n  @Output() itemChange = new EventEmitter<FacetSelectEvent>()\n\n  @Output() more = new EventEmitter<string>()\n  @Output() filterChange = new EventEmitter<EsRequestAggTerm>()\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  getBlockSelectedPaths(model: ModelBlock) {\n    return this.selectedPaths.filter((path) => {\n      const sPath = JSON.stringify(path)\n      const sModelPath = JSON.stringify(model.path)\n      const startModelPath = sModelPath.substring(0, sModelPath.length - 1)\n      return sPath.startsWith(startModelPath)\n    })\n  }\n\n  trackByIndexKey(index: number, model: ModelBlock) {\n    return model.key\n  }\n\n  onItemChange(facetEvent: FacetSelectEvent) {\n    this.itemChange.emit(facetEvent)\n  }\n\n  onMore(key: string): void {\n    this.more.emit(key)\n  }\n\n  onFilterChange(field: string, include: string): void {\n    this.filterChange.emit({ field, include })\n  }\n}\n","<ui-facet-block\n  *ngFor=\"let model of models; trackBy: trackByIndexKey\"\n  [model]=\"model\"\n  [selectedPaths]=\"getBlockSelectedPaths(model)\"\n  (itemChange)=\"onItemChange($event)\"\n  (filterChange)=\"onFilterChange(model.key, $event)\"\n  (more)=\"onMore(model.key)\"\n></ui-facet-block>\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule } from '@angular/forms'\nimport { TranslateModule } from '@ngx-translate/core'\nimport { FacetBlockComponent } from './facet-block/facet-block.component'\nimport { FacetItemComponent } from './facet-item/facet-item.component'\nimport { FacetListComponent } from './facet-list/facet-list.component'\n\n@NgModule({\n  declarations: [FacetItemComponent, FacetBlockComponent, FacetListComponent],\n  imports: [CommonModule, FormsModule, TranslateModule.forChild()],\n  exports: [FacetListComponent],\n})\nexport class FacetsModule {}\n","import { AggregationsTypesEnum } from '@lib/common'\nimport { ModelBlock, ModelItem } from '@lib/ui'\n\nexport const BLOCK_MODEL_FIXTURE: ModelBlock = {\n  key: 'tag',\n  items: [\n    { value: 'Hungary', count: 20, path: ['tag', 'Hungary'] },\n    { value: 'Austria', count: 17, path: ['tag', 'Austria'] },\n    { value: 'Belgium', count: 17, path: ['tag', 'Belgium'] },\n    { value: 'Bulgaria', count: 17, path: ['tag', 'Bulgaria'] },\n    { value: 'Croatia', count: 17, path: ['tag', 'Croatia'] },\n    { value: 'Cyprus', count: 17, path: ['tag', 'Cyprus'] },\n    { value: 'Czechia', count: 17, path: ['tag', 'Czechia'] },\n    { value: 'Denmark', count: 17, path: ['tag', 'Denmark'] },\n    { value: 'Estonia', count: 17, path: ['tag', 'Estonia'] },\n    { value: 'Finland', count: 17, path: ['tag', 'Finland'] },\n    { value: 'France', count: 17, path: ['tag', 'France'] },\n    { value: 'Germany', count: 17, path: ['tag', 'Germany'] },\n    { value: 'Italy', count: 17, path: ['tag', 'Italy'] },\n    { value: 'Latvia', count: 17, path: ['tag', 'Latvia'] },\n    { value: 'Luxembourg', count: 17, path: ['tag', 'Luxembourg'] },\n    { value: 'Malta', count: 17, path: ['tag', 'Malta'] },\n    { value: 'Netherlands', count: 17, path: ['tag', 'Netherlands'] },\n    { value: 'Poland', count: 17, path: ['tag', 'Poland'] },\n    { value: 'Portugal', count: 17, path: ['tag', 'Portugal'] },\n    { value: 'Romania', count: 17, path: ['tag', 'Romania'] },\n    { value: 'Slovakia', count: 17, path: ['tag', 'Slovakia'] },\n  ],\n  path: ['tag'],\n  type: AggregationsTypesEnum.TERMS,\n  size: 21,\n  more: true,\n  includeFilter: true,\n  excludeFilter: false,\n}\nexport const EMPTY_BLOCK_MODEL_FIXTURE: ModelBlock = {\n  key: 'emptytag',\n  items: [],\n  path: ['emptytag'],\n  type: AggregationsTypesEnum.TERMS,\n  size: 21,\n  more: true,\n  includeFilter: false,\n  excludeFilter: false,\n}\n\nexport const FACET_ITEM_FIXTURE: ModelItem = {\n  path: ['tag.default', 'land use'],\n  value: 'land use',\n  count: 500,\n  selected: true,\n  inverted: false,\n}\n","export * from './aggregations-model-response'\n","import { Component, Input, OnInit } from '@angular/core'\n\ninterface ColorScheme {\n  outerBar: string\n  innerBar: string\n}\n\n@Component({\n  selector: 'ui-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.css'],\n})\nexport class ProgressBarComponent implements OnInit {\n  @Input() value = 0\n  @Input() type: 'primary' | 'secondary' | 'default' = 'default'\n\n  get progress() {\n    return this.value > 0 ? (this.value < 100 ? this.value : 100) : 0\n  }\n\n  get color(): ColorScheme {\n    switch (this.type) {\n      case 'default':\n        return {\n          outerBar: 'bg-gray-200',\n          innerBar: 'bg-gray-100',\n        }\n      case 'primary':\n        return {\n          outerBar: 'bg-primary',\n          innerBar: 'bg-primary-lighter',\n        }\n      case 'secondary':\n        return {\n          outerBar: 'bg-secondary',\n          innerBar: 'bg-secondary-lighter',\n        }\n    }\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"flex h-full {{ color.outerBar }} rounded-t-lg rounded-b-lg\">\n  <div\n    [style.width.%]=\"progress\"\n    class=\"flex {{\n      color.innerBar\n    }} my-1 mx-1 transition-width duration-500 ease-in-out rounded-t-md rounded-b-md shadow-xl\"\n  >\n    <div class=\"flex items-center pl-2 py-1 text-gray-900 font-bold text-4\">\n      {{ progress }}%\n    </div>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core'\nimport { ColorService } from '@lib/common'\n\n@Component({\n  selector: 'ui-record-metric',\n  templateUrl: './record-metric.component.html',\n  styleUrls: ['./record-metric.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecordMetricComponent implements OnInit {\n  @Input() count: number\n  @Input() label: string\n  @Input() icon = '◔'\n\n  color: string\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.color = ColorService.generateLabelColor(this.label, 0.6, 0.5)\n  }\n}\n","<div\n  class=\"p-2 rounded flex flex-row items-center relative cursor-pointer hover:bg-background hover:border-gray-200 border border-gray-100 hover:shadow-sm\"\n>\n  <div\n    class=\"h-8 w-8 rounded-full bg-opacity-50 bg-gray-900 flex-shrink-0 text-white text-lg text-center\"\n    style=\"background-color: {{ color }};\"\n  >\n    {{ icon }}\n  </div>\n  <span\n    class=\"px-3 truncate text-sm text-main label flex-grow flex-shrink\"\n    [title]=\"label\"\n    >{{ label }}</span\n  >\n  <div\n    class=\"text-gray-600 text-sm border-gray-300 border-l px-3 flex-shrink-0\"\n    style=\"min-width: 7rem\"\n  >\n    <strong class=\"count text-gray-600\">{{ count }}</strong\n    >&nbsp;<span translate>records</span>.\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component } from '@angular/core'\nimport { RecordPreviewComponent } from '../record-preview/record-preview.component'\n\n@Component({\n  selector: 'ui-record-preview-card',\n  templateUrl: './record-preview-card.component.html',\n  styleUrls: ['./record-preview-card.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecordPreviewCardComponent extends RecordPreviewComponent {}\n","<div\n  class=\"h-full bg-white overflow-hidden transition duration-200 transform hover:scale-105\"\n>\n  <a\n    [href]=\"record.metadataUrl\"\n    [title]=\"record.abstract\"\n    [target]=\"linkTarget\"\n  >\n    <div class=\"flex flex-col min-h-full\">\n      <ui-record-thumbnail\n        class=\"md:h-32 border-b border-gray-200 bg-gray-100\"\n        [thumbnailUrl]=\"record.thumbnailUrl\"\n      ></ui-record-thumbnail>\n\n      <div class=\"flex-grow p-4\">\n        <h1 class=\"title-font text-lg font-medium mb-3 clamp-2\">\n          {{ record.title }}\n        </h1>\n        <p class=\"leading-relaxed text-sm text-gray-700 clamp-3\">\n          {{ record.abstract }}\n        </p>\n      </div>\n    </div>\n  </a>\n</div>\n","import { ChangeDetectionStrategy, Component } from '@angular/core'\nimport { RecordPreviewComponent } from '../record-preview/record-preview.component'\n\n@Component({\n  selector: 'ui-record-preview-list',\n  templateUrl: './record-preview-list.component.html',\n  styleUrls: ['./record-preview-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecordPreviewListComponent extends RecordPreviewComponent {}\n","<div\n  class=\"h-40 bg-white transition duration-200 hover:bg-gray-100 border-gray-300 rounded-md\"\n>\n  <a\n    [href]=\"record.metadataUrl\"\n    [target]=\"linkTarget\"\n    [title]=\"record.abstract\"\n  >\n    <div\n      class=\"h-full flex flex-row items-center border border-gray-200 shadow-sm\"\n    >\n      <ui-record-thumbnail\n        class=\"w-40 h-full flex-shrink-0 border-r border-gray-200 bg-gray-100\"\n        [thumbnailUrl]=\"record.thumbnailUrl\"\n      ></ui-record-thumbnail>\n\n      <div class=\"flex-grow h-full px-6 py-4 flex flex-col overflow-hidden\">\n        <div class=\"title-font text-lg font-medium mb-2\">\n          <h1 class=\"truncate\">{{ record.title }}</h1>\n        </div>\n        <p class=\"leading-relaxed clamp-3 text-sm text-gray-700\">\n          {{ record.abstract }}\n        </p>\n        <div class=\"flex-grow\"></div>\n        <div class=\"flex flex-row items-center\">\n          <div\n            class=\"text-gray-500 text-xs truncate capitalize border-r mr-4 pr-4\"\n            *ngIf=\"record.updateFrequency\"\n          >\n            <span translate>{{ record.updateFrequency }}</span>\n          </div>\n          <div\n            class=\"text-gray-500 text-xs border-gray-300 truncate viewable-downloadable\"\n            *ngIf=\"isViewable || isDownloadable\"\n          >\n            <span *ngIf=\"isViewable\" translate>record.action.view</span>\n            <span *ngIf=\"isViewable && isDownloadable\">,&nbsp;</span>\n            <span *ngIf=\"isDownloadable\" translate>record.action.download</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </a>\n</div>\n","import { ChangeDetectionStrategy, Component } from '@angular/core'\nimport { RecordPreviewComponent } from '../record-preview/record-preview.component'\n\n@Component({\n  selector: 'ui-record-preview-text',\n  templateUrl: './record-preview-text.component.html',\n  styleUrls: ['./record-preview-text.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecordPreviewTextComponent extends RecordPreviewComponent {}\n","<!-- Record list item: List Small -->\n<div class=\"mb-4\">\n  <div\n    class=\"flex sm:flex-row flex-col p-5 items-center sm:justify-start justify-center text-center sm:text-left bg-white hover:bg-gray-100 border-gray-200 border rounded-sm transition duration-200\"\n  >\n    <div class=\"flex-grow\">\n      <h1 class=\"title-font text-lg font-medium text-gray-900 mb-3\">\n        {{ record.title }}\n      </h1>\n      <p\n        class=\"leading-relaxed mb-3 text-gray-700 text-sm whitespace-pre-line clamp-3\"\n      >\n        {{ record.abstract }}\n      </p>\n\n      <div class=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n        <a\n          class=\"inline-flex items-center md:mb-2 lg:mb-0 hover:underline\"\n          [href]=\"record.metadataUrl\"\n        >\n          <span translate>record.more.details</span>\n          <svg\n            class=\"h-5 w-5\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M9 5l7 7-7 7\"\n            />\n          </svg>\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component } from '@angular/core'\nimport { RecordPreviewComponent } from '../record-preview/record-preview.component'\n\n@Component({\n  selector: 'ui-record-preview-title',\n  templateUrl: './record-preview-title.component.html',\n  styleUrls: ['./record-preview-title.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RecordPreviewTitleComponent extends RecordPreviewComponent {}\n","<!-- Record list item: List Small -->\n<div\n  class=\"h-10 w-full border-b border-gray-200 transition duration-200 hover:bg-gray-100 rounded-sm\"\n>\n  <a\n    [href]=\"record.metadataUrl\"\n    [target]=\"linkTarget\"\n    [title]=\"record.abstract\"\n  >\n    <div class=\"h-full flex flex-row items-center\">\n      <ui-record-thumbnail\n        class=\"w-10 h-full flex-shrink-0 border-r border-gray-200 bg-gray-100\"\n        [thumbnailUrl]=\"record.thumbnailUrl\"\n      ></ui-record-thumbnail>\n\n      <div class=\"flex-grow px-3 py-1 flex flex-col overflow-hidden\">\n        <h1 class=\"title-font text-sm font-bold truncate md:overflow-clip\">\n          {{ record.title }}\n        </h1>\n      </div>\n    </div>\n  </a>\n</div>\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core'\nimport { RecordSummary } from '@lib/common'\nimport { fromEvent, Subscription } from 'rxjs'\nimport { tap } from 'rxjs/operators'\n\n@Component({\n  selector: 'ui-record-preview',\n  template: '',\n})\nexport class RecordPreviewComponent implements OnInit, OnDestroy {\n  @Input() record: RecordSummary\n  @Input() linkTarget = '_blank'\n  @Output() mdSelect = new EventEmitter<RecordSummary>()\n  subscription = new Subscription()\n\n  constructor(protected elementRef: ElementRef) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      fromEvent(this.elementRef.nativeElement, 'click').subscribe(\n        (event: Event) => {\n          event.preventDefault()\n          event.stopPropagation()\n          this.mdSelect.emit(this.record)\n        }\n      )\n    )\n  }\n\n  get isViewable() {\n    return this.record.viewable\n  }\n  get isDownloadable() {\n    return this.record.downloadable\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe()\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'ui-record-thumbnail',\n  templateUrl: './record-thumbnail.component.html',\n})\nexport class RecordThumbnailComponent implements OnInit {\n  @Input() thumbnailUrl: string\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"h-full h-full relative flex-shrink-0 overflow-hidden\">\n  <svg\n    class=\"text-gray-200 absolute h-12 w-12 transform -translate-x-1/2 -translate-y-1/2\"\n    style=\"top: 50%; left: 50%\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n    />\n  </svg>\n  <img\n    *ngIf=\"thumbnailUrl\"\n    class=\"relative h-full w-full object-cover object-left-top\"\n    [src]=\"thumbnailUrl\"\n    alt=\"thumbnail\"\n  />\n</div>\n","import { Component, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'ui-results-hits-number',\n  templateUrl: './results-hits-number.component.html',\n})\nexport class ResultsHitsNumberComponent implements OnInit {\n  @Input() hits\n  @Input() loading: boolean\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div *ngIf=\"!loading\" class=\"w-full pl-4 text-gray-700\">\n  <ng-container *ngIf=\"hits\">\n    <span translate=\"\" [translateParams]=\"{ hits: hits.value }\"\n      >results.records.hits.found</span\n    >\n    <p\n      *ngIf=\"hits.value === 0\"\n      class=\"mt-4\"\n      [innerHtml]=\"'results.records.hits.found=0.help' | translate\"\n    ></p>\n  </ng-container>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core'\nimport { RecordSummary, ResultsListLayout } from '@lib/common'\n\n@Component({\n  selector: 'ui-results-list',\n  templateUrl: './results-list.component.html',\n  styleUrls: ['./results-list.component.css'],\n})\nexport class ResultsListComponent implements OnInit {\n  @Input() records: RecordSummary[]\n  @Input() loading: boolean\n  @Input() layout: ResultsListLayout = ResultsListLayout.CARD\n  @Output() mdSelect = new EventEmitter<RecordSummary>()\n  layoutEnum = ResultsListLayout\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<ng-container [ngSwitch]=\"layout\">\n  <ng-container\n    *ngSwitchCase=\"layoutEnum.CARD\"\n    [ngTemplateOutlet]=\"block\"\n  ></ng-container>\n  <div *ngSwitchCase=\"layoutEnum.LIST\" class=\"gap-4 p-4\">\n    <div class=\"pb-4\" *ngFor=\"let record of records\">\n      <ui-record-preview-list [record]=\"record\"></ui-record-preview-list>\n    </div>\n  </div>\n  <div *ngSwitchCase=\"layoutEnum.TITLE\" class=\"gap-4 p-4\">\n    <div class=\"pb-4\" *ngFor=\"let record of records\">\n      <ui-record-preview-title [record]=\"record\"></ui-record-preview-title>\n    </div>\n  </div>\n  <div *ngSwitchCase=\"layoutEnum.TEXT\" class=\"gap-4 p-4\">\n    <ui-record-preview-text\n      style=\"height: 24rem\"\n      *ngFor=\"let record of records\"\n      [record]=\"record\"\n    ></ui-record-preview-text>\n  </div>\n  <ng-container *ngSwitchDefault [ngTemplateOutlet]=\"block\"></ng-container>\n</ng-container>\n\n<ng-template #block>\n  <div class=\"grid grid-cols-3 gap-4 p-4\">\n    <ui-record-preview-card\n      *ngFor=\"let record of records\"\n      [record]=\"record\"\n      (mdSelect)=\"mdSelect.emit($event)\"\n      linkTarget=\"_blank\"\n    ></ui-record-preview-card>\n  </div>\n</ng-template>\n\n<div *ngIf=\"loading\" class=\"p-4\"><span translate>search.loading</span>...</div>\n","import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core'\n\ninterface ColorScheme {\n  outerBar: string\n  innerBar: string\n}\n\n@Component({\n  selector: 'ui-step-bar',\n  templateUrl: './step-bar.component.html',\n  styleUrls: ['./step-bar.component.css'],\n})\nexport class StepBarComponent implements OnInit {\n  @Input() steps\n  @Input() currentStep = 1\n  @Input() type: 'primary' | 'secondary' | 'default' = 'default'\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  get stepCounter() {\n    return new Array(this.steps)\n  }\n\n  get color(): ColorScheme {\n    switch (this.type) {\n      case 'default':\n        return {\n          outerBar: 'bg-gray-200',\n          innerBar: 'bg-gray-100',\n        }\n      case 'primary':\n        return {\n          outerBar: 'bg-primary',\n          innerBar: 'bg-primary-lighter',\n        }\n      case 'secondary':\n        return {\n          outerBar: 'bg-secondary',\n          innerBar: 'bg-secondary-lighter',\n        }\n    }\n  }\n\n  ngOnInit(): void {}\n\n  getCircleColor(index: number): string {\n    return index === this.currentStep\n      ? 'bg-black'\n      : index < this.currentStep\n      ? 'bg-white'\n      : this.color.innerBar\n  }\n\n  getChecked(index: number): boolean {\n    return index + 1 < this.currentStep\n  }\n}\n","<div class=\"relative flex flex-col justify-center\">\n  <div class=\"flex justify-between ml-16 mr-16 z-10 circle-steps\">\n    <div\n      *ngFor=\"let step of stepCounter; let i = index\"\n      class=\"shadow-md rounded-full h-6 w-6 {{ getCircleColor(i + 1) }}\"\n    >\n      <span class=\"icon-check pl-1\" *ngIf=\"getChecked(i)\"></span>\n    </div>\n  </div>\n  <div\n    class=\"absolute rounded-lg right-0 w-full {{ color.outerBar }} h-2 z-0\"\n  ></div>\n</div>\n","import { Component, Input, OnInit, Output } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\nimport { distinctUntilChanged } from 'rxjs/operators'\n\n@Component({\n  selector: 'ui-text-area',\n  templateUrl: './text-area.component.html',\n  styleUrls: ['./text-area.component.css'],\n})\nexport class TextAreaComponent implements OnInit {\n  @Input() value = ''\n  @Input() placeholder: string\n  @Output() valueChange: Observable<string>\n  rawChange = new Subject<string>()\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.valueChange = this.rawChange.pipe(distinctUntilChanged())\n  }\n}\n","<div class=\"h-full flex\">\n  <textarea\n    name=\"textArea\"\n    [placeholder]=\"placeholder\"\n    [value]=\"value\"\n    (change)=\"rawChange.next($event.target.value)\"\n    (input)=\"rawChange.next($event.target.value)\"\n    class=\"w-full pt-2 pl-2 resize-none border border-gray-800 rounded italic leading-tight focus:outline-none focus:bg-background focus:border-primary\"\n  ></textarea>\n</div>\n","import { Component, Input, OnInit, Output } from '@angular/core'\nimport { distinctUntilChanged } from 'rxjs/operators'\nimport { Observable, Subject } from 'rxjs'\n\n@Component({\n  selector: 'ui-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.css'],\n})\nexport class TextInputComponent implements OnInit {\n  @Input() value = ''\n  @Input() hint: string\n  @Output() valueChange: Observable<string>\n  rawChange = new Subject<string>()\n\n  constructor() {}\n\n  ngOnInit() {\n    this.valueChange = this.rawChange.pipe(distinctUntilChanged())\n  }\n}\n","<input\n  class=\"appearance-none border border-gray-300 rounded w-full p-2 text-gray-700 leading-tight focus:outline-none focus:border-primary\"\n  type=\"text\"\n  [value]=\"value\"\n  (change)=\"rawChange.next($event.target.value)\"\n  (input)=\"rawChange.next($event.target.value)\"\n  [placeholder]=\"hint\"\n  [attr.aria-label]=\"hint\"\n/>\n","import { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\nimport { TranslateModule } from '@ngx-translate/core'\nimport { NgxDropzoneModule } from 'ngx-dropzone'\nimport { AutocompleteComponent } from './autocomplete/autocomplete.component'\nimport { ButtonComponent } from './button/button.component'\nimport { CatalogTitleComponent } from './catalog-title/catalog-title.component'\nimport { ColorScaleComponent } from './color-scale/color-scale.component'\nimport { DragAndDropFileInputComponent } from './drag-and-drop-file-input/drag-and-drop-file-input.component'\nimport { DropdownSelectorComponent } from './dropdown-selector/dropdown-selector.component'\nimport { FacetsModule } from './facets/facets.module'\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component'\nimport { RecordMetricComponent } from './record-metric/record-metric.component'\nimport { RecordPreviewCardComponent } from './record-preview-card/record-preview-card.component'\nimport { RecordPreviewListComponent } from './record-preview-list/record-preview-list.component'\nimport { RecordPreviewTextComponent } from './record-preview-text/record-preview-text.component'\nimport { RecordPreviewTitleComponent } from './record-preview-title/record-preview-title.component'\nimport { ResultsHitsNumberComponent } from './results-hits-number/results-hits-number.component'\nimport { ResultsListComponent } from './results-list/results-list.component'\nimport { TextInputComponent } from './text-input/text-input.component'\nimport { RecordPreviewComponent } from './record-preview/record-preview.component'\nimport { RecordThumbnailComponent } from './record-thumbnail/record-thumbnail.component'\nimport { StepBarComponent } from './step-bar/step-bar.component'\nimport { TextAreaComponent } from './text-area/text-area.component'\nimport { TagInputModule } from 'ngx-chips'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { ChipsInputComponent } from './chips-input/chips-input.component'\nimport { DatepickerComponent } from './datepicker/datepicker.component'\nimport { MyDatePickerModule } from 'mydatepicker'\n\n@NgModule({\n  declarations: [\n    DropdownSelectorComponent,\n    AutocompleteComponent,\n    ButtonComponent,\n    TextInputComponent,\n    ColorScaleComponent,\n    RecordPreviewComponent,\n    RecordPreviewListComponent,\n    RecordPreviewCardComponent,\n    RecordPreviewTextComponent,\n    RecordPreviewTitleComponent,\n    RecordMetricComponent,\n    RecordThumbnailComponent,\n    ResultsListComponent,\n    CatalogTitleComponent,\n    DragAndDropFileInputComponent,\n    ProgressBarComponent,\n    StepBarComponent,\n    TextAreaComponent,\n    ChipsInputComponent,\n    DatepickerComponent,\n    ResultsHitsNumberComponent,\n  ],\n  imports: [\n    BrowserModule,\n    TranslateModule.forChild(),\n    NgxDropzoneModule,\n    FacetsModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TagInputModule,\n    MyDatePickerModule,\n  ],\n  exports: [\n    DropdownSelectorComponent,\n    AutocompleteComponent,\n    ButtonComponent,\n    TextInputComponent,\n    RecordPreviewListComponent,\n    RecordPreviewCardComponent,\n    RecordPreviewTextComponent,\n    RecordPreviewTitleComponent,\n    RecordMetricComponent,\n    RecordThumbnailComponent,\n    ResultsListComponent,\n    CatalogTitleComponent,\n    DragAndDropFileInputComponent,\n    ProgressBarComponent,\n    FacetsModule,\n    RecordPreviewComponent,\n    StepBarComponent,\n    TextAreaComponent,\n    ChipsInputComponent,\n    DatepickerComponent,\n    ResultsHitsNumberComponent,\n  ],\n})\nexport class UiModule {}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nconst routes: Routes = []\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit } from '@angular/core'\nimport { ColorService } from '@lib/common'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'search'\n\n  constructor() {\n    ColorService.applyCssVariables('#e73f51', '#c2e9dc', '#212029', '#fdfbff')\n  }\n\n  ngOnInit(): void {}\n}\n","<div class=\"p-4\">\n  <catalog-site-title></catalog-site-title>\n</div>\n<search-records-metrics field=\"tag\" count=\"20\"></search-records-metrics>\n\n<div searchSearchStateContainer=\"mainSearch\">\n  <app-main-search></app-main-search>\n</div>\n","import { HttpClientModule } from '@angular/common/http'\nimport { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\nimport { LibCatalogModule } from '@lib/catalog'\nimport { I18nModule, TRANSLATE_GEONETWORK_CONFIG } from '@lib/common'\nimport { BASE_PATH } from '@lib/gn-api'\nimport { LibSearchModule } from '@lib/search'\nimport { EffectsModule } from '@ngrx/effects'\nimport { MetaReducer, StoreModule } from '@ngrx/store'\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools'\nimport { TranslateModule, TranslateService } from '@ngx-translate/core'\nimport { storeFreeze } from 'ngrx-store-freeze'\nimport { environment } from '../environments/environment'\nimport { AppRoutingModule } from './app-routing.module'\nimport { AppComponent } from './app.component'\nimport { MainSearchComponent } from './main-search/main-search.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nexport const metaReducers: MetaReducer<any>[] = !environment.production\n  ? [storeFreeze]\n  : []\n\n@NgModule({\n  declarations: [AppComponent, MainSearchComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    I18nModule,\n    TranslateModule.forRoot(TRANSLATE_GEONETWORK_CONFIG),\n    LibSearchModule,\n    LibCatalogModule,\n    StoreModule.forRoot({}, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n    EffectsModule.forRoot(),\n    BrowserAnimationsModule,\n  ],\n  providers: [\n    {\n      provide: BASE_PATH,\n      useValue: '/geonetwork/srv/api',\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n  constructor(translate: TranslateService) {\n    translate.setDefaultLang('en')\n    translate.use('en')\n  }\n}\n","import { Component, OnInit } from '@angular/core'\nimport { BootstrapService } from '@lib/common'\nimport { SearchFacade } from '@lib/search'\nimport { map, take, tap } from 'rxjs/operators'\n\n@Component({\n  selector: 'app-main-search',\n  templateUrl: './main-search.component.html',\n  styleUrls: ['./main-search.component.scss'],\n})\nexport class MainSearchComponent implements OnInit {\n  constructor(\n    private bootstrap: BootstrapService,\n    private searchFacade: SearchFacade\n  ) {}\n\n  ngOnInit(): void {\n    this.bootstrap\n      .uiConfReady('srv')\n      .pipe(\n        take(1),\n        map((config) => config.mods.search.facetConfig),\n        tap((aggregationsConfig) => {\n          this.searchFacade.setConfigAggregations(aggregationsConfig)\n          this.searchFacade.requestMoreResults()\n        })\n      )\n      .subscribe()\n  }\n}\n","<div class=\"mb-3 mx-4 rounded flex flex-row\">\n  <div class=\"w-2/4 mr-3\">\n    <search-fuzzy-search></search-fuzzy-search>\n  </div>\n  <div class=\"w-1/4 mr-3\">\n    <search-sort-by></search-sort-by>\n  </div>\n  <div class=\"flex-grow\">\n    <search-results-layout></search-results-layout>\n  </div>\n</div>\n<div class=\"flex flex-row\">\n  <search-facets-container class=\"w-1/4\"></search-facets-container>\n  <div class=\"w-3/4\">\n    <search-results-hits></search-results-hits>\n    <search-results-list-container></search-results-list-container>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n}\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { AppModule } from './app/app.module'\nimport { environment } from './environments/environment'\n\nif (environment.production) {\n  enableProdMode()\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err))\n"],"sourceRoot":"webpack:///"}